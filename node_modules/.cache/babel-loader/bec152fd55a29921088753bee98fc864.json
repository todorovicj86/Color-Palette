{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\todor\\\\Documents\\\\4-Web Development\\\\1-Web Development Courses\\\\3-REACT\\\\25-Color Palette\\\\color-palette\\\\src\\\\Routes.js\";\nimport React, { Component } from 'react';\nimport { Route, Switch, Redirect } from 'react-router-dom';\nimport seedColors from './seedColors';\nimport ColorPalette from './ColorPalette';\nimport ColorPaletteList from './ColorPaletteList';\nimport PaletteShades from './PaletteShades';\nimport NewPaletteForm from './NewPaletteForm';\nimport { getPaletteShades } from './helpers';\n\nclass Routes extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      format: \"hex\",\n      copied: false,\n      colorPalettes: JSON.parse(window.localStorage.getItem(\"palettes\" || []))\n    };\n    this.handleFormat = this.handleFormat.bind(this);\n    this.onCopy = this.onCopy.bind(this);\n  }\n\n  handleFormat(value) {\n    this.setState({\n      format: value\n    });\n  }\n\n  onCopy(value) {\n    this.setState({\n      copied: value\n    });\n  }\n\n  componentDidMount() {\n    console.log(\"Mount\");\n\n    if (this.state.colorPalettes.length === 0) {\n      let palette = seedColors;\n      this.setState(st => ({\n        colorPalettes: [palette]\n      }), () => window.localStorage.setItem(\"palettes\", JSON.stringify(this.state.colorPalettes)));\n    } else {\n      this.setState(st => ({\n        colorPalettes: [...st.colorPalettes]\n      }), () => window.localStorage.setItem(\"palettes\", JSON.stringify(this.state.colorPalettes)));\n    }\n  }\n\n  render() {\n    const getPalette = props => {\n      let name = props.match.params.name;\n      let currentPalette = this.state.colorPalettes.find(palette => palette.id === name);\n      return React.createElement(ColorPalette, Object.assign({}, props, {\n        palette: getPaletteShades(currentPalette),\n        format: this.state.format,\n        handleFormat: this.handleFormat,\n        onCopy: this.onCopy,\n        sliderMarks: this.props.marks,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }));\n    };\n\n    const getColorShades = props => {\n      let name = props.match.params.name;\n      let colorName = props.match.params.colorName.split(\" \")[0];\n      let currentPalette = this.state.colorPalettes.find(palette => palette.id === name);\n      let currentColor = currentPalette.colors.find(color => color.name === colorName.split(\" \")[0]);\n      return React.createElement(PaletteShades, Object.assign({}, props, {\n        color: currentColor,\n        palette: currentPalette,\n        format: this.state.format,\n        handleFormat: this.handleFormat,\n        onCopy: this.onCopy,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }));\n    };\n\n    return React.createElement(Switch, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, React.createElement(Route, {\n      exact: true,\n      path: \"/\",\n      render: () => React.createElement(ColorPaletteList, {\n        colorPalettes: this.state.colorPalettes,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/palette/:name\",\n      render: getPalette,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/palette/:name/:colorName\",\n      render: getColorShades,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/newpalette\",\n      render: () => React.createElement(NewPaletteForm, {\n        format: this.state.format,\n        palettes: this.state.colorPalettes,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }), React.createElement(Redirect, {\n      to: \"/\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }));\n  }\n\n}\n\nRoutes.defaultProps = {\n  // colorPalettes: seedColors,\n  marks: {\n    50: \"50\",\n    100: \"100\",\n    200: \"200\",\n    300: \"300\",\n    400: \"400\",\n    500: \"500\",\n    600: \"600\",\n    700: \"700\",\n    800: \"800\",\n    900: \"900\"\n  }\n};\nexport default Routes;","map":{"version":3,"sources":["C:\\Users\\todor\\Documents\\4-Web Development\\1-Web Development Courses\\3-REACT\\25-Color Palette\\color-palette\\src\\Routes.js"],"names":["React","Component","Route","Switch","Redirect","seedColors","ColorPalette","ColorPaletteList","PaletteShades","NewPaletteForm","getPaletteShades","Routes","constructor","props","state","format","copied","colorPalettes","JSON","parse","window","localStorage","getItem","handleFormat","bind","onCopy","value","setState","componentDidMount","console","log","length","palette","st","setItem","stringify","render","getPalette","name","match","params","currentPalette","find","id","marks","getColorShades","colorName","split","currentColor","colors","color","defaultProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Route, Switch, Redirect } from 'react-router-dom'\r\nimport seedColors from './seedColors'\r\nimport ColorPalette from './ColorPalette'\r\nimport ColorPaletteList from './ColorPaletteList'\r\nimport PaletteShades from './PaletteShades'\r\nimport NewPaletteForm from './NewPaletteForm';\r\nimport {getPaletteShades} from './helpers'\r\n\r\nclass Routes extends Component {\r\n    static defaultProps = {\r\n        // colorPalettes: seedColors,\r\n        marks: {50: \"50\", 100: \"100\", 200: \"200\", 300: \"300\", 400: \"400\", 500: \"500\", 600: \"600\", 700: \"700\", 800: \"800\", 900: \"900\"}\r\n    }\r\n      constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            format: \"hex\",\r\n            copied: false,\r\n            colorPalettes: JSON.parse(window.localStorage.getItem(\"palettes\" || []))\r\n        }\r\n    \r\n        this.handleFormat = this.handleFormat.bind(this)\r\n        this.onCopy = this.onCopy.bind(this)\r\n      }\r\n    \r\n      handleFormat(value){\r\n          this.setState({\r\n              format: value,\r\n          })\r\n      }\r\n      onCopy(value){\r\n        this.setState({\r\n          copied: value\r\n        })\r\n      }\r\n\r\n      componentDidMount(){\r\n        console.log(\"Mount\")\r\n        if(this.state.colorPalettes.length === 0){\r\n          let palette = seedColors;\r\n          this.setState(\r\n            st => ({\r\n              colorPalettes: [palette]\r\n            }),\r\n            () => window.localStorage.setItem(\"palettes\", JSON.stringify(this.state.colorPalettes))\r\n          )\r\n        }else {\r\n          this.setState(\r\n            st => ({\r\n              colorPalettes: [...st.colorPalettes]\r\n            }),\r\n            () => window.localStorage.setItem(\"palettes\", JSON.stringify(this.state.colorPalettes))\r\n          );\r\n        }\r\n        \r\n        \r\n      }\r\n  \r\n    render(){\r\n        const getPalette = props => {\r\n            let name = props.match.params.name;\r\n                 \r\n            let currentPalette = this.state.colorPalettes.find(\r\n              palette => palette.id === name\r\n              \r\n            );\r\n            return <ColorPalette {...props} palette={getPaletteShades(currentPalette)} \r\n                    format={this.state.format} \r\n                    handleFormat = {this.handleFormat}\r\n                    onCopy = {this.onCopy} \r\n                    sliderMarks = {this.props.marks}\r\n                    />;\r\n        };\r\n      \r\n        const getColorShades = props => {\r\n            let name = props.match.params.name;\r\n            let colorName = props.match.params.colorName.split(\" \")[0];\r\n          \r\n            let currentPalette = this.state.colorPalettes.find( \r\n              palette => palette.id === name\r\n            )\r\n            let currentColor = currentPalette.colors.find(\r\n              color => color.name === colorName.split(\" \")[0]\r\n            )\r\n      \r\n            return <PaletteShades {...props} color={currentColor} \r\n                    palette = {currentPalette} \r\n                    format={this.state.format} \r\n                    handleFormat = {this.handleFormat}\r\n                    onCopy = {this.onCopy} \r\n                  />\r\n        }\r\n\r\n        return(\r\n            <Switch>\r\n                <Route exact path=\"/\" render = {() => <ColorPaletteList colorPalettes={this.state.colorPalettes} />} />\r\n                <Route exact path = \"/palette/:name\" render = {getPalette} />\r\n                <Route exact path = '/palette/:name/:colorName' render ={getColorShades} />\r\n                <Route exact path = \"/newpalette\" render= {() => <NewPaletteForm format={this.state.format} palettes={this.state.colorPalettes} />} />\r\n                <Redirect to = \"/\" />\r\n            </Switch>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default Routes;"]},"metadata":{},"sourceType":"module"}