{"ast":null,"code":"import chroma from 'chroma-js';\n\nvar rgbToHex = function (rgb) {\n  var hex = Number(rgb).toString(16);\n\n  if (hex.length < 2) {\n    hex = \"0\" + hex;\n  }\n\n  return hex;\n};\n\nvar fullColorHex = function (r, g, b) {\n  var red = rgbToHex(r);\n  var green = rgbToHex(g);\n  var blue = rgbToHex(b);\n  return red + green + blue;\n};\n\nvar colorShades = function (r, g, b) {\n  var max = Math.max(r, Math.max(g, b));\n  var step = 255 / (max * 10);\n  var red = (r * step, g * step, b * step);\n  var green = (r * step * 2, g * step * 2, b * step * 2);\n  var blue = (r * step * 3, g * step * 3, b * step * 3); //   var red = rgbToHex(Math.round(11*r/10))\n  //   var green = rgbToHex(Math.round(11*g/10))\n  //   var blue = rgbToHex(Math.round(11*b/10))\n\n  console.log(red, green, blue);\n  return red + green + blue;\n}; // for(let i = 0; i < currentPalette.length; i++){\n//   console.log(currentPalette[i].color)\n// }\n\n\nvar getPaletteShades = function (currentPalette) {\n  // const currentPalette: {\n  //   paletteName: \"Material UI Colors\",\n  //   id: \"material-ui-colors\",\n  //   emoji: \"ðŸŽ¨\",\n  //   colors: [\n  //     { name: \"red\", color: \"#F44336\" },\n  //     { name: \"pink\", color: \"#E91E63\" },\n  //     { name: \"purple\", color: \"#9C27B0\" },\n  //     { name: \"deeppurple\", color: \"#673AB7\" },\n  //     { name: \"indigo\", color: \"#3F51B5\" },\n  //     { name: \"blue\", color: \"#2196F3\" },\n  //     { name: \"lightblue\", color: \"#03A9F4\" },\n  //     { name: \"cyan\", color: \"#00BCD4\" },\n  //     { name: \"teal\", color: \"#009688\" },\n  //     { name: \"green\", color: \"#4CAF50\" },\n  //     { name: \"lightgreen\", color: \"#8BC34A\" },\n  //     { name: \"lime\", color: \"#CDDC39\" },\n  //     { name: \"yellow\", color: \"#FFEB3B\" },\n  //     { name: \"amber\", color: \"#FFC107\" },\n  //     { name: \"orange\", color: \"#FF9800\" },\n  //     { name: \"deeporange\", color: \"#FF5722\" },\n  //     { name: \"brown\", color: \"#795548\" },\n  //     { name: \"grey\", color: \"#9E9E9E\" },\n  //     { name: \"bluegrey\", color: \"#607D8B\" },\n  //     { name: \"Asbestos\", color: \"#7f8c8d\" }\n  //   ]\n  // }\n  let colorShade;\n  let shadeObj = [];\n  let shades = [];\n  let shadeInfo; // console.log(currentPalette);\n\n  const levels = [50, 100, 200, 300, 400, 500, 600, 700, 800, 900];\n\n  for (let i = 0; i < currentPalette.colors.length; i++) {\n    const baseColor = currentPalette.colors[i].color;\n    const darkestShade = chroma(baseColor).darken(4);\n    const brightestShade = chroma(baseColor).brighten(2.6);\n    colorShade = chroma.scale([brightestShade, baseColor, darkestShade]).colors(10);\n\n    for (let j = 0; j < colorShade.length; j++) {\n      shadeInfo = {\n        name: currentPalette.colors[i].name + \" \" + levels[j],\n        hex: colorShade[j],\n        rgb: chroma(colorShade[j]).css(),\n        rgba: chroma(colorShade[j]).alpha(0.9).css()\n      };\n      shades.push(shadeInfo); // console.log(shades)\n    }\n\n    shadeObj.push(colorShade);\n  } // console.log(shadeObj)\n\n\n  console.log(shades[20]); // for(let i = 0; i < levels.length; i++){\n\n  for (let j = 0; j < shades.length; j + 10) {\n    let shade = shades[j];\n    console.log(shade);\n  } // }\n  // return currentPalette;\n\n};\n\nexport { fullColorHex, colorShades, getPaletteShades };","map":{"version":3,"sources":["C:\\Users\\todor\\Documents\\4-Web Development\\1-Web Development Courses\\3-REACT\\25-Color Palette\\color-palette\\src\\helpers.js"],"names":["chroma","rgbToHex","rgb","hex","Number","toString","length","fullColorHex","r","g","b","red","green","blue","colorShades","max","Math","step","console","log","getPaletteShades","currentPalette","colorShade","shadeObj","shades","shadeInfo","levels","i","colors","baseColor","color","darkestShade","darken","brightestShade","brighten","scale","j","name","css","rgba","alpha","push","shade"],"mappings":"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","sourcesContent":["import chroma from 'chroma-js'\r\n\r\n\r\nvar rgbToHex = function (rgb) { \r\n    var hex = Number(rgb).toString(16);\r\n    if (hex.length < 2) {\r\n         hex = \"0\" + hex;\r\n    }\r\n    return hex;\r\n  };\r\n\r\n  var fullColorHex = function(r,g,b) {   \r\n    var red = rgbToHex(r);\r\n    var green = rgbToHex(g);\r\n    var blue = rgbToHex(b);\r\n    return red+green+blue;\r\n  };\r\n\r\n  var colorShades = function(r, g, b){\r\n    var max = Math.max(r,Math.max(g,b));\r\n    var step = 255 / (max * 10);\r\n    var red = (r * step, g * step, b * step)\r\n    var green =  (r * step * 2, g * step * 2, b * step * 2)\r\n    var blue = (r * step * 3, g * step * 3, b * step * 3)\r\n    //   var red = rgbToHex(Math.round(11*r/10))\r\n    //   var green = rgbToHex(Math.round(11*g/10))\r\n    //   var blue = rgbToHex(Math.round(11*b/10))\r\n    console.log(red, green,blue)\r\n      return red+green+blue;\r\n  }\r\n\r\n  \r\n\r\n// for(let i = 0; i < currentPalette.length; i++){\r\n//   console.log(currentPalette[i].color)\r\n// }\r\nvar getPaletteShades = function (currentPalette){\r\n  // const currentPalette: {\r\n  //   paletteName: \"Material UI Colors\",\r\n  //   id: \"material-ui-colors\",\r\n  //   emoji: \"ðŸŽ¨\",\r\n  //   colors: [\r\n  //     { name: \"red\", color: \"#F44336\" },\r\n  //     { name: \"pink\", color: \"#E91E63\" },\r\n  //     { name: \"purple\", color: \"#9C27B0\" },\r\n  //     { name: \"deeppurple\", color: \"#673AB7\" },\r\n  //     { name: \"indigo\", color: \"#3F51B5\" },\r\n  //     { name: \"blue\", color: \"#2196F3\" },\r\n  //     { name: \"lightblue\", color: \"#03A9F4\" },\r\n  //     { name: \"cyan\", color: \"#00BCD4\" },\r\n  //     { name: \"teal\", color: \"#009688\" },\r\n  //     { name: \"green\", color: \"#4CAF50\" },\r\n  //     { name: \"lightgreen\", color: \"#8BC34A\" },\r\n  //     { name: \"lime\", color: \"#CDDC39\" },\r\n  //     { name: \"yellow\", color: \"#FFEB3B\" },\r\n  //     { name: \"amber\", color: \"#FFC107\" },\r\n  //     { name: \"orange\", color: \"#FF9800\" },\r\n  //     { name: \"deeporange\", color: \"#FF5722\" },\r\n  //     { name: \"brown\", color: \"#795548\" },\r\n  //     { name: \"grey\", color: \"#9E9E9E\" },\r\n  //     { name: \"bluegrey\", color: \"#607D8B\" },\r\n  //     { name: \"Asbestos\", color: \"#7f8c8d\" }\r\n    \r\n  //   ]\r\n  // }\r\n\r\n    let colorShade;\r\n    let shadeObj =[];\r\n    let shades = [];\r\n    let shadeInfo;\r\n    // console.log(currentPalette);\r\n    const levels = [50, 100, 200, 300, 400, 500, 600, 700, 800, 900];\r\n    for(let i = 0; i < currentPalette.colors.length; i++){\r\n      const baseColor = currentPalette.colors[i].color;\r\n      const darkestShade = chroma(baseColor).darken(4);\r\n      const brightestShade = chroma(baseColor).brighten(2.6)\r\n      colorShade = chroma.scale([brightestShade, baseColor, darkestShade]).colors(10);\r\n      \r\n      for(let j=0; j < colorShade.length; j++){\r\n        shadeInfo = {\r\n          name: currentPalette.colors[i].name + \" \" + levels[j],\r\n          hex: colorShade[j],\r\n          rgb: chroma(colorShade[j]).css(),\r\n          rgba: chroma(colorShade[j]).alpha(0.9).css(),\r\n        }\r\n        shades.push(shadeInfo);\r\n        // console.log(shades)\r\n      }\r\n      shadeObj.push(colorShade);\r\n    } \r\n    // console.log(shadeObj)\r\n      \r\n    console.log(shades[20]);\r\n    // for(let i = 0; i < levels.length; i++){\r\n      for(let j = 0; j < shades.length; j+10){\r\n        let shade = shades[j]\r\n         console.log(shade)\r\n      }\r\n\r\n    // }\r\n\r\n   \r\n    // return currentPalette;\r\n}\r\n\r\n\r\n  export {fullColorHex, colorShades, getPaletteShades}"]},"metadata":{},"sourceType":"module"}