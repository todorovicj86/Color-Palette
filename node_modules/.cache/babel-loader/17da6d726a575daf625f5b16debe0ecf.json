{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\todor\\\\Documents\\\\4-Web Development\\\\1-Web Development Courses\\\\3-REACT\\\\25-Color Palette\\\\color-palette\\\\src\\\\FormNavbar.js\";\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { withStyles } from '@material-ui/core/styles';\nimport classNames from 'classnames';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@icons/material/MenuIcon';\nimport Button from '@material-ui/core/Button';\nimport ModalDialog from './ModalDialog';\nconst drawerWidth = 400;\n\nconst styles = theme => ({\n  root: {\n    display: 'flex'\n  },\n  appBar: {\n    transition: theme.transitions.create(['margin', 'width'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen\n    }),\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\"\n  },\n  appBarShift: {\n    width: \"calc(100% - \".concat(drawerWidth, \"px)\"),\n    marginLeft: drawerWidth,\n    transition: theme.transitions.create(['margin', 'width'], {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen\n    })\n  },\n  menuButton: {\n    marginRight: theme.spacing(2)\n  },\n  hide: {\n    display: 'none'\n  },\n  navBtn: {\n    padding: \"0 10px\",\n    \"& button\": {\n      marginLeft: \"10px\"\n    }\n  },\n  goBackLink: {\n    \"&:hover\": {\n      textDecoration: \"none\"\n    }\n  }\n});\n\nclass FormNavbar extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      openModal: false // paletteName: \"\",\n\n    };\n    this.cancelSave = this.cancelSave.bind(this);\n    this.openModal = this.openModal.bind(this); // this.handleChange = this.handleChange.bind(this)\n  }\n\n  openModal() {\n    this.setState({\n      openModal: true\n    });\n  }\n\n  cancelSave() {\n    this.setState({\n      openModal: false\n    });\n  } // handleChange(evt){\n  //     this.setState({\n  //       [evt.target.name]: evt.target.value,\n  //     })\n  // }\n\n\n  render() {\n    const _this$props = this.props,\n          classes = _this$props.classes,\n          open = _this$props.open,\n          palettes = _this$props.palettes;\n    const _this$state = this.state,\n          openModal = _this$state.openModal,\n          paletteName = _this$state.paletteName;\n    return React.createElement(\"div\", {\n      className: classes.root,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, React.createElement(CssBaseline, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }), React.createElement(AppBar, {\n      color: \"default\",\n      position: \"fixed\",\n      className: classNames(classes.appBar, {\n        [classes.appBarShift]: open\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, React.createElement(Toolbar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, React.createElement(IconButton, {\n      color: \"inherit\",\n      \"aria-label\": \"open drawer\",\n      onClick: this.props.handleDrawerOpen,\n      edge: \"start\",\n      className: classNames(classes.menuButton, open && classes.hide),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, React.createElement(MenuIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    })), React.createElement(Typography, {\n      variant: \"h6\",\n      noWrap: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, \"Create A Palette\")), React.createElement(\"div\", {\n      className: classes.navBtn,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, React.createElement(Link, {\n      className: classes.goBackLink,\n      to: \"/\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"contained\",\n      color: \"secondary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, \"Go Back\")), React.createElement(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: this.openModal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, \"Save Palette\"))), React.createElement(ModalDialog // paletteName={paletteName}\n    , {\n      openModal: openModal // handleChange={this.handleChange}\n      ,\n      cancelSave: this.cancelSave,\n      savePalette: this.props.savePalette,\n      palettes: palettes,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default withStyles(styles, {\n  withTheme: true\n})(FormNavbar);","map":{"version":3,"sources":["C:\\Users\\todor\\Documents\\4-Web Development\\1-Web Development Courses\\3-REACT\\25-Color Palette\\color-palette\\src\\FormNavbar.js"],"names":["React","Component","Link","withStyles","classNames","CssBaseline","AppBar","Toolbar","Typography","IconButton","MenuIcon","Button","ModalDialog","drawerWidth","styles","theme","root","display","appBar","transition","transitions","create","easing","sharp","duration","leavingScreen","flexDirection","justifyContent","alignItems","appBarShift","width","marginLeft","easeOut","enteringScreen","menuButton","marginRight","spacing","hide","navBtn","padding","goBackLink","textDecoration","FormNavbar","constructor","props","state","openModal","cancelSave","bind","setState","render","classes","open","palettes","paletteName","handleDrawerOpen","savePalette","withTheme"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport {Link} from 'react-router-dom'\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport classNames from 'classnames'\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@icons/material/MenuIcon';\r\nimport Button from '@material-ui/core/Button';\r\nimport ModalDialog from './ModalDialog'\r\n\r\nconst drawerWidth = 400;\r\nconst styles = theme => ({\r\n    root: {\r\n        display: 'flex',\r\n    },\r\n    appBar: {\r\n        transition: theme.transitions.create(['margin', 'width'], {\r\n          easing: theme.transitions.easing.sharp,\r\n          duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n        flexDirection: \"row\",\r\n        justifyContent: \"space-between\",\r\n        alignItems:\"center\"\r\n      },\r\n      appBarShift: {\r\n        width: `calc(100% - ${drawerWidth}px)`,\r\n        marginLeft: drawerWidth,\r\n        transition: theme.transitions.create(['margin', 'width'], {\r\n          easing: theme.transitions.easing.easeOut,\r\n          duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n      },\r\n      menuButton: {\r\n        marginRight: theme.spacing(2),\r\n      },\r\n      hide: {\r\n        display: 'none',\r\n      },\r\n      navBtn: {\r\n          padding: \"0 10px\",\r\n          \"& button\": {\r\n          marginLeft: \"10px\"\r\n        }\r\n\r\n      },\r\n     \r\n      goBackLink: {\r\n        \"&:hover\":{\r\n          textDecoration: \"none\"\r\n        }\r\n    \r\n      }\r\n})\r\n\r\nclass FormNavbar extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            openModal: false,\r\n            // paletteName: \"\",\r\n         \r\n        }\r\n        this.cancelSave = this.cancelSave.bind(this)\r\n        this.openModal = this.openModal.bind(this)\r\n        // this.handleChange = this.handleChange.bind(this)\r\n        \r\n    }\r\n\r\n  \r\n\r\n    openModal(){\r\n        this.setState({\r\n          openModal: true,\r\n        })\r\n    }\r\n  \r\n    cancelSave(){\r\n        this.setState({\r\n          openModal: false,\r\n        })\r\n    }\r\n\r\n    // handleChange(evt){\r\n    //     this.setState({\r\n    //       [evt.target.name]: evt.target.value,\r\n    //     })\r\n    // }\r\n\r\n\r\n    render(){\r\n        const {classes, open, palettes} = this.props;\r\n        const { openModal, paletteName } = this.state;\r\n   \r\n        return(\r\n            <div className={classes.root}>\r\n                <CssBaseline />\r\n                <AppBar\r\n                  color=\"default\"\r\n                    position=\"fixed\"\r\n                    className={classNames(classes.appBar, {\r\n                        [classes.appBarShift]: open,\r\n                    })}\r\n                >\r\n                    <Toolbar>\r\n                        <IconButton\r\n                            color=\"inherit\"\r\n                            aria-label=\"open drawer\"\r\n                            onClick={this.props.handleDrawerOpen}\r\n                            edge=\"start\"\r\n                            className={classNames(classes.menuButton, open && classes.hide)}\r\n                        >\r\n                            <MenuIcon />\r\n                        </IconButton>\r\n                        <Typography variant=\"h6\" noWrap>\r\n                            Create A Palette\r\n                        </Typography>\r\n                        \r\n                    </Toolbar>\r\n                    <div className={classes.navBtn}>\r\n                        <Link className={classes.goBackLink} to = \"/\">\r\n                            <Button variant=\"contained\" color=\"secondary\">\r\n                                Go Back\r\n                            </Button>\r\n                        </Link>\r\n                        \r\n                        <Button variant=\"contained\" color=\"primary\" onClick={this.openModal}>\r\n                            Save Palette\r\n                        </Button>\r\n                    </div>\r\n                 \r\n                </AppBar>\r\n\r\n                {/* <Dialog id=\"paletteNameModal\" open={openModal} onClose={this.handleClose} aria-labelledby=\"form-dialog-title\">\r\n                  <DialogTitle id=\"form-dialog-title\"> Add Palette Name</DialogTitle>\r\n\r\n                  <DialogContent>\r\n                      <DialogContentText>\r\n                          Please Add Palette Name\r\n                      </DialogContentText>\r\n\r\n                    <ValidatorForm onSubmit={() => this.props.savePalette(paletteName)}>\r\n                        <TextValidator \r\n                            value={paletteName}\r\n                            onChange={this.handleChange}\r\n                            name=\"paletteName\"\r\n                            validators={[\r\n                                'required', \r\n                                'isPaletteNameUnique',\r\n                              ]}\r\n                            errorMessages={[\r\n                              'This field is required. Enter a palette name!', \r\n                              'Palette name must be unique!', \r\n                            ]}\r\n\r\n                            />\r\n                          <DialogActions>\r\n                            <Button onClick={this.cancelSave} color=\"primary\">\r\n                                Cancel\r\n                            </Button>\r\n                            <Button type=\"submit\" color=\"primary\">\r\n                                Save\r\n                            </Button>\r\n                        </DialogActions> */}\r\n                        {/* <Dialog open={openEmoji}>\r\n                            <Picker  onSelect={this.addEmoji} />\r\n                        </Dialog> */}\r\n{/* \r\n                    </ValidatorForm>\r\n             \r\n                  </DialogContent>\r\n                       \r\n                </Dialog> */}\r\n                <ModalDialog \r\n                  // paletteName={paletteName}\r\n                  openModal={openModal}\r\n                  // handleChange={this.handleChange}\r\n                  cancelSave={this.cancelSave}\r\n                  savePalette = {this.props.savePalette}\r\n                  palettes={palettes}\r\n                />\r\n\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default withStyles(styles, {withTheme: true})(FormNavbar);"]},"metadata":{},"sourceType":"module"}