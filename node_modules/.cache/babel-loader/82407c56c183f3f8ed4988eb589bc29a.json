{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\todor\\\\Documents\\\\4-Web Development\\\\1-Web Development Courses\\\\3-REACT\\\\25-Color Palette\\\\color-palette\\\\src\\\\ColorPicker.js\";\nimport React, { Component } from 'react';\nimport { ChromePicker } from 'react-color';\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\nimport Button from '@material-ui/core/Button';\n\nclass ColorPicker extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentColor: \"teal\",\n      newColorName: \"\"\n    };\n    this.handleColorPickerChange = this.handleColorPickerChange.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.addNewColor = this.addNewColor.bind(this);\n  }\n\n  componentDidMount() {\n    // validate if the color name is unique\n    ValidatorForm.addValidationRule('isColorNameUnique', value => this.props.colors.every(({\n      name\n    }) => name.toLowerCase() !== value.toLowerCase())); //  validate if the color is unique\n\n    ValidatorForm.addValidationRule('isColorUnique', value => this.props.colors.every(({\n      color\n    }) => color !== this.state.currentColor));\n  }\n\n  handleColorPickerChange(newColor) {\n    this.setState({\n      currentColor: newColor.hex\n    });\n  }\n\n  handleChange(evt) {\n    this.setState({\n      [evt.target.name]: evt.target.value\n    });\n  }\n\n  addNewColor() {\n    const newColorObj = {\n      name: this.state.newColorName,\n      color: this.state.currentColor\n    };\n    this.props.addNewColor(newColorObj);\n    this.setState({\n      newColorName: \"\"\n    });\n  }\n\n  render() {\n    const paletteIsFull = this.props.paletteIsFull;\n    const _this$state = this.state,\n          currentColor = _this$state.currentColor,\n          newColorName = _this$state.newColorName;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, React.createElement(ChromePicker, {\n      color: currentColor,\n      onChangeComplete: this.handleColorPickerChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }), React.createElement(ValidatorForm, {\n      onSubmit: this.addNewColor,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, React.createElement(TextValidator, {\n      value: newColorName,\n      onChange: this.handleChange,\n      name: \"newColorName\",\n      validators: ['required', 'isColorNameUnique', 'isColorUnique'],\n      errorMessages: ['This field is required. Enter a color name!', 'Color name must be unique!', 'Color already exists!'],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }), paletteIsFull ? React.createElement(Button, {\n      type: \"submit\",\n      variant: \"contained\",\n      disabled: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, \"Palette Full\") : React.createElement(Button, {\n      type: \"submit\",\n      variant: \"contained\",\n      style: {\n        backgroundColor: currentColor\n      },\n      disabled: paletteIsFull,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, \"Add Color\")));\n  }\n\n}\n\nexport default ColorPicker;","map":{"version":3,"sources":["C:\\Users\\todor\\Documents\\4-Web Development\\1-Web Development Courses\\3-REACT\\25-Color Palette\\color-palette\\src\\ColorPicker.js"],"names":["React","Component","ChromePicker","ValidatorForm","TextValidator","Button","ColorPicker","constructor","props","state","currentColor","newColorName","handleColorPickerChange","bind","handleChange","addNewColor","componentDidMount","addValidationRule","value","colors","every","name","toLowerCase","color","newColor","setState","hex","evt","target","newColorObj","render","paletteIsFull","backgroundColor"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport {ChromePicker} from 'react-color'\r\nimport { ValidatorForm, TextValidator} from 'react-material-ui-form-validator';\r\nimport Button from '@material-ui/core/Button';\r\n\r\n\r\nclass ColorPicker extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            currentColor: \"teal\",\r\n            newColorName: \"\",\r\n        }\r\n        this.handleColorPickerChange = this.handleColorPickerChange.bind(this)\r\n        this.handleChange = this.handleChange.bind(this)\r\n        this.addNewColor = this.addNewColor.bind(this)\r\n    }\r\n\r\n    \r\n\r\n    componentDidMount() {\r\n        // validate if the color name is unique\r\n        ValidatorForm.addValidationRule('isColorNameUnique', value => \r\n          this.props.colors.every(({ name }) => name.toLowerCase() !== value.toLowerCase())\r\n        );\r\n  \r\n      //  validate if the color is unique\r\n        ValidatorForm.addValidationRule('isColorUnique', value => \r\n          this.props.colors.every(({ color }) => color !== this.state.currentColor)\r\n        );\r\n  \r\n      }\r\n\r\n\r\n    handleColorPickerChange(newColor){\r\n        this.setState({\r\n            currentColor: newColor.hex,\r\n        })\r\n    }\r\n\r\n    handleChange(evt){\r\n        this.setState({\r\n          [evt.target.name]: evt.target.value,\r\n        })\r\n    }\r\n\r\n    addNewColor(){\r\n        const newColorObj = {\r\n            name: this.state.newColorName,\r\n            color: this.state.currentColor,\r\n        }\r\n     \r\n      this.props.addNewColor(newColorObj)\r\n      this.setState({\r\n        newColorName: \"\",\r\n      })\r\n    }\r\n\r\n       \r\n    render(){\r\n        const { paletteIsFull } = this.props\r\n        const {currentColor, newColorName} = this.state;\r\n\r\n        return(\r\n            <div>\r\n             <ChromePicker \r\n                    color={currentColor} \r\n                    onChangeComplete = {this.handleColorPickerChange}\r\n                  />\r\n\r\n\r\n                  <ValidatorForm \r\n                    onSubmit={this.addNewColor}\r\n                  \r\n                  >\r\n                    <TextValidator \r\n                      value={newColorName}\r\n                      onChange={this.handleChange}\r\n                      name=\"newColorName\"\r\n                      validators={[\r\n                          'required', \r\n                          'isColorNameUnique', \r\n                          'isColorUnique'\r\n                          ]}\r\n                      errorMessages={[\r\n                          'This field is required. Enter a color name!', \r\n                          'Color name must be unique!', \r\n                          'Color already exists!'\r\n                          ]}\r\n                    />\r\n                  { paletteIsFull ? \r\n                      <Button \r\n                        type=\"submit\"\r\n                        variant=\"contained\" \r\n                        disabled\r\n                      >\r\n                        Palette Full\r\n                      </Button>\r\n                  :\r\n                      <Button \r\n                        type=\"submit\"\r\n                        variant=\"contained\" \r\n                        style={{backgroundColor: currentColor}}\r\n                        disabled ={paletteIsFull}\r\n                      >\r\n                        Add Color\r\n                    </Button>\r\n                  }    \r\n                                    \r\n                  </ValidatorForm>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ColorPicker;"]},"metadata":{},"sourceType":"module"}