{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\todor\\\\Documents\\\\4-Web Development\\\\1-Web Development Courses\\\\3-REACT\\\\25-Color Palette\\\\color-palette\\\\src\\\\MakeNewPalette.js\";\nimport React, { Component } from 'react';\nimport { arrayMove } from 'react-sortable-hoc';\nimport classNames from 'classnames';\nimport { withStyles } from '@material-ui/core/styles';\nimport Drawer from '@material-ui/core/Drawer';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport ChevronLeftIcon from '@icons/material/ChevronLeftIcon';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport DraggableColorBoxList from './DraggableColorBoxList';\nimport FormNavbar from './FormNavbar';\nimport ColorPicker from './ColorPicker';\nimport styles from './styles/MakeNewPaletteStyles';\nimport seedColors from './seedColors';\n\nclass MakeNewPalette extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleDrawerOpen = () => {\n      this.setState({\n        open: true\n      });\n    };\n\n    this.handleDrawerClose = () => {\n      this.setState({\n        open: false\n      });\n    };\n\n    this.onSortEnd = ({\n      oldIndex,\n      newIndex\n    }) => {\n      this.setState(({\n        colors\n      }) => ({\n        colors: arrayMove(colors, oldIndex, newIndex)\n      }));\n    };\n\n    this.state = {\n      open: true,\n      colors: seedColors[0].colors,\n      id: \"\",\n      emoji: \"\",\n      openEmoji: false\n    };\n    this.addNewColor = this.addNewColor.bind(this);\n    this.savePalette = this.savePalette.bind(this);\n    this.deleteBox = this.deleteBox.bind(this);\n    this.clearPalette = this.clearPalette.bind(this);\n    this.chooseRandomColor = this.chooseRandomColor.bind(this);\n  }\n\n  addNewColor(newColorObj) {\n    this.setState({\n      colors: [...this.state.colors, newColorObj]\n    });\n  }\n\n  savePalette(newPaletteName, newEmoji) {\n    const colors = this.state.colors;\n    let id = newPaletteName.toLocaleLowerCase().split(' ').join('-');\n    const newPalette = {\n      paletteName: newPaletteName,\n      id: id,\n      emoji: newEmoji,\n      colors: colors\n    };\n    this.props.savePalette(newPalette);\n    this.props.history.push(\"/\");\n  }\n\n  deleteBox(name) {\n    const oldColorsArray = [...this.state.colors];\n    const updatedColorsArray = oldColorsArray.filter(box => box.name !== name);\n    this.setState({\n      colors: updatedColorsArray\n    });\n  }\n\n  clearPalette() {\n    this.setState({\n      colors: []\n    });\n  }\n\n  chooseRandomColor() {\n    const colors = this.props.palettes.map(palette => palette.colors).flat();\n    let random = Math.floor(Math.random() * colors.length);\n    let newRandomColor = colors[random];\n    let colorsSet = new Set(this.state.colors.map(color => color.color));\n    let duplicate = colorsSet.has(newRandomColor.color);\n    console.log(duplicate, colorsSet);\n\n    while (duplicate) {\n      random = Math.floor(Math.random() * colors.length);\n      newRandomColor = colors[random];\n      duplicate = colorsSet.has(newRandomColor.color);\n      console.log(newRandomColor);\n    }\n\n    colorsSet.add(newRandomColor);\n    this.setState({\n      colors: [...this.state.colors, newRandomColor]\n    }); // if(!colorsSet.has(newRandomColor.color)){\n    //   this.setState({\n    //     colors: [...this.state.colors, newRandomColor],\n    //   })\n    //   colorsSet.add(newRandomColor)\n    // } else if(colorsSet.has(newRandomColor.color)){\n    //   alert(newRandomColor.name + \" already exists! Please choose again!\")\n    // }\n  }\n\n  render() {\n    const _this$props = this.props,\n          classes = _this$props.classes,\n          maxColors = _this$props.maxColors,\n          palettes = _this$props.palettes;\n    const _this$state = this.state,\n          open = _this$state.open,\n          colors = _this$state.colors;\n    const paletteIsFull = colors.length >= maxColors;\n    return React.createElement(\"div\", {\n      className: classes.root,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, React.createElement(FormNavbar, {\n      open: open,\n      handleDrawerOpen: this.handleDrawerOpen,\n      savePalette: this.savePalette,\n      palettes: palettes,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }), React.createElement(Drawer, {\n      className: classes.drawer,\n      variant: \"persistent\",\n      anchor: \"left\",\n      open: open,\n      classes: {\n        paper: classes.drawerPaper\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: classes.drawerHeader,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, React.createElement(IconButton, {\n      onClick: this.handleDrawerClose,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, React.createElement(ChevronLeftIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }))), React.createElement(Divider, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: classes.container,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, React.createElement(Typography, {\n      variant: \"h4\",\n      noWrap: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, \"Design Your Palette\"), React.createElement(\"div\", {\n      className: classes.buttons,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: this.chooseRandomColor,\n      disabled: paletteIsFull,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }, \"Random Color\"), React.createElement(Button, {\n      variant: \"contained\",\n      color: \"secondary\",\n      onClick: this.clearPalette,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }, \"Clear Palette\")), React.createElement(ColorPicker, {\n      paletteIsFull: paletteIsFull,\n      addNewColor: this.addNewColor,\n      palettes: palettes,\n      colors: colors,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }))), React.createElement(\"main\", {\n      className: classNames(classes.content, {\n        [classes.contentShift]: open\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: classes.drawerHeader,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }), React.createElement(DraggableColorBoxList, {\n      colors: colors,\n      deleteBox: this.deleteBox,\n      axis: \"xy\",\n      onSortEnd: this.onSortEnd,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    })));\n  }\n\n}\n\nMakeNewPalette.defaultProps = {\n  maxColors: 20\n};\nexport default withStyles(styles, {\n  withTheme: true\n})(MakeNewPalette);","map":{"version":3,"sources":["C:\\Users\\todor\\Documents\\4-Web Development\\1-Web Development Courses\\3-REACT\\25-Color Palette\\color-palette\\src\\MakeNewPalette.js"],"names":["React","Component","arrayMove","classNames","withStyles","Drawer","Divider","IconButton","ChevronLeftIcon","Button","Typography","DraggableColorBoxList","FormNavbar","ColorPicker","styles","seedColors","MakeNewPalette","constructor","props","handleDrawerOpen","setState","open","handleDrawerClose","onSortEnd","oldIndex","newIndex","colors","state","id","emoji","openEmoji","addNewColor","bind","savePalette","deleteBox","clearPalette","chooseRandomColor","newColorObj","newPaletteName","newEmoji","toLocaleLowerCase","split","join","newPalette","paletteName","history","push","name","oldColorsArray","updatedColorsArray","filter","box","palettes","map","palette","flat","random","Math","floor","length","newRandomColor","colorsSet","Set","color","duplicate","has","console","log","add","render","classes","maxColors","paletteIsFull","root","drawer","paper","drawerPaper","drawerHeader","container","buttons","content","contentShift","defaultProps","withTheme"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport {arrayMove} from 'react-sortable-hoc';\r\n\r\nimport classNames from 'classnames'\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport ChevronLeftIcon from '@icons/material/ChevronLeftIcon';\r\n\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport DraggableColorBoxList from './DraggableColorBoxList'\r\nimport FormNavbar from './FormNavbar'\r\nimport ColorPicker from './ColorPicker'\r\nimport styles from './styles/MakeNewPaletteStyles'\r\nimport seedColors from './seedColors'\r\n\r\n\r\nclass MakeNewPalette extends Component {\r\n  static defaultProps = {\r\n    maxColors: 20,\r\n  }\r\n  constructor(props){\r\n      super(props);\r\n      this.state = {\r\n        open: true,\r\n        colors: seedColors[0].colors,\r\n        id:\"\",\r\n        emoji:\"\",\r\n        openEmoji: false,\r\n      }\r\n     \r\n    this.addNewColor = this.addNewColor.bind(this)\r\n    this.savePalette = this.savePalette.bind(this)\r\n    this.deleteBox = this.deleteBox.bind(this)\r\n    this.clearPalette = this.clearPalette.bind(this)\r\n    this.chooseRandomColor = this.chooseRandomColor.bind(this);\r\n  }\r\n\r\n   \r\n  handleDrawerOpen = () => {\r\n    this.setState({open: true});\r\n  };\r\n\r\n  handleDrawerClose = () => {\r\n    this.setState({open: false});\r\n  };\r\n\r\n\r\n  addNewColor(newColorObj){\r\n    this.setState({\r\n      colors: [...this.state.colors, newColorObj],\r\n    });\r\n  }\r\n\r\n\r\n  savePalette(newPaletteName, newEmoji){\r\n    const{colors} = this.state;\r\n    let id = newPaletteName.toLocaleLowerCase().split(' ').join('-');\r\n    const newPalette = {\r\n      paletteName: newPaletteName,\r\n      id: id,\r\n      emoji: newEmoji,\r\n      colors: colors,\r\n    }\r\n\r\n    this.props.savePalette(newPalette)\r\n    this.props.history.push(\"/\");\r\n    \r\n  }\r\n\r\n  deleteBox(name){\r\n    const oldColorsArray = [...this.state.colors]\r\n    const updatedColorsArray = oldColorsArray.filter(box => box.name !== name);\r\n\r\n    this.setState({\r\n      colors: updatedColorsArray,\r\n    })\r\n  }\r\n\r\n  onSortEnd = ({oldIndex, newIndex}) => {\r\n    this.setState(({colors}) => ({\r\n      colors: arrayMove(colors, oldIndex, newIndex),\r\n    }));\r\n  };\r\n\r\n  clearPalette(){\r\n    this.setState({\r\n      colors: [],\r\n    })\r\n  }\r\n\r\n  chooseRandomColor(){\r\n    const colors = this.props.palettes.map(palette => palette.colors).flat();\r\n    let random = Math.floor(Math.random() * colors.length)\r\n    let newRandomColor = colors[random]\r\n    let colorsSet = new Set(this.state.colors.map(color => color.color))\r\n    let duplicate = colorsSet.has(newRandomColor.color);\r\n    console.log(duplicate, colorsSet)\r\n\r\n    while(duplicate){\r\n      random = Math.floor(Math.random() * colors.length)\r\n      newRandomColor = colors[random]\r\n      duplicate = colorsSet.has(newRandomColor.color)\r\n      console.log(newRandomColor)\r\n    }\r\n    colorsSet.add(newRandomColor)\r\n    this.setState({\r\n          colors: [...this.state.colors, newRandomColor],\r\n    })\r\n    // if(!colorsSet.has(newRandomColor.color)){\r\n    //   this.setState({\r\n    //     colors: [...this.state.colors, newRandomColor],\r\n    //   })\r\n    //   colorsSet.add(newRandomColor)\r\n\r\n    // } else if(colorsSet.has(newRandomColor.color)){\r\n    //   alert(newRandomColor.name + \" already exists! Please choose again!\")\r\n    // }\r\n      \r\n  }\r\n\r\n    render(){\r\n        const {classes, maxColors, palettes} = this.props;\r\n        const {open, colors} = this.state;\r\n        const paletteIsFull = colors.length >= maxColors;\r\n\r\n        return(\r\n            <div className={classes.root} >\r\n                \r\n                <FormNavbar \r\n                  open = {open}\r\n                  handleDrawerOpen = {this.handleDrawerOpen}\r\n                  savePalette = {this.savePalette}\r\n                  palettes = {palettes}\r\n                />\r\n               \r\n                <Drawer\r\n                  className={classes.drawer}\r\n                  variant=\"persistent\"\r\n                  anchor=\"left\"\r\n                  open={open}\r\n                  classes={{\r\n                      paper: classes.drawerPaper,\r\n                  }}\r\n                >\r\n                  <div className={classes.drawerHeader}>\r\n                      <IconButton onClick={this.handleDrawerClose}>\r\n                            <ChevronLeftIcon /> \r\n                      </IconButton>\r\n                  </div>\r\n\r\n                  <Divider />\r\n                  <div className={classes.container}>\r\n\r\n                    <Typography variant=\"h4\" noWrap>\r\n                        Design Your Palette\r\n                    </Typography>\r\n\r\n                    <div className={classes.buttons}>\r\n                      <Button \r\n                          variant=\"contained\" \r\n                          color=\"primary\" \r\n                          onClick={this.chooseRandomColor}\r\n                          disabled ={paletteIsFull}\r\n                        >\r\n                          Random Color\r\n                      </Button>\r\n                      <Button variant=\"contained\" color=\"secondary\" onClick={this.clearPalette}>\r\n                          Clear Palette\r\n                      </Button>\r\n                    </div>\r\n\r\n                    <ColorPicker \r\n                      paletteIsFull = {paletteIsFull}\r\n                      addNewColor = {this.addNewColor}\r\n                      palettes = {palettes}\r\n                      colors = {colors}\r\n                    />\r\n                  </div>\r\n                </Drawer>\r\n\r\n                <main className={classNames(classes.content, {\r\n                        [classes.contentShift]: open,\r\n                    })}\r\n                >\r\n                <div className={classes.drawerHeader} />\r\n                      \r\n                <DraggableColorBoxList \r\n                  colors={colors} \r\n                  deleteBox={this.deleteBox} \r\n                  axis=\"xy\"\r\n                  onSortEnd={this.onSortEnd}\r\n                />                                \r\n                </main>\r\n          </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withStyles(styles, {withTheme: true}) (MakeNewPalette);\r\n"]},"metadata":{},"sourceType":"module"}