{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\todor\\\\Documents\\\\4-Web Development\\\\1-Web Development Courses\\\\3-REACT\\\\25-Color Palette\\\\color-palette\\\\src\\\\ColorPicker.js\";\nimport React, { Component } from 'react';\nimport { ChromePicker } from 'react-color';\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\nimport { arrayMove } from 'react-sortable-hoc';\nimport classNames from 'classnames';\nimport { withStyles } from '@material-ui/core/styles';\nimport Drawer from '@material-ui/core/Drawer';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport ChevronLeftIcon from '@icons/material/ChevronLeftIcon';\nimport Button from '@material-ui/core/Button';\nimport DraggableColorBoxList from './DraggableColorBoxList';\nimport Typography from '@material-ui/core/Typography';\nimport chroma from 'chroma-js';\n\nclass ColorPicker extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentColor: \"teal\",\n      newColorName: \"\"\n    };\n  }\n\n  componentDidMount() {\n    // validate if the color name is unique\n    ValidatorForm.addValidationRule('isColorNameUnique', value => this.state.colors.every(({\n      name\n    }) => name.toLowerCase() !== value.toLowerCase())); //  validate if the color is unique\n\n    ValidatorForm.addValidationRule('isColorUnique', value => this.state.colors.every(({\n      color\n    }) => color !== this.state.currentColor)); // validate if the palette name is unique\n\n    ValidatorForm.addValidationRule('isPaletteNameUnique', value => this.props.palettes.every(({\n      paletteName\n    }) => paletteName.toLocaleLowerCase() !== value.toLocaleLowerCase()));\n  }\n\n  render() {\n    const _this$props = this.props,\n          currentColor = _this$props.currentColor,\n          newColorName = _this$props.newColorName,\n          paletteIsFull = _this$props.paletteIsFull;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, React.createElement(ChromePicker, {\n      color: currentColor,\n      onChangeComplete: this.props.handleColorPickerChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }), React.createElement(ValidatorForm, {\n      onSubmit: this.props.addNewColor,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, React.createElement(TextValidator, {\n      value: newColorName,\n      onChange: this.props.handleChange,\n      name: \"newColorName\",\n      validators: ['required', 'isColorNameUnique', 'isColorUnique'],\n      errorMessages: ['This field is required. Enter a color name!', 'Color name must be unique!', 'Color already exists!'],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }), paletteIsFull ? React.createElement(Button, {\n      type: \"submit\",\n      variant: \"contained\",\n      disabled: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, \"Palette Full\") : React.createElement(Button, {\n      type: \"submit\",\n      variant: \"contained\",\n      style: {\n        backgroundColor: currentColor\n      },\n      disabled: paletteIsFull,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, \"Add Color\")));\n  }\n\n}\n\nexport default ColorPicker;","map":{"version":3,"sources":["C:\\Users\\todor\\Documents\\4-Web Development\\1-Web Development Courses\\3-REACT\\25-Color Palette\\color-palette\\src\\ColorPicker.js"],"names":["React","Component","ChromePicker","ValidatorForm","TextValidator","arrayMove","classNames","withStyles","Drawer","Divider","IconButton","ChevronLeftIcon","Button","DraggableColorBoxList","Typography","chroma","ColorPicker","constructor","props","state","currentColor","newColorName","componentDidMount","addValidationRule","value","colors","every","name","toLowerCase","color","palettes","paletteName","toLocaleLowerCase","render","paletteIsFull","handleColorPickerChange","addNewColor","handleChange","backgroundColor"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport {ChromePicker} from 'react-color'\r\nimport { ValidatorForm, TextValidator} from 'react-material-ui-form-validator';\r\nimport {arrayMove} from 'react-sortable-hoc';\r\nimport classNames from 'classnames'\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport ChevronLeftIcon from '@icons/material/ChevronLeftIcon';\r\nimport Button from '@material-ui/core/Button';\r\nimport DraggableColorBoxList from './DraggableColorBoxList'\r\nimport Typography from '@material-ui/core/Typography';\r\nimport chroma from 'chroma-js'\r\n\r\nclass ColorPicker extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            currentColor: \"teal\",\r\n            newColorName: \"\",\r\n        }\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        // validate if the color name is unique\r\n        ValidatorForm.addValidationRule('isColorNameUnique', value => \r\n          this.state.colors.every(({ name }) => name.toLowerCase() !== value.toLowerCase())\r\n        );\r\n  \r\n      //  validate if the color is unique\r\n        ValidatorForm.addValidationRule('isColorUnique', value => \r\n          this.state.colors.every(({ color }) => color !== this.state.currentColor)\r\n        );\r\n  \r\n        // validate if the palette name is unique\r\n        ValidatorForm.addValidationRule('isPaletteNameUnique', value =>       \r\n          this.props.palettes.every(({ paletteName } ) => paletteName.toLocaleLowerCase() !== value.toLocaleLowerCase())\r\n        );\r\n  \r\n      }\r\n    \r\n    render(){\r\n        const {currentColor, newColorName, paletteIsFull } = this.props\r\n        return(\r\n            <div>\r\n             <ChromePicker \r\n                    color={currentColor} \r\n                    onChangeComplete = {this.props.handleColorPickerChange}\r\n                  />\r\n\r\n\r\n                  <ValidatorForm \r\n                    onSubmit={this.props.addNewColor}\r\n                  \r\n                  >\r\n                    <TextValidator \r\n                      value={newColorName}\r\n                      onChange={this.props.handleChange}\r\n                      name=\"newColorName\"\r\n                      validators={[\r\n                          'required', \r\n                          'isColorNameUnique', \r\n                          'isColorUnique'\r\n                          ]}\r\n                      errorMessages={[\r\n                          'This field is required. Enter a color name!', \r\n                          'Color name must be unique!', \r\n                          'Color already exists!'\r\n                          ]}\r\n                    />\r\n                  { paletteIsFull ? \r\n                      <Button \r\n                        type=\"submit\"\r\n                        variant=\"contained\" \r\n                        disabled\r\n                      >\r\n                        Palette Full\r\n                      </Button>\r\n                  :\r\n                      <Button \r\n                        type=\"submit\"\r\n                        variant=\"contained\" \r\n                        style={{backgroundColor: currentColor}}\r\n                        disabled ={paletteIsFull}\r\n                      >\r\n                        Add Color\r\n                    </Button>\r\n                  }    \r\n                                    \r\n                  </ValidatorForm>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ColorPicker;"]},"metadata":{},"sourceType":"module"}