{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\todor\\\\Documents\\\\4-Web Development\\\\1-Web Development Courses\\\\3-REACT\\\\25-Color Palette\\\\color-palette\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"C:\\\\Users\\\\todor\\\\Documents\\\\4-Web Development\\\\1-Web Development Courses\\\\3-REACT\\\\25-Color Palette\\\\color-palette\\\\src\\\\MakeNewPalette.js\";\nimport React, { Component } from 'react';\nimport { ChromePicker } from 'react-color';\nimport { Link } from 'react-router-dom';\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\nimport classNames from 'classnames';\nimport { withStyles } from '@material-ui/core/styles';\nimport Drawer from '@material-ui/core/Drawer';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@icons/material/MenuIcon';\nimport ChevronLeftIcon from '@icons/material/ChevronLeftIcon';\nimport Button from '@material-ui/core/Button';\nimport DraggableColorBox from './DraggableColorBox';\nimport { Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle } from '@material-ui/core';\nimport { Picker } from 'emoji-mart';\nconst drawerWidth = 400;\n\nconst styles = theme => ({\n  root: {\n    display: 'flex'\n  },\n  appBar: {\n    transition: theme.transitions.create(['margin', 'width'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen\n    })\n  },\n  appBarShift: {\n    width: \"calc(100% - \".concat(drawerWidth, \"px)\"),\n    marginLeft: drawerWidth,\n    transition: theme.transitions.create(['margin', 'width'], {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen\n    })\n  },\n  menuButton: {\n    marginRight: theme.spacing(2)\n  },\n  hide: {\n    display: 'none'\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0\n  },\n  drawerPaper: {\n    width: drawerWidth\n  },\n  drawerHeader: _objectSpread({\n    display: 'flex',\n    alignItems: 'center',\n    padding: theme.spacing(0, 1)\n  }, theme.mixins.toolbar, {\n    justifyContent: 'flex-end'\n  }),\n  content: {\n    flexGrow: 1,\n    height: \"calc(100vh - 64px)\",\n    padding: theme.spacing(3),\n    transition: theme.transitions.create('margin', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen\n    }),\n    marginLeft: -drawerWidth\n  },\n  contentShift: {\n    transition: theme.transitions.create('margin', {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen\n    }),\n    marginLeft: 0\n  }\n});\n\nclass MakeNewPalette extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleDrawerOpen = () => {\n      this.setState({\n        open: true\n      });\n    };\n\n    this.handleDrawerClose = () => {\n      this.setState({\n        open: false\n      });\n    };\n\n    this.state = {\n      open: false,\n      currentColor: \"teal\",\n      newColorName: \"\",\n      colors: [{\n        name: \"red\",\n        color: \"#ff0000\"\n      }, {\n        name: \"yellow\",\n        color: \"#ffb000\"\n      }],\n      paletteName: \"\",\n      id: \"\",\n      emoji: \"\",\n      openModal: false,\n      openEmoji: false\n    };\n    this.handleColorPickerChange = this.handleColorPickerChange.bind(this);\n    this.addNewColor = this.addNewColor.bind(this);\n    this.handleNewColorName = this.handleNewColorName.bind(this);\n    this.savePalette = this.savePalette.bind(this);\n    this.addPaletteName = this.addPaletteName.bind(this);\n    this.cancelSave = this.cancelSave.bind(this);\n    this.openModal = this.openModal.bind(this);\n    this.handlePaletteName = this.handlePaletteName.bind(this); // this.addEmoji = this.addEmoji.bind(this)\n    // this.handleSubmit = this.handleSubmit.bind(this)\n  }\n\n  componentDidMount() {\n    // validate if the color name is unique\n    ValidatorForm.addValidationRule('isColorNameUnique', value => this.state.colors.every(({\n      name\n    }) => name.toLowerCase() !== value.toLowerCase())); //  validate if the color is unique\n\n    ValidatorForm.addValidationRule('isColorUnique', value => this.state.colors.every(({\n      color\n    }) => color !== this.state.currentColor));\n    ValidatorForm.addValidationRule('isPaletteNameUnique', value => // this.props.palettes.every(({ paletteName }).toLowerCase() !== value.toLowerCase())\n    console.log(this.props.palettes.every(paletteName => paletteName)));\n  }\n\n  handleColorPickerChange(newColor) {\n    this.setState({\n      currentColor: newColor.hex\n    });\n  }\n\n  addNewColor() {\n    const newColorObj = {\n      name: this.state.newColorName,\n      color: this.state.currentColor\n    };\n    this.setState({\n      colors: [...this.state.colors, newColorObj],\n      newColorName: \"\"\n    });\n  }\n\n  handleNewColorName(evt) {\n    let newName = evt.target.value;\n    this.setState({\n      newColorName: newName\n    });\n  }\n\n  addPaletteName(evt) {\n    this.setState({\n      paletteName: evt.target.value\n    });\n  }\n\n  savePalette() {\n    const _this$state = this.state,\n          paletteName = _this$state.paletteName,\n          emoji = _this$state.emoji,\n          colors = _this$state.colors;\n    let id = this.state.paletteName.toLocaleLowerCase().split(' ').join('-');\n    const newPalette = {\n      paletteName: paletteName,\n      id: id,\n      emoji: emoji,\n      colors: colors\n    };\n    this.setState({\n      openEmoji: true,\n      openModal: false\n    });\n    console.log(newPalette);\n    this.props.savePalette(newPalette);\n    this.props.history.push(\"/\");\n  }\n\n  openModal() {\n    this.setState({\n      openModal: true\n    });\n  }\n\n  cancelSave() {\n    this.setState({\n      openModal: false\n    });\n  }\n\n  handlePaletteName(evt) {\n    this.setState({\n      paletteName: evt.target.value\n    });\n  } // addEmoji(emoji){\n  //   let newEmoji = emoji.native;\n  //   this.setState({\n  //     emoji: newEmoji,\n  //     openEmoji: false,\n  //   })\n  // }\n  // handleSubmit(emoji){\n  //   this.addEmoji(emoji)\n  // }\n\n\n  render() {\n    const classes = this.props.classes;\n    const _this$state2 = this.state,\n          open = _this$state2.open,\n          currentColor = _this$state2.currentColor,\n          colors = _this$state2.colors,\n          newColorName = _this$state2.newColorName,\n          openModal = _this$state2.openModal,\n          openEmoji = _this$state2.openEmoji,\n          paletteName = _this$state2.paletteName;\n    return React.createElement(\"div\", {\n      className: classes.root,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225\n      },\n      __self: this\n    }, React.createElement(CssBaseline, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226\n      },\n      __self: this\n    }), React.createElement(AppBar, {\n      color: \"default\",\n      position: \"fixed\",\n      className: classNames(classes.appBar, {\n        [classes.appBarShift]: open\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227\n      },\n      __self: this\n    }, React.createElement(Toolbar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234\n      },\n      __self: this\n    }, React.createElement(IconButton, {\n      color: \"inherit\",\n      \"aria-label\": \"open drawer\",\n      onClick: this.handleDrawerOpen,\n      edge: \"start\",\n      className: classNames(classes.menuButton, open && classes.hide),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235\n      },\n      __self: this\n    }, React.createElement(MenuIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242\n      },\n      __self: this\n    })), React.createElement(Typography, {\n      variant: \"h6\",\n      noWrap: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244\n      },\n      __self: this\n    }, \"Create A Palette\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"contained\",\n      color: \"secondary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248\n      },\n      __self: this\n    }, React.createElement(Link, {\n      to: \"/\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249\n      },\n      __self: this\n    }, \" Go Back\")), React.createElement(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: this.openModal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252\n      },\n      __self: this\n    }, \"Save Palette\")))), React.createElement(Drawer, {\n      className: classes.drawer,\n      variant: \"persistent\",\n      anchor: \"left\",\n      open: open,\n      classes: {\n        paper: classes.drawerPaper\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: classes.drawerHeader,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268\n      },\n      __self: this\n    }, React.createElement(IconButton, {\n      onClick: this.handleDrawerClose,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269\n      },\n      __self: this\n    }, React.createElement(ChevronLeftIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270\n      },\n      __self: this\n    }))), React.createElement(Divider, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273\n      },\n      __self: this\n    }), React.createElement(Typography, {\n      variant: \"h4\",\n      noWrap: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274\n      },\n      __self: this\n    }, \"Design Your Palette\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: this.chooseRandomColor,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278\n      },\n      __self: this\n    }, \"Random Color\"), React.createElement(Button, {\n      variant: \"contained\",\n      color: \"secondary\",\n      onClick: this.clearPalette,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281\n      },\n      __self: this\n    }, \"Clear Palette\")), React.createElement(ChromePicker, {\n      color: currentColor,\n      onChangeComplete: this.handleColorPickerChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286\n      },\n      __self: this\n    }), React.createElement(ValidatorForm, {\n      onSubmit: this.addNewColor,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 292\n      },\n      __self: this\n    }, React.createElement(TextValidator, {\n      value: newColorName,\n      onChange: this.handleNewColorName,\n      validators: ['required', 'isColorNameUnique', 'isColorUnique'],\n      errorMessages: ['This field is required. Enter a color name!', 'Color name must be unique!', 'Color already exists!'],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296\n      },\n      __self: this\n    }), React.createElement(Button, {\n      type: \"submit\",\n      variant: \"contained\",\n      style: {\n        backgroundColor: currentColor\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311\n      },\n      __self: this\n    }, \"Add Color\"))), React.createElement(\"main\", {\n      className: classNames(classes.content, {\n        [classes.contentShift]: open\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 321\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: classes.drawerHeader,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 325\n      },\n      __self: this\n    }), React.createElement(Dialog, {\n      id: \"paletteNameModal\",\n      open: openModal,\n      onClose: this.handleClose,\n      \"aria-labelledby\": \"form-dialog-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326\n      },\n      __self: this\n    }, React.createElement(DialogTitle, {\n      id: \"form-dialog-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 327\n      },\n      __self: this\n    }, \" Add Palette Name\"), React.createElement(DialogContent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 329\n      },\n      __self: this\n    }, React.createElement(DialogContentText, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330\n      },\n      __self: this\n    }, \"Please Add Palette Name\"), React.createElement(ValidatorForm, {\n      onSubmit: this.savePalette,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 334\n      },\n      __self: this\n    }, React.createElement(TextValidator, {\n      value: paletteName,\n      onChange: this.handlePaletteName,\n      validators: ['required', 'isPaletteNameUnique'],\n      errorMessages: ['This field is required. Enter a color name!', 'Palette name must be unique!'],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 335\n      },\n      __self: this\n    }), React.createElement(DialogActions, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 348\n      },\n      __self: this\n    }, React.createElement(Button, {\n      onClick: this.cancelSave,\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 349\n      },\n      __self: this\n    }, \"Cancel\"), React.createElement(Button, {\n      type: \"submit\",\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 352\n      },\n      __self: this\n    }, \"Save\"))))), colors.map(color => React.createElement(DraggableColorBox, {\n      color: color.color,\n      name: color.name,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 366\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 368\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default withStyles(styles, {\n  withTheme: true\n})(MakeNewPalette);","map":{"version":3,"sources":["C:\\Users\\todor\\Documents\\4-Web Development\\1-Web Development Courses\\3-REACT\\25-Color Palette\\color-palette\\src\\MakeNewPalette.js"],"names":["React","Component","ChromePicker","Link","ValidatorForm","TextValidator","classNames","withStyles","Drawer","CssBaseline","AppBar","Toolbar","Typography","Divider","IconButton","MenuIcon","ChevronLeftIcon","Button","DraggableColorBox","Dialog","DialogActions","DialogContent","DialogContentText","DialogTitle","Picker","drawerWidth","styles","theme","root","display","appBar","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","width","marginLeft","easeOut","enteringScreen","menuButton","marginRight","spacing","hide","drawer","flexShrink","drawerPaper","drawerHeader","alignItems","padding","mixins","toolbar","justifyContent","content","flexGrow","height","contentShift","MakeNewPalette","constructor","props","handleDrawerOpen","setState","open","handleDrawerClose","state","currentColor","newColorName","colors","name","color","paletteName","id","emoji","openModal","openEmoji","handleColorPickerChange","bind","addNewColor","handleNewColorName","savePalette","addPaletteName","cancelSave","handlePaletteName","componentDidMount","addValidationRule","value","every","toLowerCase","console","log","palettes","newColor","hex","newColorObj","evt","newName","target","toLocaleLowerCase","split","join","newPalette","history","push","render","classes","paper","chooseRandomColor","clearPalette","backgroundColor","handleClose","map","withTheme"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport {ChromePicker} from 'react-color'\r\nimport {Link} from 'react-router-dom'\r\nimport { ValidatorForm, TextValidator} from 'react-material-ui-form-validator';\r\nimport classNames from 'classnames'\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@icons/material/MenuIcon';\r\nimport ChevronLeftIcon from '@icons/material/ChevronLeftIcon';\r\nimport Button from '@material-ui/core/Button';\r\nimport DraggableColorBox from './DraggableColorBox'\r\nimport {Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle } from '@material-ui/core'\r\nimport { Picker } from 'emoji-mart'\r\n\r\n\r\n\r\nconst drawerWidth = 400;\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    display: 'flex',\r\n  },\r\n  appBar: {\r\n    transition: theme.transitions.create(['margin', 'width'], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  appBarShift: {\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    marginLeft: drawerWidth,\r\n    transition: theme.transitions.create(['margin', 'width'], {\r\n      easing: theme.transitions.easing.easeOut,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  hide: {\r\n    display: 'none',\r\n  },\r\n  drawer: {\r\n    width: drawerWidth,\r\n    flexShrink: 0,\r\n  },\r\n  drawerPaper: {\r\n    width: drawerWidth,\r\n  },\r\n  drawerHeader: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    padding: theme.spacing(0, 1),\r\n    ...theme.mixins.toolbar,\r\n    justifyContent: 'flex-end',\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    height: \"calc(100vh - 64px)\",\r\n    padding: theme.spacing(3),\r\n    transition: theme.transitions.create('margin', {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    marginLeft: -drawerWidth,\r\n  },\r\n  contentShift: {\r\n    transition: theme.transitions.create('margin', {\r\n      easing: theme.transitions.easing.easeOut,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n    marginLeft: 0,\r\n  },\r\n});\r\n\r\nclass MakeNewPalette extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            open: false,\r\n            currentColor: \"teal\",\r\n            newColorName: \"\",\r\n            colors: [\r\n              { name: \"red\", color: \"#ff0000\"},\r\n              { name: \"yellow\", color: \"#ffb000\"},\r\n    \r\n            ],\r\n            paletteName:\"\",\r\n            id:\"\",\r\n            emoji:\"\",\r\n            openModal: false,\r\n            openEmoji: false,\r\n        }\r\n\r\n        this.handleColorPickerChange = this.handleColorPickerChange.bind(this)\r\n        this.addNewColor = this.addNewColor.bind(this)\r\n        this.handleNewColorName = this.handleNewColorName.bind(this)\r\n        this.savePalette = this.savePalette.bind(this)\r\n        this.addPaletteName = this.addPaletteName.bind(this)\r\n        this.cancelSave = this.cancelSave.bind(this)\r\n        this.openModal = this.openModal.bind(this)\r\n        this.handlePaletteName = this.handlePaletteName.bind(this)\r\n        // this.addEmoji = this.addEmoji.bind(this)\r\n        // this.handleSubmit = this.handleSubmit.bind(this)\r\n    }\r\n\r\n    componentDidMount() {\r\n      // validate if the color name is unique\r\n      ValidatorForm.addValidationRule('isColorNameUnique', value => \r\n        this.state.colors.every(({ name }) => name.toLowerCase() !== value.toLowerCase())\r\n      );\r\n\r\n    //  validate if the color is unique\r\n      ValidatorForm.addValidationRule('isColorUnique', value => \r\n        this.state.colors.every(({ color }) => color !== this.state.currentColor)\r\n      );\r\n\r\n      ValidatorForm.addValidationRule('isPaletteNameUnique', value => \r\n        // this.props.palettes.every(({ paletteName }).toLowerCase() !== value.toLowerCase())\r\n        console.log(this.props.palettes.every((paletteName) => paletteName))\r\n      );\r\n\r\n    }\r\n  \r\n    handleDrawerOpen = () => {\r\n        this.setState({open: true});\r\n      };\r\n\r\n    handleDrawerClose = () => {\r\n      this.setState({open: false});\r\n    };\r\n\r\n    handleColorPickerChange(newColor){\r\n        this.setState({\r\n            currentColor: newColor.hex,\r\n        })\r\n    }\r\n\r\n    addNewColor(){\r\n    \r\n      const newColorObj = {\r\n        name: this.state.newColorName,\r\n        color: this.state.currentColor,\r\n      }\r\n      this.setState({\r\n        colors: [...this.state.colors, newColorObj],\r\n        newColorName: \"\",\r\n      });\r\n    }\r\n\r\n    handleNewColorName(evt){\r\n      let newName = evt.target.value;\r\n      this.setState({\r\n        newColorName: newName,\r\n      })\r\n    }\r\n\r\n    addPaletteName(evt){\r\n      this.setState({\r\n        paletteName: evt.target.value,\r\n      })\r\n    }\r\n\r\n    savePalette(){\r\n      const{paletteName, emoji, colors} = this.state;\r\n      let id = this.state.paletteName.toLocaleLowerCase().split(' ').join('-');\r\n      const newPalette = {\r\n        paletteName: paletteName,\r\n        id: id,\r\n        emoji: emoji,\r\n        colors: colors,\r\n      }\r\n      this.setState({\r\n        openEmoji: true,\r\n        openModal: false,\r\n      })\r\n      console.log(newPalette)\r\n      this.props.savePalette(newPalette)\r\n      this.props.history.push(\"/\");\r\n     \r\n    }\r\n\r\n    openModal(){\r\n      this.setState({\r\n        openModal: true,\r\n      })\r\n    }\r\n\r\n    cancelSave(){\r\n      this.setState({\r\n        openModal: false,\r\n      })\r\n    }\r\n\r\n    handlePaletteName(evt){\r\n      this.setState({\r\n        paletteName: evt.target.value,\r\n      })\r\n    }\r\n\r\n    // addEmoji(emoji){\r\n    //   let newEmoji = emoji.native;\r\n    //   this.setState({\r\n    //     emoji: newEmoji,\r\n    //     openEmoji: false,\r\n    //   })\r\n      \r\n    // }\r\n\r\n    // handleSubmit(emoji){\r\n    //   this.addEmoji(emoji)\r\n    // }\r\n\r\n    render(){\r\n        const {classes} = this.props;\r\n        const {open, currentColor, colors, newColorName, openModal, openEmoji, paletteName} = this.state;\r\n\r\n        return(\r\n            <div className={classes.root}>\r\n                <CssBaseline />\r\n                <AppBar\r\n                  color=\"default\"\r\n                    position=\"fixed\"\r\n                    className={classNames(classes.appBar, {\r\n                        [classes.appBarShift]: open,\r\n                    })}\r\n                >\r\n                    <Toolbar>\r\n                        <IconButton\r\n                            color=\"inherit\"\r\n                            aria-label=\"open drawer\"\r\n                            onClick={this.handleDrawerOpen}\r\n                            edge=\"start\"\r\n                            className={classNames(classes.menuButton, open && classes.hide)}\r\n                        >\r\n                            <MenuIcon />\r\n                        </IconButton>\r\n                        <Typography variant=\"h6\" noWrap>\r\n                            Create A Palette\r\n                        </Typography>\r\n                        <div>\r\n                          <Button variant=\"contained\" color=\"secondary\">\r\n                              <Link to = \"/\"> Go Back</Link>\r\n                          </Button>\r\n                          \r\n                          <Button variant=\"contained\" color=\"primary\" onClick={this.openModal}>\r\n                              Save Palette\r\n                          </Button>\r\n                        </div>\r\n                    </Toolbar>\r\n                 \r\n                </AppBar>\r\n                <Drawer\r\n                  className={classes.drawer}\r\n                  variant=\"persistent\"\r\n                  anchor=\"left\"\r\n                  open={open}\r\n                  classes={{\r\n                      paper: classes.drawerPaper,\r\n                  }}\r\n                >\r\n                    <div className={classes.drawerHeader}>\r\n                        <IconButton onClick={this.handleDrawerClose}>\r\n                             <ChevronLeftIcon /> \r\n                        </IconButton>\r\n                    </div>\r\n                  <Divider />\r\n                  <Typography variant=\"h4\" noWrap>\r\n                      Design Your Palette\r\n                  </Typography>\r\n                  <div>\r\n                      <Button variant=\"contained\" color=\"primary\" onClick={this.chooseRandomColor}>\r\n                          Random Color\r\n                      </Button>\r\n                      <Button variant=\"contained\" color=\"secondary\" onClick={this.clearPalette}>\r\n                          Clear Palette\r\n                      </Button>\r\n                  </div>\r\n                  \r\n                  <ChromePicker \r\n                    color={currentColor} \r\n                    onChangeComplete = {this.handleColorPickerChange}\r\n                  />\r\n\r\n\r\n                  <ValidatorForm \r\n                    onSubmit={this.addNewColor}\r\n                  \r\n                  >\r\n                    <TextValidator \r\n                      value={newColorName}\r\n                      onChange={this.handleNewColorName}\r\n                      validators={[\r\n                          'required', \r\n                          'isColorNameUnique', \r\n                          'isColorUnique'\r\n                          ]}\r\n                      errorMessages={[\r\n                          'This field is required. Enter a color name!', \r\n                          'Color name must be unique!', \r\n                          'Color already exists!'\r\n                          ]}\r\n                    />\r\n\r\n                    <Button \r\n                      type=\"submit\"\r\n                      variant=\"contained\" \r\n                      style={{backgroundColor: currentColor}}\r\n                    >\r\n                        Add Color\r\n                    </Button>\r\n                  </ValidatorForm>\r\n                </Drawer>\r\n\r\n                <main className={classNames(classes.content, {\r\n                        [classes.contentShift]: open,\r\n                    })}\r\n                >\r\n                <div className={classes.drawerHeader} />\r\n                <Dialog id=\"paletteNameModal\" open={openModal} onClose={this.handleClose} aria-labelledby=\"form-dialog-title\">\r\n                  <DialogTitle id=\"form-dialog-title\"> Add Palette Name</DialogTitle>\r\n\r\n                  <DialogContent>\r\n                      <DialogContentText>\r\n                          Please Add Palette Name\r\n                      </DialogContentText>\r\n\r\n                    <ValidatorForm onSubmit={this.savePalette}>\r\n                        <TextValidator \r\n                            value={paletteName}\r\n                            onChange={this.handlePaletteName}\r\n                            validators={[\r\n                                'required', \r\n                                'isPaletteNameUnique',\r\n                              ]}\r\n                            errorMessages={[\r\n                              'This field is required. Enter a color name!', \r\n                              'Palette name must be unique!', \r\n                            ]}\r\n\r\n                            />\r\n                          <DialogActions>\r\n                            <Button onClick={this.cancelSave} color=\"primary\">\r\n                                Cancel\r\n                            </Button>\r\n                            <Button type=\"submit\" color=\"primary\">\r\n                                Save\r\n                            </Button>\r\n                        </DialogActions>\r\n                      \r\n\r\n                    </ValidatorForm>\r\n             \r\n                  </DialogContent>\r\n                       \r\n                </Dialog>\r\n                                          \r\n                  {colors.map(color => (\r\n                  \r\n                      <DraggableColorBox color={color.color} name={color.name} />\r\n                  ))}\r\n                  <div>\r\n                {/* <Dialog  open={openEmoji}>\r\n                    <ValidatorForm onSubmit={this.handleSubmit}>\r\n    \r\n                      <Picker onSelect={this.addEmoji} />\r\n                      <Picker title='Pick your emoji…' emoji='point_up' />\r\n            \r\n                    </ValidatorForm>\r\n                </Dialog> */}\r\n                </div>\r\n            \r\n                </main>\r\n          </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withStyles(styles, {withTheme: true}) (MakeNewPalette);\r\n"]},"metadata":{},"sourceType":"module"}