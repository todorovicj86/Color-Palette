{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\todor\\\\Documents\\\\4-Web Development\\\\1-Web Development Courses\\\\3-REACT\\\\25-Color Palette\\\\color-palette\\\\src\\\\NewPaletteForm.js\";\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { ChromePicker } from 'react-color';\nimport ColorBox from './ColorBox';\nimport seedColors from './seedColors'; // import Grid from '@material-ui/core/Grid';\n\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport chroma from 'chroma-js'; // import { Picker } from 'emoji-mart'\n// import DeleteIcon from '@icons/material/DeleteIcon';\n// import { Card, Container, IconButton } from '@material-ui/core';\n\nimport './NewPaletteForm.css';\n\nclass NewPaletteForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      paletteName: \"\",\n      id: \"\",\n      emoji: \"\",\n      colors: [{\n        name: \"red\",\n        color: \"#FF0000\"\n      }, {\n        name: \"yellow\",\n        color: \"#FFB000\"\n      }],\n      name: \"\",\n      color: \"\",\n      bgColor: \"rgb(220, 0, 78)\",\n      open: false,\n      disabled: false\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n    this.handleClickOpen = this.handleClickOpen.bind(this);\n    this.handleClose = this.handleClose.bind(this);\n    this.handleSave = this.handleSave.bind(this);\n    this.paletteName = this.paletteName.bind(this);\n    this.addColorName = this.addColorName.bind(this);\n    this.addPaletteToPaletteList = this.addPaletteToPaletteList.bind(this);\n    this.chooseRandomColor = this.chooseRandomColor.bind(this);\n    this.clearPalette = this.clearPalette.bind(this);\n  } // adding the palette to paletteList\n\n\n  addPaletteToPaletteList() {\n    const _this$state = this.state,\n          paletteName = _this$state.paletteName,\n          emoji = _this$state.emoji,\n          colors = _this$state.colors;\n    let id = paletteName.toLocaleLowerCase().split(' ').join(\"-\");\n    let palettes = this.props.palettes;\n    let newPalette = {\n      paletteName: paletteName,\n      id: id,\n      emoji: emoji,\n      colors: colors\n    };\n    palettes.push(newPalette); // adding the new palette to the local storage\n\n    window.localStorage.setItem(\"palettes\", JSON.stringify(palettes));\n  }\n\n  handleChange(color) {\n    let newColor = color.hex;\n    this.setState({\n      color: newColor,\n      bgColor: newColor\n    });\n  }\n\n  addColorName(evt) {\n    this.setState({\n      [evt.target.name]: evt.target.value\n    });\n  }\n\n  handleSubmit(evt) {\n    evt.preventDefault();\n  }\n\n  handleClick(evt) {\n    let size = this.state.colors.length;\n\n    if (size < this.props.maxColors) {\n      let newColorName = this.state.name;\n      let newColorCode = this.state.color;\n      let toAdd = {\n        name: newColorName,\n        color: newColorCode\n      };\n      this.setState(st => ({\n        colors: [...st.colors, toAdd],\n        size: size + 1,\n        name: \"\",\n        color: \"\",\n        bgColor: \"rgb(220, 0, 78)\",\n        disabled: false\n      }));\n    } else if (this.state.size === this.props.maxColors) {\n      this.setState(st => ({\n        // colors: [...st.colors],\n        // name: \"\",\n        // color:\"\",\n        bgColor: \"rgba(0, 0, 0, 0.12)\",\n        disabled: true\n      }));\n    }\n  } // opens modal form for palette name\n\n\n  handleClickOpen() {\n    this.setState({\n      open: true\n    });\n  } // close modal form\n\n\n  handleClose(evt) {\n    this.setState({\n      open: false\n    });\n  } // when save is clicked, palette is added to the palette list\n\n\n  handleSave() {\n    this.addPaletteToPaletteList();\n    this.setState({\n      open: false\n    });\n  } // set the palette name with modal form\n\n\n  paletteName(evt) {\n    this.setState({\n      paletteName: evt.target.value\n    });\n  } // random color \n\n\n  chooseRandomColor() {\n    let newColor = chroma.random().hex();\n    this.setState({\n      color: newColor,\n      bgColor: newColor\n    });\n  } // clear the palette\n\n\n  clearPalette() {\n    this.setState({\n      colors: []\n    });\n  }\n\n  render() {\n    const _this$state2 = this.state,\n          bgColor = _this$state2.bgColor,\n          color = _this$state2.color,\n          name = _this$state2.name,\n          open = _this$state2.open,\n          paletteName = _this$state2.paletteName,\n          colors = _this$state2.colors; // set the text color, based on the contrast with the background\n\n    const textColor = chroma.contrast(bgColor, 'white') >= 4.5 ? \"white\" : \"black\";\n    return React.createElement(\"div\", {\n      className: \"NewPaletteForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"color-picker\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }, \"Design Your Palette\"), React.createElement(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: this.chooseRandomColor,\n      disabled: this.state.disabled,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }, \"Random Color\"), React.createElement(Button, {\n      variant: \"contained\",\n      color: \"secondary\",\n      onClick: this.clearPalette,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }, \"Clear Palette\"), React.createElement(ChromePicker, {\n      color: color,\n      onChangeComplete: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }), React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }, React.createElement(TextField, {\n      required: true,\n      id: \"filled-with-placeholder\",\n      label: \"Color Name\",\n      placeholder: \"Color Name\",\n      margin: \"normal\",\n      variant: \"filled\",\n      value: name,\n      name: \"name\",\n      onChange: this.addColorName,\n      disabled: this.state.disabled,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }), React.createElement(Button, {\n      className: \"addColor-btn\",\n      onClick: this.handleClick,\n      style: {\n        backgroundColor: this.state.disabled ? \"rgba(0, 0, 0, 0.12)\" : bgColor,\n        color: textColor\n      },\n      disabled: this.state.disabled,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }, \"Add Color\"))), React.createElement(\"div\", {\n      className: \"color-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"color-container-navbar\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    }, React.createElement(\"h5\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }, \"Create A Palette\"), React.createElement(\"div\", {\n      className: \"navbar-button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    }, React.createElement(Link, {\n      to: \"/\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216\n      },\n      __self: this\n    }, \" Go Back\")), React.createElement(Button, {\n      variant: \"contained\",\n      color: \"secondary\",\n      onClick: this.handleClickOpen,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      },\n      __self: this\n    }, \"Save\"))), React.createElement(Dialog, {\n      open: open,\n      onClose: this.handleClose,\n      \"aria-labelledby\": \"form-dialog-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225\n      },\n      __self: this\n    }, React.createElement(DialogTitle, {\n      id: \"form-dialog-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226\n      },\n      __self: this\n    }, \" Add Palette Name\"), React.createElement(DialogContent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228\n      },\n      __self: this\n    }, React.createElement(DialogContentText, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229\n      },\n      __self: this\n    }, \"Please Add Palette Name\"), React.createElement(TextField, {\n      autoFocus: true,\n      margin: \"dense\",\n      id: \"name\",\n      value: paletteName,\n      label: \"Palette Name\",\n      type: \"name\",\n      fullWidth: true,\n      onChange: this.paletteName,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233\n      },\n      __self: this\n    })), React.createElement(DialogActions, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245\n      },\n      __self: this\n    }, React.createElement(Button, {\n      onClick: this.handleClose,\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246\n      },\n      __self: this\n    }, \"Cancel\"), React.createElement(Button, {\n      onClick: this.handleSave,\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249\n      },\n      __self: this\n    }, \"Save\"))), React.createElement(Picker, {\n      onSelect: this.addEmoji,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256\n      },\n      __self: this\n    }), React.createElement(Picker, {\n      title: \"Pick your emoji\\u2026\",\n      emoji: \"point_up\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257\n      },\n      __self: this\n    }), React.createElement(Picker, {\n      style: {\n        position: 'absolute',\n        bottom: '20px',\n        right: '20px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258\n      },\n      __self: this\n    }), React.createElement(Picker, {\n      i18n: {\n        search: 'Recherche',\n        categories: {\n          search: 'Résultats de recherche',\n          recent: 'Récents'\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"color-container-palette\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261\n      },\n      __self: this\n    }, colors.map(color => React.createElement(ColorBox //  bgColor = {color.color}\n    , {\n      bgColor: this.props.format === 'hex' && chroma(color.color).hex() || this.props.format === \"rgb\" && chroma(color.color).css() || this.props.format === \"rgba\" && chroma(color.color).alpha(0.9).css(),\n      colorName: color.name,\n      key: color.color,\n      format: this.props.format,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nNewPaletteForm.defaultProps = {\n  maxColors: 20\n};\nexport default NewPaletteForm;","map":{"version":3,"sources":["C:\\Users\\todor\\Documents\\4-Web Development\\1-Web Development Courses\\3-REACT\\25-Color Palette\\color-palette\\src\\NewPaletteForm.js"],"names":["React","Component","Link","ChromePicker","ColorBox","seedColors","Button","TextField","Dialog","DialogActions","DialogContent","DialogContentText","DialogTitle","chroma","NewPaletteForm","constructor","props","state","paletteName","id","emoji","colors","name","color","bgColor","open","disabled","handleChange","bind","handleSubmit","handleClick","handleClickOpen","handleClose","handleSave","addColorName","addPaletteToPaletteList","chooseRandomColor","clearPalette","toLocaleLowerCase","split","join","palettes","newPalette","push","window","localStorage","setItem","JSON","stringify","newColor","hex","setState","evt","target","value","preventDefault","size","length","maxColors","newColorName","newColorCode","toAdd","st","random","render","textColor","contrast","backgroundColor","addEmoji","position","bottom","right","search","categories","recent","map","format","css","alpha","defaultProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport {Link} from 'react-router-dom'\r\nimport {ChromePicker} from 'react-color'\r\nimport ColorBox from './ColorBox'\r\nimport seedColors from './seedColors'\r\n// import Grid from '@material-ui/core/Grid';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport chroma from 'chroma-js'\r\n// import { Picker } from 'emoji-mart'\r\n// import DeleteIcon from '@icons/material/DeleteIcon';\r\n// import { Card, Container, IconButton } from '@material-ui/core';\r\nimport './NewPaletteForm.css'\r\n\r\n\r\n\r\nclass NewPaletteForm extends Component {\r\n    static defaultProps = {\r\n        maxColors: 20,\r\n    }\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            paletteName: \"\",\r\n            id: \"\",\r\n            emoji: \"\",\r\n            colors: [\r\n                { name: \"red\", color: \"#FF0000\"},\r\n                { name: \"yellow\", color: \"#FFB000\"},\r\n            ],\r\n            name: \"\",\r\n            color: \"\",\r\n            bgColor: \"rgb(220, 0, 78)\",\r\n            open: false,\r\n            disabled: false,          \r\n        }\r\n        this.handleChange = this.handleChange.bind(this)\r\n        this.handleSubmit = this.handleSubmit.bind(this)\r\n        this.handleClick = this.handleClick.bind(this)\r\n        this.handleClickOpen = this.handleClickOpen.bind(this)\r\n        this.handleClose = this.handleClose.bind(this)\r\n        this.handleSave = this.handleSave.bind(this)\r\n        this.paletteName = this.paletteName.bind(this)\r\n        this.addColorName = this.addColorName.bind(this)\r\n        this.addPaletteToPaletteList = this.addPaletteToPaletteList.bind(this)\r\n        this.chooseRandomColor = this.chooseRandomColor.bind(this);\r\n        this.clearPalette = this.clearPalette.bind(this);\r\n\r\n    }\r\n\r\n    // adding the palette to paletteList\r\n    addPaletteToPaletteList(){\r\n        const {paletteName, emoji, colors} = this.state;\r\n        let id = paletteName.toLocaleLowerCase().split(' ').join(\"-\");\r\n        let palettes = this.props.palettes;\r\n        let newPalette = {\r\n            paletteName: paletteName,\r\n            id: id,\r\n            emoji: emoji,\r\n            colors: colors\r\n        }\r\n        palettes.push(newPalette);\r\n        // adding the new palette to the local storage\r\n        window.localStorage.setItem(\"palettes\", JSON.stringify(palettes))\r\n    }\r\n\r\n\r\n    handleChange(color) {\r\n        let newColor = color.hex\r\n   \r\n        this.setState({\r\n            color:newColor,\r\n            bgColor:newColor,\r\n        })\r\n    };\r\n\r\n  \r\n    addColorName(evt){\r\n       \r\n        this.setState({\r\n            [evt.target.name]: evt.target.value, \r\n        })\r\n        \r\n    }\r\n\r\n    handleSubmit(evt){\r\n        evt.preventDefault();\r\n\r\n    }\r\n\r\n    handleClick(evt){\r\n       \r\n        let size = this.state.colors.length;\r\n        if (size < this.props.maxColors){\r\n            let newColorName = this.state.name;\r\n            let newColorCode = this.state.color;\r\n                \r\n            let toAdd = {\r\n                name: newColorName,\r\n                color: newColorCode,\r\n            }\r\n            this.setState(st => ({\r\n                colors: [...st.colors,  toAdd],\r\n                size: size+1,\r\n                name: \"\",\r\n                color: \"\",\r\n                bgColor: \"rgb(220, 0, 78)\",\r\n                disabled: false,\r\n            }))\r\n        }\r\n        else if(this.state.size === this.props.maxColors){\r\n            this.setState(st =>({\r\n                // colors: [...st.colors],\r\n                // name: \"\",\r\n                // color:\"\",\r\n                bgColor: \"rgba(0, 0, 0, 0.12)\",\r\n                disabled: true,\r\n            }))\r\n        }\r\n    }\r\n   \r\n// opens modal form for palette name\r\n    handleClickOpen() {\r\n        this.setState({\r\n            open: true,\r\n        })\r\n    \r\n    }\r\n\r\n// close modal form\r\n    handleClose(evt) {\r\n        this.setState({\r\n            open:false,\r\n        })\r\n    }\r\n\r\n// when save is clicked, palette is added to the palette list\r\n    handleSave(){\r\n        this.addPaletteToPaletteList();\r\n        this.setState({\r\n            open:false,\r\n        })\r\n    }\r\n// set the palette name with modal form\r\n    paletteName(evt){\r\n        this.setState({\r\n            paletteName: evt.target.value, \r\n        })\r\n    }\r\n// random color \r\n    chooseRandomColor(){\r\n        let newColor = chroma.random().hex();\r\n        this.setState({\r\n            color: newColor,\r\n            bgColor: newColor,\r\n        })\r\n      \r\n    }\r\n\r\n// clear the palette\r\n    clearPalette(){\r\n        this.setState({\r\n            colors: []\r\n        })\r\n    }\r\n \r\n    render(){\r\n        const {bgColor, color, name, open, paletteName, colors} =  this.state;\r\n        // set the text color, based on the contrast with the background\r\n        const textColor = chroma.contrast(bgColor, 'white') >= 4.5 ? \"white\" : \"black\"\r\n        return(\r\n            <div className = \"NewPaletteForm\" >\r\n                <div className=\"color-picker\">\r\n                    <h2>Design Your Palette</h2>\r\n                    <Button variant=\"contained\" color=\"primary\" onClick={this.chooseRandomColor} disabled={this.state.disabled}>\r\n                        Random Color\r\n                    </Button>\r\n                    <Button variant=\"contained\" color=\"secondary\" onClick={this.clearPalette}>\r\n                        Clear Palette\r\n                    </Button>\r\n                    <ChromePicker color={color}\r\n                         onChangeComplete = {this.handleChange}\r\n                    />\r\n                    <form onSubmit = {this.handleSubmit}>  \r\n                        <TextField\r\n                            required\r\n                            id=\"filled-with-placeholder\"\r\n                            label=\"Color Name\"\r\n                            placeholder=\"Color Name\"\r\n                            margin=\"normal\"\r\n                            variant=\"filled\"\r\n                            value = {name}\r\n                            name=\"name\"\r\n                            onChange={this.addColorName}\r\n                            disabled={this.state.disabled}\r\n                        />\r\n                        <Button className=\"addColor-btn\" onClick = {this.handleClick} \r\n                                style={{backgroundColor: this.state.disabled ? \"rgba(0, 0, 0, 0.12)\" : bgColor, color: textColor}} \r\n                                disabled={this.state.disabled}\r\n                        >\r\n                            Add Color\r\n                        </Button>\r\n                    </form>\r\n                </div>\r\n\r\n                <div className=\"color-container\">\r\n                    <div className=\"color-container-navbar\">\r\n                        <h5>Create A Palette</h5>\r\n                        <div className=\"navbar-button\">\r\n                            <Button variant=\"contained\" color=\"primary\">\r\n                                <Link to = \"/\"> Go Back</Link>\r\n                            </Button>\r\n                            \r\n                            <Button variant=\"contained\" color=\"secondary\" onClick={this.handleClickOpen}>\r\n                                Save\r\n                            </Button>\r\n                        </div>\r\n                        \r\n                    </div>\r\n                    <Dialog open={open} onClose={this.handleClose} aria-labelledby=\"form-dialog-title\">\r\n                        <DialogTitle id=\"form-dialog-title\"> Add Palette Name</DialogTitle>\r\n\r\n                        <DialogContent>\r\n                            <DialogContentText>\r\n                                Please Add Palette Name\r\n                            </DialogContentText>\r\n\r\n                            <TextField\r\n                                autoFocus\r\n                                margin=\"dense\"\r\n                                id=\"name\"\r\n                                value={paletteName}\r\n                                label=\"Palette Name\"\r\n                                type=\"name\"\r\n                                fullWidth\r\n                                onChange = {this.paletteName}\r\n                            />\r\n                        </DialogContent>\r\n\r\n                        <DialogActions>\r\n                            <Button onClick={this.handleClose} color=\"primary\">\r\n                                Cancel\r\n                            </Button>\r\n                            <Button onClick={this.handleSave } color=\"primary\">\r\n                                Save\r\n                            </Button>\r\n                        </DialogActions>\r\n                    </Dialog>\r\n\r\n                    {/* <Picker set='emojione' /> */}\r\n                    <Picker onSelect={this.addEmoji} />\r\n                    <Picker title='Pick your emoji…' emoji='point_up' />\r\n                    <Picker style={{ position: 'absolute', bottom: '20px', right: '20px' }} />\r\n                    <Picker i18n={{ search: 'Recherche', categories: { search: 'Résultats de recherche', recent: 'Récents' } }} />\r\n\r\n                    <div className=\"color-container-palette\"> \r\n                        {colors.map(color => (\r\n                            \r\n                                <ColorBox\r\n                                //  bgColor = {color.color}\r\n                                bgColor = {\r\n                                        (this.props.format === 'hex' &&  chroma(color.color).hex()) ||\r\n                                        (this.props.format === \"rgb\" && chroma(color.color).css()) ||\r\n                                        (this.props.format === \"rgba\" && chroma(color.color).alpha(0.9).css())                                                             \r\n                                    }\r\n                                         colorName = {color.name}\r\n                                         key = {color.color}\r\n                                         format = {this.props.format}\r\n                                />\r\n                              \r\n                        ))}\r\n                    </div>\r\n                </div>\r\n               \r\n            </div>\r\n         \r\n        )\r\n    }\r\n}\r\n\r\nexport default NewPaletteForm;"]},"metadata":{},"sourceType":"module"}