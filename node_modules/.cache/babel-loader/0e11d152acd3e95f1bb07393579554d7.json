{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\todor\\\\Documents\\\\4-Web Development\\\\1-Web Development Courses\\\\3-REACT\\\\25-Color Palette\\\\color-palette\\\\src\\\\ColorPicker.js\";\nimport React, { Component } from 'react';\nimport { ChromePicker } from 'react-color';\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\nimport Button from '@material-ui/core/Button';\nimport { withStyles } from '@material-ui/core/styles';\nconst styles = {\n  root: {\n    display: \"flex\",\n    flexDirection: 'column',\n    alignItems: 'center',\n    justifyContent: \"center\",\n    width: \"80%\"\n  },\n  form: {\n    display: \"flex\",\n    flexDirection: 'column',\n    alignItems: 'center',\n    justifyContent: \"center\",\n    width: \"100%\",\n    marginTop: \"1rem\",\n    \"& form\": {\n      width: \"100%\"\n    }\n  },\n  formBtn: {\n    width: \"100%\",\n    textAlign: \"center\",\n    marginTop: \"20px\",\n    \"& button\": {\n      width: \"100%\",\n      padding: \"1rem\",\n      fontSize: '2rem'\n    }\n  },\n  chromePicker: {\n    width: \"100% !important\"\n  },\n  formInput: {\n    width: \"100%\"\n  }\n};\n\nclass ColorPicker extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentColor: \"teal\",\n      newColorName: \"\"\n    };\n    this.handleColorPickerChange = this.handleColorPickerChange.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.addNewColor = this.addNewColor.bind(this);\n  }\n\n  componentDidMount() {\n    // validate if the color name is unique\n    ValidatorForm.addValidationRule('isColorNameUnique', value => this.props.colors.every(({\n      name\n    }) => name.toLowerCase() !== value.toLowerCase())); //  validate if the color is unique\n\n    ValidatorForm.addValidationRule('isColorUnique', value => this.props.colors.every(({\n      color\n    }) => color !== this.state.currentColor));\n  }\n\n  handleColorPickerChange(newColor) {\n    this.setState({\n      currentColor: newColor.hex\n    });\n  }\n\n  handleChange(evt) {\n    this.setState({\n      [evt.target.name]: evt.target.value\n    });\n  }\n\n  addNewColor() {\n    const newColorObj = {\n      name: this.state.newColorName,\n      color: this.state.currentColor\n    };\n    this.props.addNewColor(newColorObj);\n    this.setState({\n      newColorName: \"\"\n    });\n  }\n\n  render() {\n    const _this$props = this.props,\n          paletteIsFull = _this$props.paletteIsFull,\n          classes = _this$props.classes;\n    const _this$state = this.state,\n          currentColor = _this$state.currentColor,\n          newColorName = _this$state.newColorName;\n    return React.createElement(\"div\", {\n      className: classes.root,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, React.createElement(ChromePicker, {\n      color: currentColor,\n      onChangeComplete: this.handleColorPickerChange,\n      className: classes.chromePicker,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: classes.form,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, React.createElement(ValidatorForm, {\n      onSubmit: this.addNewColor,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, React.createElement(TextValidator, {\n      className: classes.formInput,\n      value: newColorName,\n      onChange: this.handleChange,\n      name: \"newColorName\",\n      validators: ['required', 'isColorNameUnique', 'isColorUnique'],\n      errorMessages: ['This field is required. Enter a color name!', 'Color name must be unique!', 'Color already exists!'],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: classes.formBtn,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, paletteIsFull ? React.createElement(Button, {\n      type: \"submit\",\n      variant: \"contained\",\n      disabled: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, \"Palette Full\") : React.createElement(Button, {\n      type: \"submit\",\n      variant: \"contained\",\n      style: {\n        backgroundColor: currentColor\n      },\n      disabled: paletteIsFull,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, \"Add Color\")))));\n  }\n\n}\n\nexport default withStyles(styles)(ColorPicker);","map":{"version":3,"sources":["C:\\Users\\todor\\Documents\\4-Web Development\\1-Web Development Courses\\3-REACT\\25-Color Palette\\color-palette\\src\\ColorPicker.js"],"names":["React","Component","ChromePicker","ValidatorForm","TextValidator","Button","withStyles","styles","root","display","flexDirection","alignItems","justifyContent","width","form","marginTop","formBtn","textAlign","padding","fontSize","chromePicker","formInput","ColorPicker","constructor","props","state","currentColor","newColorName","handleColorPickerChange","bind","handleChange","addNewColor","componentDidMount","addValidationRule","value","colors","every","name","toLowerCase","color","newColor","setState","hex","evt","target","newColorObj","render","paletteIsFull","classes","backgroundColor"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport {ChromePicker} from 'react-color'\r\nimport { ValidatorForm, TextValidator} from 'react-material-ui-form-validator';\r\nimport Button from '@material-ui/core/Button';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nconst styles = {\r\n    root: {\r\n        display: \"flex\",\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n        justifyContent: \"center\",\r\n        width: \"80%\"\r\n    },\r\n    form: {\r\n        display: \"flex\",\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n        justifyContent: \"center\",\r\n        width: \"100%\",\r\n        marginTop: \"1rem\",\r\n        \"& form\": {\r\n            width: \"100%\",\r\n        }\r\n    },\r\n    formBtn: {\r\n        width: \"100%\",\r\n        textAlign: \"center\",\r\n        marginTop: \"20px\",\r\n        \"& button\":{\r\n            width: \"100%\",\r\n            padding: \"1rem\",\r\n            fontSize: '2rem',\r\n        }\r\n    },\r\n    chromePicker:{\r\n        width: \"100% !important\"\r\n    },\r\n    formInput:{\r\n        width: \"100%\", \r\n    }\r\n\r\n}\r\n\r\nclass ColorPicker extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            currentColor: \"teal\",\r\n            newColorName: \"\",\r\n        }\r\n        this.handleColorPickerChange = this.handleColorPickerChange.bind(this)\r\n        this.handleChange = this.handleChange.bind(this)\r\n        this.addNewColor = this.addNewColor.bind(this)\r\n    }\r\n\r\n    \r\n\r\n    componentDidMount() {\r\n        // validate if the color name is unique\r\n        ValidatorForm.addValidationRule('isColorNameUnique', value => \r\n          this.props.colors.every(({ name }) => name.toLowerCase() !== value.toLowerCase())\r\n        );\r\n  \r\n      //  validate if the color is unique\r\n        ValidatorForm.addValidationRule('isColorUnique', value => \r\n          this.props.colors.every(({ color }) => color !== this.state.currentColor)\r\n        );\r\n  \r\n      }\r\n\r\n\r\n    handleColorPickerChange(newColor){\r\n        this.setState({\r\n            currentColor: newColor.hex,\r\n        })\r\n    }\r\n\r\n    handleChange(evt){\r\n        this.setState({\r\n          [evt.target.name]: evt.target.value,\r\n        })\r\n    }\r\n\r\n    addNewColor(){\r\n        const newColorObj = {\r\n            name: this.state.newColorName,\r\n            color: this.state.currentColor,\r\n        }\r\n     \r\n      this.props.addNewColor(newColorObj)\r\n\r\n      this.setState({\r\n        newColorName: \"\",\r\n      })\r\n    }\r\n\r\n       \r\n    render(){\r\n        const { paletteIsFull, classes } = this.props\r\n        const {currentColor, newColorName} = this.state;\r\n\r\n        return(\r\n            <div className= {classes.root}>\r\n                 <ChromePicker \r\n                    color={currentColor} \r\n                    onChangeComplete = {this.handleColorPickerChange}\r\n                    className={classes.chromePicker}\r\n                  />\r\n\r\n                <div className={classes.form}>\r\n                  <ValidatorForm onSubmit={this.addNewColor}>\r\n                    <TextValidator \r\n                        className={classes.formInput}\r\n                      value={newColorName}\r\n                      onChange={this.handleChange}\r\n                      name=\"newColorName\"\r\n                      validators={[\r\n                          'required', \r\n                          'isColorNameUnique', \r\n                          'isColorUnique'\r\n                          ]}\r\n                      errorMessages={[\r\n                          'This field is required. Enter a color name!', \r\n                          'Color name must be unique!', \r\n                          'Color already exists!'\r\n                          ]}\r\n                    />\r\n                    <div className={classes.formBtn}>\r\n                    { paletteIsFull ? \r\n                        <Button \r\n                            type=\"submit\"\r\n                            variant=\"contained\" \r\n                            disabled\r\n                        >\r\n                            Palette Full\r\n                        </Button>\r\n                    :\r\n                        <Button \r\n                            type=\"submit\"\r\n                            variant=\"contained\" \r\n                            style={{backgroundColor: currentColor}}\r\n                            disabled ={paletteIsFull}\r\n                        >\r\n                            Add Color\r\n                        </Button>\r\n                    }   \r\n                  </div>\r\n                                    \r\n                  </ValidatorForm>\r\n                  </div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(ColorPicker);"]},"metadata":{},"sourceType":"module"}