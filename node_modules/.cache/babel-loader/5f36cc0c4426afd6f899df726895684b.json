{"ast":null,"code":"import chroma from 'chroma-js';\n\nvar rgbToHex = function (rgb) {\n  var hex = Number(rgb).toString(16);\n\n  if (hex.length < 2) {\n    hex = \"0\" + hex;\n  }\n\n  return hex;\n};\n\nvar fullColorHex = function (r, g, b) {\n  var red = rgbToHex(r);\n  var green = rgbToHex(g);\n  var blue = rgbToHex(b);\n  return red + green + blue;\n};\n\nvar colorShades = function (r, g, b) {\n  var max = Math.max(r, Math.max(g, b));\n  var step = 255 / (max * 10);\n  var red = (r * step, g * step, b * step);\n  var green = (r * step * 2, g * step * 2, b * step * 2);\n  var blue = (r * step * 3, g * step * 3, b * step * 3); //   var red = rgbToHex(Math.round(11*r/10))\n  //   var green = rgbToHex(Math.round(11*g/10))\n  //   var blue = rgbToHex(Math.round(11*b/10))\n\n  console.log(red, green, blue);\n  return red + green + blue;\n};\n\nvar getPaletteShades = function (currentPalette) {\n  let colorShade;\n  let shades = [];\n  let shadeInfo; // console.log(currentPalette);\n  // 10 shade levels for a slider\n\n  const levels = [50, 100, 200, 300, 400, 500, 600, 700, 800, 900]; // for each color in the color palette, make 10 different shades\n\n  for (let i = 0; i < currentPalette.colors.length; i++) {\n    // color from the palette\n    const baseColor = currentPalette.colors[i].color; // darkest shade, not black\n\n    const darkestShade = chroma(baseColor).darken(4); // lightest shade, not white\n\n    const brightestShade = chroma(baseColor).brighten(2.6); // make 10 shades of one color\n\n    colorShade = chroma.scale([brightestShade, baseColor, darkestShade]).colors(10); // make name and color code format for each shade\n\n    for (let j = 0; j < colorShade.length; j++) {\n      shadeInfo = {\n        name: currentPalette.colors[i].name + \" \" + levels[j],\n        hex: colorShade[j],\n        rgb: chroma(colorShade[j]).css(),\n        rgba: chroma(colorShade[j]).alpha(0.9).css()\n      };\n      shades.push(shadeInfo);\n    }\n  }\n\n  let newPalette = {\n    paletteName: currentPalette.paletteName,\n    id: currentPalette.id,\n    emoji: currentPalette.emoji,\n    colors: shades\n  };\n  let colors = {};\n\n  for (let i = 0; i < levels.length; i++) {\n    let allColors = new Set();\n    allColors.add(shades);\n    colors[levels[i]] = []; // console.log(allColors)\n\n    for (let color of allColors) {\n      color.forEach(function (c) {\n        if (c.name.search(levels[i]) !== -1) {\n          // console.log(c)\n          color = c;\n          colors[levels[i]].push(color);\n        }\n      });\n    }\n\n    newPalette.colors = colors;\n  }\n\n  console.log(newPalette);\n  newPalette.colors[50].forEach(function (el) {\n    if (el.name.search(\"500\") !== -1) {\n      el.name.remove();\n    }\n  });\n  console.log(newPalette.colors[50]); // return newPalette;\n};\n\nexport { fullColorHex, colorShades, getPaletteShades };","map":{"version":3,"sources":["C:\\Users\\todor\\Documents\\4-Web Development\\1-Web Development Courses\\3-REACT\\25-Color Palette\\color-palette\\src\\helpers.js"],"names":["chroma","rgbToHex","rgb","hex","Number","toString","length","fullColorHex","r","g","b","red","green","blue","colorShades","max","Math","step","console","log","getPaletteShades","currentPalette","colorShade","shades","shadeInfo","levels","i","colors","baseColor","color","darkestShade","darken","brightestShade","brighten","scale","j","name","css","rgba","alpha","push","newPalette","paletteName","id","emoji","allColors","Set","add","forEach","c","search","el","remove"],"mappings":"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","sourcesContent":["import chroma from 'chroma-js'\r\n\r\n\r\nvar rgbToHex = function (rgb) { \r\n    var hex = Number(rgb).toString(16);\r\n    if (hex.length < 2) {\r\n         hex = \"0\" + hex;\r\n    }\r\n    return hex;\r\n  };\r\n\r\n  var fullColorHex = function(r,g,b) {   \r\n    var red = rgbToHex(r);\r\n    var green = rgbToHex(g);\r\n    var blue = rgbToHex(b);\r\n    return red+green+blue;\r\n  };\r\n\r\n  var colorShades = function(r, g, b){\r\n    var max = Math.max(r,Math.max(g,b));\r\n    var step = 255 / (max * 10);\r\n    var red = (r * step, g * step, b * step)\r\n    var green =  (r * step * 2, g * step * 2, b * step * 2)\r\n    var blue = (r * step * 3, g * step * 3, b * step * 3)\r\n    //   var red = rgbToHex(Math.round(11*r/10))\r\n    //   var green = rgbToHex(Math.round(11*g/10))\r\n    //   var blue = rgbToHex(Math.round(11*b/10))\r\n    console.log(red, green,blue)\r\n      return red+green+blue;\r\n  }\r\n\r\n\r\nvar getPaletteShades = function (currentPalette){\r\n  let colorShade;\r\n  let shades = [];\r\n  let shadeInfo;\r\n  // console.log(currentPalette);\r\n  // 10 shade levels for a slider\r\n  const levels = [50, 100, 200, 300, 400, 500, 600, 700, 800, 900];\r\n  // for each color in the color palette, make 10 different shades\r\n  for(let i = 0; i < currentPalette.colors.length; i++){\r\n    // color from the palette\r\n    const baseColor = currentPalette.colors[i].color;\r\n    // darkest shade, not black\r\n    const darkestShade = chroma(baseColor).darken(4);\r\n    // lightest shade, not white\r\n    const brightestShade = chroma(baseColor).brighten(2.6)\r\n    // make 10 shades of one color\r\n    colorShade = chroma.scale([brightestShade, baseColor, darkestShade]).colors(10);\r\n      \r\n    // make name and color code format for each shade\r\n    for(let j=0; j < colorShade.length; j++){\r\n      shadeInfo = {\r\n        name: currentPalette.colors[i].name + \" \" + levels[j],\r\n        hex: colorShade[j],\r\n        rgb: chroma(colorShade[j]).css(),\r\n        rgba: chroma(colorShade[j]).alpha(0.9).css(),\r\n      }\r\n      shades.push(shadeInfo);\r\n       \r\n    }\r\n\r\n  } \r\n\r\n  let newPalette = {\r\n    paletteName: currentPalette.paletteName,\r\n    id: currentPalette.id,\r\n    emoji: currentPalette.emoji,\r\n    colors: shades,\r\n  }\r\n  let colors = {};\r\n  for(let i = 0; i < levels.length; i++){\r\n    let allColors = new Set();\r\n    allColors.add(shades)\r\n    colors[levels[i]]=[];\r\n    // console.log(allColors)\r\n    for(let color of allColors){\r\n      color.forEach(function(c){\r\n        if(c.name.search(levels[i]) !== -1){\r\n          // console.log(c)\r\n          color = c;\r\n          colors[levels[i]].push(color)\r\n        }     \r\n      })\r\n  }\r\n  newPalette.colors = colors;\r\n}\r\nconsole.log(newPalette)\r\nnewPalette.colors[50].forEach(function(el){\r\n  if(el.name.search(\"500\") !== -1){\r\n    el.name.remove();\r\n  }\r\n})\r\nconsole.log(newPalette.colors[50])\r\n    // return newPalette;\r\n}\r\nexport {fullColorHex, colorShades, getPaletteShades}"]},"metadata":{},"sourceType":"module"}