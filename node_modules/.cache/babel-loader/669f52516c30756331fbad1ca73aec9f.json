{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\todor\\\\Documents\\\\4-Web Development\\\\1-Web Development Courses\\\\3-REACT\\\\25-Color Palette\\\\color-palette\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"C:\\\\Users\\\\todor\\\\Documents\\\\4-Web Development\\\\1-Web Development Courses\\\\3-REACT\\\\25-Color Palette\\\\color-palette\\\\src\\\\MakeNewPalette.js\";\nimport React, { Component } from 'react';\nimport { ChromePicker } from 'react-color';\nimport { Link } from 'react-router-dom';\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\nimport classNames from 'classnames';\nimport { withStyles } from '@material-ui/core/styles';\nimport Drawer from '@material-ui/core/Drawer';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@icons/material/MenuIcon';\nimport ChevronLeftIcon from '@icons/material/ChevronLeftIcon';\nimport Button from '@material-ui/core/Button';\nimport DraggableColorBox from './DraggableColorBox';\nconst drawerWidth = 400;\n\nconst styles = theme => ({\n  root: {\n    display: 'flex'\n  },\n  appBar: {\n    transition: theme.transitions.create(['margin', 'width'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen\n    })\n  },\n  appBarShift: {\n    width: \"calc(100% - \".concat(drawerWidth, \"px)\"),\n    marginLeft: drawerWidth,\n    transition: theme.transitions.create(['margin', 'width'], {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen\n    })\n  },\n  menuButton: {\n    marginRight: theme.spacing(2)\n  },\n  hide: {\n    display: 'none'\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0\n  },\n  drawerPaper: {\n    width: drawerWidth\n  },\n  drawerHeader: _objectSpread({\n    display: 'flex',\n    alignItems: 'center',\n    padding: theme.spacing(0, 1)\n  }, theme.mixins.toolbar, {\n    justifyContent: 'flex-end'\n  }),\n  content: {\n    flexGrow: 1,\n    height: \"calc(100vh - 64px)\",\n    padding: theme.spacing(3),\n    transition: theme.transitions.create('margin', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen\n    }),\n    marginLeft: -drawerWidth\n  },\n  contentShift: {\n    transition: theme.transitions.create('margin', {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen\n    }),\n    marginLeft: 0\n  }\n});\n\nclass MakeNewPalette extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleDrawerOpen = () => {\n      this.setState({\n        open: true\n      });\n    };\n\n    this.handleDrawerClose = () => {\n      this.setState({\n        open: false\n      });\n    };\n\n    this.state = {\n      open: false,\n      currentColor: \"teal\",\n      newColorName: \"\",\n      colors: [{\n        name: \"red\",\n        color: \"#ff0000\"\n      }, {\n        name: \"yellow\",\n        color: \"#ffb000\"\n      }],\n      paletteName: \"\",\n      id: \"\",\n      emoji: \"\",\n      openModal: false,\n      openEmoji: false\n    };\n    this.handleColorPickerChange = this.handleColorPickerChange.bind(this);\n    this.addNewColor = this.addNewColor.bind(this);\n    this.handleNewColorName = this.handleNewColorName.bind(this);\n  }\n\n  componentDidMount() {\n    // validate if the color name is unique\n    ValidatorForm.addValidationRule('isColorNameUnique', value => this.state.colors.every(({\n      name\n    }) => name.toLowerCase() !== value.toLowerCase())); //  validate if the color is unique\n\n    ValidatorForm.addValidationRule('isColorUnique', value => this.state.colors.every(({\n      color\n    }) => color !== this.state.currentColor));\n  }\n\n  handleColorPickerChange(newColor) {\n    this.setState({\n      currentColor: newColor.hex\n    });\n  }\n\n  addNewColor() {\n    const newColorObj = {\n      name: this.state.newColorName,\n      color: this.state.currentColor\n    };\n    this.setState({\n      colors: [...this.state.colors, newColorObj],\n      newColorName: \"\"\n    });\n  }\n\n  handleNewColorName(evt) {\n    let newName = evt.target.value;\n    this.setState({\n      newColorName: newName\n    });\n  }\n\n  render() {\n    const classes = this.props.classes;\n    const _this$state = this.state,\n          open = _this$state.open,\n          currentColor = _this$state.currentColor,\n          colors = _this$state.colors,\n          newColorName = _this$state.newColorName;\n    return React.createElement(\"div\", {\n      className: classes.root,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, React.createElement(CssBaseline, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }), React.createElement(AppBar, {\n      color: \"default\",\n      position: \"fixed\",\n      className: classNames(classes.appBar, {\n        [classes.appBarShift]: open\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, React.createElement(Toolbar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, React.createElement(IconButton, {\n      color: \"inherit\",\n      \"aria-label\": \"open drawer\",\n      onClick: this.handleDrawerOpen,\n      edge: \"start\",\n      className: classNames(classes.menuButton, open && classes.hide),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }, React.createElement(MenuIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    })), React.createElement(Typography, {\n      variant: \"h6\",\n      noWrap: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }, \"Create A Palette\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"contained\",\n      color: \"secondary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }, React.createElement(Link, {\n      to: \"/\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, \" Go Back\")), React.createElement(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: this.handleClickOpen,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }, \"Save Palette\")))), React.createElement(Drawer, {\n      className: classes.drawer,\n      variant: \"persistent\",\n      anchor: \"left\",\n      open: open,\n      classes: {\n        paper: classes.drawerPaper\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: classes.drawerHeader,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }, React.createElement(IconButton, {\n      onClick: this.handleDrawerClose,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    }, React.createElement(ChevronLeftIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }))), React.createElement(Divider, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }), React.createElement(Typography, {\n      variant: \"h4\",\n      noWrap: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }, \"Design Your Palette\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: this.chooseRandomColor,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }, \"Random Color\"), React.createElement(Button, {\n      variant: \"contained\",\n      color: \"secondary\",\n      onClick: this.clearPalette,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    }, \"Clear Palette\")), React.createElement(ChromePicker, {\n      color: currentColor,\n      onChangeComplete: this.handleColorPickerChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214\n      },\n      __self: this\n    }), React.createElement(ValidatorForm, {\n      onSubmit: this.addNewColor,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220\n      },\n      __self: this\n    }, React.createElement(TextValidator, {\n      value: newColorName,\n      onChange: this.handleNewColorName,\n      validators: ['required', 'isColorNameUnique', 'isColorUnique'],\n      errorMessages: ['This field is required. Enter a color name!', 'Color name must be unique!', 'Color already exists!'],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224\n      },\n      __self: this\n    }), React.createElement(Button, {\n      type: \"submit\",\n      variant: \"contained\",\n      style: {\n        backgroundColor: currentColor\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239\n      },\n      __self: this\n    }, \"Add Color\"))), React.createElement(\"main\", {\n      className: classNames(classes.content, {\n        [classes.contentShift]: open\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: classes.drawerHeader,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253\n      },\n      __self: this\n    }), colors.map(color => React.createElement(DraggableColorBox, {\n      color: color.color,\n      name: color.name,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default withStyles(styles, {\n  withTheme: true\n})(MakeNewPalette);","map":{"version":3,"sources":["C:\\Users\\todor\\Documents\\4-Web Development\\1-Web Development Courses\\3-REACT\\25-Color Palette\\color-palette\\src\\MakeNewPalette.js"],"names":["React","Component","ChromePicker","Link","ValidatorForm","TextValidator","classNames","withStyles","Drawer","CssBaseline","AppBar","Toolbar","Typography","Divider","IconButton","MenuIcon","ChevronLeftIcon","Button","DraggableColorBox","drawerWidth","styles","theme","root","display","appBar","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","width","marginLeft","easeOut","enteringScreen","menuButton","marginRight","spacing","hide","drawer","flexShrink","drawerPaper","drawerHeader","alignItems","padding","mixins","toolbar","justifyContent","content","flexGrow","height","contentShift","MakeNewPalette","constructor","props","handleDrawerOpen","setState","open","handleDrawerClose","state","currentColor","newColorName","colors","name","color","paletteName","id","emoji","openModal","openEmoji","handleColorPickerChange","bind","addNewColor","handleNewColorName","componentDidMount","addValidationRule","value","every","toLowerCase","newColor","hex","newColorObj","evt","newName","target","render","classes","handleClickOpen","paper","chooseRandomColor","clearPalette","backgroundColor","map","withTheme"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport {ChromePicker} from 'react-color'\r\nimport {Link} from 'react-router-dom'\r\nimport { ValidatorForm, TextValidator} from 'react-material-ui-form-validator';\r\nimport classNames from 'classnames'\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@icons/material/MenuIcon';\r\nimport ChevronLeftIcon from '@icons/material/ChevronLeftIcon';\r\nimport Button from '@material-ui/core/Button';\r\nimport DraggableColorBox from './DraggableColorBox'\r\n\r\n\r\nconst drawerWidth = 400;\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    display: 'flex',\r\n  },\r\n  appBar: {\r\n    transition: theme.transitions.create(['margin', 'width'], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  appBarShift: {\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    marginLeft: drawerWidth,\r\n    transition: theme.transitions.create(['margin', 'width'], {\r\n      easing: theme.transitions.easing.easeOut,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  hide: {\r\n    display: 'none',\r\n  },\r\n  drawer: {\r\n    width: drawerWidth,\r\n    flexShrink: 0,\r\n  },\r\n  drawerPaper: {\r\n    width: drawerWidth,\r\n  },\r\n  drawerHeader: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    padding: theme.spacing(0, 1),\r\n    ...theme.mixins.toolbar,\r\n    justifyContent: 'flex-end',\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    height: \"calc(100vh - 64px)\",\r\n    padding: theme.spacing(3),\r\n    transition: theme.transitions.create('margin', {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    marginLeft: -drawerWidth,\r\n  },\r\n  contentShift: {\r\n    transition: theme.transitions.create('margin', {\r\n      easing: theme.transitions.easing.easeOut,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n    marginLeft: 0,\r\n  },\r\n});\r\n\r\nclass MakeNewPalette extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            open: false,\r\n            currentColor: \"teal\",\r\n            newColorName: \"\",\r\n            colors: [\r\n              { name: \"red\", color: \"#ff0000\"},\r\n              { name: \"yellow\", color: \"#ffb000\"},\r\n    \r\n            ],\r\n            paletteName: \"\",\r\n            id:\"\",\r\n            emoji:\"\",\r\n            openModal: false,\r\n            openEmoji: false,\r\n        }\r\n\r\n        this.handleColorPickerChange = this.handleColorPickerChange.bind(this)\r\n        this.addNewColor = this.addNewColor.bind(this)\r\n        this.handleNewColorName = this.handleNewColorName.bind(this)\r\n    }\r\n\r\n    componentDidMount() {\r\n      // validate if the color name is unique\r\n      ValidatorForm.addValidationRule('isColorNameUnique', value => \r\n        this.state.colors.every(({ name }) => name.toLowerCase() !== value.toLowerCase())\r\n      );\r\n\r\n    //  validate if the color is unique\r\n      ValidatorForm.addValidationRule('isColorUnique', value => \r\n        this.state.colors.every(({ color }) => color !== this.state.currentColor)\r\n      );\r\n    }\r\n  \r\n    handleDrawerOpen = () => {\r\n        this.setState({open: true});\r\n      };\r\n\r\n    handleDrawerClose = () => {\r\n    this.setState({open: false});\r\n    };\r\n\r\n    handleColorPickerChange(newColor){\r\n        this.setState({\r\n            currentColor: newColor.hex,\r\n        })\r\n    }\r\n\r\n    addNewColor(){\r\n    \r\n      const newColorObj = {\r\n        name: this.state.newColorName,\r\n        color: this.state.currentColor,\r\n      }\r\n      this.setState({\r\n        colors: [...this.state.colors, newColorObj],\r\n        newColorName: \"\",\r\n      });\r\n    }\r\n\r\n    handleNewColorName(evt){\r\n      let newName = evt.target.value;\r\n      this.setState({\r\n        newColorName: newName,\r\n      })\r\n    }\r\n\r\n    render(){\r\n        const {classes} = this.props;\r\n        const {open, currentColor, colors, newColorName} = this.state;\r\n\r\n        return(\r\n            <div className={classes.root}>\r\n                <CssBaseline />\r\n                <AppBar\r\n                  color=\"default\"\r\n                    position=\"fixed\"\r\n                    className={classNames(classes.appBar, {\r\n                        [classes.appBarShift]: open,\r\n                    })}\r\n                >\r\n                    <Toolbar>\r\n                        <IconButton\r\n                            color=\"inherit\"\r\n                            aria-label=\"open drawer\"\r\n                            onClick={this.handleDrawerOpen}\r\n                            edge=\"start\"\r\n                            className={classNames(classes.menuButton, open && classes.hide)}\r\n                        >\r\n                            <MenuIcon />\r\n                        </IconButton>\r\n                        <Typography variant=\"h6\" noWrap>\r\n                            Create A Palette\r\n                        </Typography>\r\n                        <div>\r\n                          <Button variant=\"contained\" color=\"secondary\">\r\n                              <Link to = \"/\"> Go Back</Link>\r\n                          </Button>\r\n                          \r\n                          <Button variant=\"contained\" color=\"primary\" onClick={this.handleClickOpen}>\r\n                              Save Palette\r\n                          </Button>\r\n                        </div>\r\n                    </Toolbar>\r\n                 \r\n                </AppBar>\r\n                <Drawer\r\n                  className={classes.drawer}\r\n                  variant=\"persistent\"\r\n                  anchor=\"left\"\r\n                  open={open}\r\n                  classes={{\r\n                      paper: classes.drawerPaper,\r\n                  }}\r\n                >\r\n                    <div className={classes.drawerHeader}>\r\n                        <IconButton onClick={this.handleDrawerClose}>\r\n                             <ChevronLeftIcon /> \r\n                        </IconButton>\r\n                    </div>\r\n                  <Divider />\r\n                  <Typography variant=\"h4\" noWrap>\r\n                      Design Your Palette\r\n                  </Typography>\r\n                  <div>\r\n                      <Button variant=\"contained\" color=\"primary\" onClick={this.chooseRandomColor}>\r\n                          Random Color\r\n                      </Button>\r\n                      <Button variant=\"contained\" color=\"secondary\" onClick={this.clearPalette}>\r\n                          Clear Palette\r\n                      </Button>\r\n                  </div>\r\n                  \r\n                  <ChromePicker \r\n                    color={currentColor} \r\n                    onChangeComplete = {this.handleColorPickerChange}\r\n                  />\r\n\r\n\r\n                  <ValidatorForm \r\n                    onSubmit={this.addNewColor}\r\n                  \r\n                  >\r\n                    <TextValidator \r\n                      value={newColorName}\r\n                      onChange={this.handleNewColorName}\r\n                      validators={[\r\n                          'required', \r\n                          'isColorNameUnique', \r\n                          'isColorUnique'\r\n                          ]}\r\n                      errorMessages={[\r\n                          'This field is required. Enter a color name!', \r\n                          'Color name must be unique!', \r\n                          'Color already exists!'\r\n                          ]}\r\n                    />\r\n\r\n                  <Button \r\n                    type=\"submit\"\r\n                    variant=\"contained\" \r\n                    style={{backgroundColor: currentColor}}\r\n                  >\r\n                      Add Color\r\n                  </Button>\r\n                  </ValidatorForm>\r\n                </Drawer>\r\n\r\n                <main className={classNames(classes.content, {\r\n                        [classes.contentShift]: open,\r\n                    })}\r\n                >\r\n                <div className={classes.drawerHeader} />\r\n                                            \r\n                  {colors.map(color => (\r\n                  \r\n                      <DraggableColorBox color={color.color} name={color.name} />\r\n                  ))}\r\n                    \r\n            \r\n                </main>\r\n          </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withStyles(styles, {withTheme: true}) (MakeNewPalette);\r\n"]},"metadata":{},"sourceType":"module"}