{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\todor\\\\Documents\\\\4-Web Development\\\\1-Web Development Courses\\\\3-REACT\\\\25-Color Palette\\\\color-palette\\\\src\\\\NewPaletteForm.js\";\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { ChromePicker } from 'react-color';\nimport { DragDropContext, Draggable, Droppable } from 'react-beautiful-dnd';\nimport ColorBox from './ColorBox'; // import seedColors from './seedColors'\n// import Grid from '@material-ui/core/Grid';\n\nimport { Drawer, Button, TextField, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle } from '@material-ui/core';\nimport chroma from 'chroma-js'; // import { Picker } from 'emoji-mart'\n\nimport uuid from 'uuid'; // import DeleteIcon from '@icons/material/DeleteIcon';\n// import { Card, Container, IconButton } from '@material-ui/core';\n\nimport './NewPaletteForm.css';\n\nclass NewPaletteForm extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onBeforeDragStart = () => {\n      /*...*/\n    };\n\n    this.onDragStart = () => {\n      /*...*/\n    };\n\n    this.onDragUpdate = () => {\n      /*...*/\n    };\n\n    this.onDragEnd = () => {// the only one that is required\n    };\n\n    this.state = {\n      paletteName: \"\",\n      id: \"\",\n      emoji: \"\",\n      colors: [{\n        name: \"red\",\n        color: \"#ff0000\"\n      }, {\n        name: \"yellow\",\n        color: \"#ffb000\"\n      }],\n      name: \"\",\n      color: \"\",\n      bgColor: \"rgb(220, 0, 78)\",\n      open: false,\n      disabled: false,\n      leftOpen: true\n    };\n    this.hasColor = new Set(this.state.colors.map(col => col.color)); // console.log(this.hasColor)\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.addColor = this.addColor.bind(this);\n    this.handleClickOpen = this.handleClickOpen.bind(this);\n    this.handleClose = this.handleClose.bind(this);\n    this.handleSave = this.handleSave.bind(this);\n    this.paletteName = this.paletteName.bind(this);\n    this.addColorName = this.addColorName.bind(this);\n    this.addPaletteToPaletteList = this.addPaletteToPaletteList.bind(this);\n    this.chooseRandomColor = this.chooseRandomColor.bind(this);\n    this.clearPalette = this.clearPalette.bind(this);\n    this.toggleColorPicker = this.toggleColorPicker.bind(this);\n  } // adding the palette to paletteList\n\n\n  addPaletteToPaletteList() {\n    const _this$state = this.state,\n          paletteName = _this$state.paletteName,\n          emoji = _this$state.emoji,\n          colors = _this$state.colors;\n    let id = paletteName.toLocaleLowerCase().split(' ').join(\"-\");\n    let palettes = this.props.palettes;\n    let newPalette = {\n      paletteName: paletteName,\n      id: id,\n      emoji: emoji,\n      colors: colors\n    };\n    palettes.push(newPalette); // adding the new palette to the local storage\n\n    window.localStorage.setItem(\"palettes\", JSON.stringify(palettes));\n  } // color from a color picker\n\n\n  handleChange(color) {\n    let newColor = color.hex;\n    this.setState({\n      color: newColor,\n      bgColor: newColor\n    });\n  }\n\n  // color name from input field\n  addColorName(evt) {\n    this.setState({\n      [evt.target.name]: evt.target.value\n    });\n  }\n\n  handleSubmit(evt) {\n    evt.preventDefault();\n  } // adding a new color and its name to and array of colors\n\n\n  addColor(evt) {\n    let size = this.state.colors.length; // if size of the colors array is less than max=20\n\n    if (size < this.props.maxColors) {\n      let newColorName = this.state.name;\n      let newColorCode = this.state.color;\n      let toAdd = {\n        name: newColorName,\n        color: newColorCode // check if the color already exists in the array of colors\n\n      };\n\n      if (!this.hasColor.has(newColorCode)) {\n        this.setState(st => ({\n          colors: [...st.colors, toAdd],\n          size: size + 1,\n          name: \"\",\n          color: \"\",\n          bgColor: \"rgb(220, 0, 78)\",\n          disabled: false\n        }));\n        this.hasColor.add(newColorCode);\n        console.log(this.hasColor);\n      } else {\n        // if there is a duplicate, alert the message\n        alert(\"That color exists! Please choose another color!\");\n      } // if max number of colors is reached, disable the buttons\n\n    } else if (this.state.size === this.props.maxColors) {\n      this.setState(st => ({\n        // colors: [...st.colors],\n        // name: \"\",\n        // color:\"\",\n        bgColor: \"rgba(0, 0, 0, 0.12)\",\n        disabled: true\n      }));\n    }\n  } // open modal form for palette name\n\n\n  handleClickOpen() {\n    this.setState({\n      open: true\n    });\n  } // close modal form\n\n\n  handleClose(evt) {\n    this.setState({\n      open: false\n    });\n  } // when save is clicked, palette is added to the palette list\n\n\n  handleSave() {\n    this.addPaletteToPaletteList();\n    this.setState({\n      open: false\n    });\n  } // set the palette name with modal form\n\n\n  paletteName(evt) {\n    this.setState({\n      paletteName: evt.target.value\n    });\n  } // random color  \n\n\n  chooseRandomColor() {\n    let newColor = chroma.random().hex();\n\n    if (!this.hasColor.has(newColor)) {\n      this.setState({\n        color: newColor,\n        bgColor: newColor\n      }); // this.hasColor.add(newColor);\n    } else {\n      alert(\"That color exists! Please choose another random color!\");\n    }\n  } // clear the palette\n\n\n  clearPalette() {\n    this.setState({\n      colors: []\n    });\n  }\n\n  toggleColorPicker() {\n    this.setState(st => ({\n      leftOpen: !st.leftOpen\n    }));\n  }\n\n  render() {\n    const _this$state2 = this.state,\n          bgColor = _this$state2.bgColor,\n          color = _this$state2.color,\n          name = _this$state2.name,\n          open = _this$state2.open,\n          paletteName = _this$state2.paletteName,\n          colors = _this$state2.colors,\n          disabled = _this$state2.disabled,\n          leftOpen = _this$state2.leftOpen; // set the text color, based on the contrast with the background\n\n    const textColor = chroma.contrast(bgColor, 'white') >= 4.5 ? \"white\" : \"black\";\n    return React.createElement(\"div\", {\n      className: \"NewPaletteForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211\n      },\n      __self: this\n    }, React.createElement(Drawer, {\n      id: \"ColorPicker-drawer\",\n      open: leftOpen,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"color-picker\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      id: \"LeftArrow\",\n      onClick: this.toggleColorPicker,\n      className: \"fas fa-angle-double-left\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218\n      },\n      __self: this\n    }, \"Design Your Palette\"), React.createElement(\"div\", {\n      className: \"color-picker-buttons\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: this.chooseRandomColor,\n      disabled: disabled,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220\n      },\n      __self: this\n    }, \"Random Color\"), React.createElement(Button, {\n      variant: \"contained\",\n      color: \"secondary\",\n      onClick: this.clearPalette,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223\n      },\n      __self: this\n    }, \"Clear Palette\")), React.createElement(ChromePicker, {\n      color: color,\n      onChangeComplete: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227\n      },\n      __self: this\n    }), React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230\n      },\n      __self: this\n    }, React.createElement(TextField, {\n      required: true,\n      id: \"filled-with-placeholder\",\n      label: \"Color Name\",\n      placeholder: \"Color Name\",\n      margin: \"normal\",\n      variant: \"filled\",\n      value: name,\n      name: \"name\",\n      onChange: this.addColorName,\n      disabled: disabled,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231\n      },\n      __self: this\n    }), React.createElement(Button, {\n      className: \"addColor-btn\",\n      onClick: this.addColor,\n      style: {\n        backgroundColor: disabled ? \"rgba(0, 0, 0, 0.12)\" : bgColor,\n        color: textColor\n      },\n      disabled: disabled,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243\n      },\n      __self: this\n    }, \"Add Color\")))), React.createElement(\"div\", {\n      className: \"\".concat(leftOpen ? 'color-container active' : \"color-container\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"color-container-navbar\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      id: \"RightArrow\",\n      onClick: this.toggleColorPicker,\n      className: \"\".concat(leftOpen ? \"fas fa-angle-double-right hidden\" : \"fas fa-angle-double-right\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256\n      },\n      __self: this\n    }), React.createElement(\"h5\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258\n      },\n      __self: this\n    }, \"Create A Palette\"), React.createElement(\"div\", {\n      className: \"navbar-button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260\n      },\n      __self: this\n    }, React.createElement(Link, {\n      to: \"/\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261\n      },\n      __self: this\n    }, \" Go Back\")), React.createElement(Button, {\n      variant: \"contained\",\n      color: \"secondary\",\n      onClick: this.handleClickOpen,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264\n      },\n      __self: this\n    }, \"Save\"))), React.createElement(Dialog, {\n      id: \"paletteNameModal\",\n      open: open,\n      onClose: this.handleClose,\n      \"aria-labelledby\": \"form-dialog-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270\n      },\n      __self: this\n    }, React.createElement(DialogTitle, {\n      id: \"form-dialog-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271\n      },\n      __self: this\n    }, \" Add Palette Name\"), React.createElement(DialogContent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273\n      },\n      __self: this\n    }, React.createElement(DialogContentText, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274\n      },\n      __self: this\n    }, \"Please Add Palette Name\"), React.createElement(TextField, {\n      autoFocus: true,\n      margin: \"dense\",\n      id: \"name\",\n      value: paletteName,\n      label: \"Palette Name\",\n      type: \"name\",\n      fullWidth: true,\n      onChange: this.paletteName,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278\n      },\n      __self: this\n    })), React.createElement(DialogActions, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290\n      },\n      __self: this\n    }, React.createElement(Button, {\n      onClick: this.handleClose,\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291\n      },\n      __self: this\n    }, \"Cancel\"), React.createElement(Button, {\n      onClick: this.handleSave,\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294\n      },\n      __self: this\n    }, \"Save\"))), React.createElement(\"div\", {\n      className: \"color-container-palette\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313\n      },\n      __self: this\n    }, React.createElement(DragDropContext, {\n      onBeforeDragStart: this.onBeforeDragStart,\n      onDragStart: this.onDragStart,\n      onDragUpdate: this.onDragUpdate,\n      onDragEnd: this.onDragEnd,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314\n      },\n      __self: this\n    }, colors.map(color => React.createElement(ColorBox, {\n      bgColor: this.props.format === 'hex' && chroma(color.color).hex() || this.props.format === \"rgb\" && chroma(color.color).css() || this.props.format === \"rgba\" && chroma(color.color).alpha(0.9).css(),\n      colorName: color.name,\n      key: uuid(),\n      format: this.props.format,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 321\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nNewPaletteForm.defaultProps = {\n  maxColors: 20\n};\nexport default NewPaletteForm;","map":{"version":3,"sources":["C:\\Users\\todor\\Documents\\4-Web Development\\1-Web Development Courses\\3-REACT\\25-Color Palette\\color-palette\\src\\NewPaletteForm.js"],"names":["React","Component","Link","ChromePicker","DragDropContext","Draggable","Droppable","ColorBox","Drawer","Button","TextField","Dialog","DialogActions","DialogContent","DialogContentText","DialogTitle","chroma","uuid","NewPaletteForm","constructor","props","onBeforeDragStart","onDragStart","onDragUpdate","onDragEnd","state","paletteName","id","emoji","colors","name","color","bgColor","open","disabled","leftOpen","hasColor","Set","map","col","handleChange","bind","handleSubmit","addColor","handleClickOpen","handleClose","handleSave","addColorName","addPaletteToPaletteList","chooseRandomColor","clearPalette","toggleColorPicker","toLocaleLowerCase","split","join","palettes","newPalette","push","window","localStorage","setItem","JSON","stringify","newColor","hex","setState","evt","target","value","preventDefault","size","length","maxColors","newColorName","newColorCode","toAdd","has","st","add","console","log","alert","random","render","textColor","contrast","backgroundColor","format","css","alpha","defaultProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport {Link} from 'react-router-dom'\r\nimport {ChromePicker} from 'react-color'\r\nimport { DragDropContext, Draggable, Droppable } from 'react-beautiful-dnd';\r\nimport ColorBox from './ColorBox'\r\n// import seedColors from './seedColors'\r\n// import Grid from '@material-ui/core/Grid';\r\nimport { Drawer, Button, TextField, Dialog,\r\n         DialogActions, DialogContent, DialogContentText, \r\n         DialogTitle } from '@material-ui/core';\r\nimport chroma from 'chroma-js'\r\n// import { Picker } from 'emoji-mart'\r\nimport uuid from 'uuid'\r\n// import DeleteIcon from '@icons/material/DeleteIcon';\r\n// import { Card, Container, IconButton } from '@material-ui/core';\r\nimport './NewPaletteForm.css'\r\n\r\n\r\nclass NewPaletteForm extends Component {\r\n    static defaultProps = {\r\n        maxColors: 20,\r\n    }\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            paletteName: \"\",\r\n            id: \"\",\r\n            emoji: \"\",\r\n            colors: [\r\n                { name: \"red\", color: \"#ff0000\"},\r\n                { name: \"yellow\", color: \"#ffb000\"},\r\n            ],\r\n            name: \"\",\r\n            color: \"\",\r\n            bgColor: \"rgb(220, 0, 78)\",\r\n            open: false,\r\n            disabled: false, \r\n            leftOpen: true,         \r\n        }\r\n        this.hasColor = new Set(this.state.colors.map(col => col.color))\r\n        // console.log(this.hasColor)\r\n\r\n        this.handleChange = this.handleChange.bind(this)\r\n        this.handleSubmit = this.handleSubmit.bind(this)\r\n        this.addColor = this.addColor.bind(this)\r\n        this.handleClickOpen = this.handleClickOpen.bind(this)\r\n        this.handleClose = this.handleClose.bind(this)\r\n        this.handleSave = this.handleSave.bind(this)\r\n        this.paletteName = this.paletteName.bind(this)\r\n        this.addColorName = this.addColorName.bind(this)\r\n        this.addPaletteToPaletteList = this.addPaletteToPaletteList.bind(this)\r\n        this.chooseRandomColor = this.chooseRandomColor.bind(this);\r\n        this.clearPalette = this.clearPalette.bind(this);\r\n        this.toggleColorPicker = this.toggleColorPicker.bind(this)\r\n\r\n    }\r\n\r\n    // adding the palette to paletteList\r\n    addPaletteToPaletteList(){\r\n        const {paletteName, emoji, colors} = this.state;\r\n        let id = paletteName.toLocaleLowerCase().split(' ').join(\"-\");\r\n        let palettes = this.props.palettes;\r\n        let newPalette = {\r\n            paletteName: paletteName,\r\n            id: id,\r\n            emoji: emoji,\r\n            colors: colors\r\n        }\r\n        palettes.push(newPalette);\r\n        // adding the new palette to the local storage\r\n        window.localStorage.setItem(\"palettes\", JSON.stringify(palettes))\r\n    }\r\n\r\n    // color from a color picker\r\n    handleChange(color) {\r\n        let newColor = color.hex\r\n        this.setState({\r\n            color:newColor,\r\n            bgColor:newColor,\r\n        })\r\n    };\r\n  \r\n    // color name from input field\r\n    addColorName(evt){\r\n        this.setState({\r\n            [evt.target.name]: evt.target.value, \r\n        })\r\n        \r\n    }\r\n\r\n    handleSubmit(evt){\r\n        evt.preventDefault();\r\n    }\r\n\r\n    // adding a new color and its name to and array of colors\r\n    addColor(evt){\r\n        let size = this.state.colors.length;\r\n        // if size of the colors array is less than max=20\r\n        if (size < this.props.maxColors){\r\n            let newColorName = this.state.name;\r\n            let newColorCode = this.state.color;\r\n                                \r\n            let toAdd = {\r\n                name: newColorName,\r\n                color: newColorCode,\r\n            }\r\n            // check if the color already exists in the array of colors\r\n            if(!this.hasColor.has(newColorCode)){\r\n                \r\n                this.setState(st => ({\r\n                    colors: [...st.colors,  toAdd],\r\n                    size: size+1,\r\n                    name: \"\",\r\n                    color: \"\",\r\n                    bgColor: \"rgb(220, 0, 78)\",\r\n                    disabled: false,\r\n                }))\r\n                this.hasColor.add(newColorCode);\r\n                console.log(this.hasColor);\r\n            } else {\r\n                // if there is a duplicate, alert the message\r\n                alert(\"That color exists! Please choose another color!\")\r\n            }\r\n        // if max number of colors is reached, disable the buttons\r\n        } else if(this.state.size === this.props.maxColors){\r\n            \r\n            this.setState(st =>({\r\n                // colors: [...st.colors],\r\n                // name: \"\",\r\n                // color:\"\",\r\n                bgColor: \"rgba(0, 0, 0, 0.12)\",\r\n                disabled: true,\r\n            }))\r\n        }\r\n    }\r\n   \r\n// open modal form for palette name\r\n    handleClickOpen() {\r\n        this.setState({\r\n            open: true,\r\n        })\r\n    \r\n    }\r\n\r\n// close modal form\r\n    handleClose(evt) {\r\n        this.setState({\r\n            open:false,\r\n        })\r\n    }\r\n\r\n// when save is clicked, palette is added to the palette list\r\n    handleSave(){\r\n        this.addPaletteToPaletteList();\r\n        this.setState({\r\n            open:false,\r\n        })\r\n    }\r\n// set the palette name with modal form\r\n    paletteName(evt){\r\n        this.setState({\r\n            paletteName: evt.target.value, \r\n        })\r\n    }\r\n\r\n// random color  \r\n    chooseRandomColor(){\r\n        let newColor = chroma.random().hex();\r\n        if(!this.hasColor.has(newColor)){\r\n            this.setState({\r\n                color: newColor,\r\n                bgColor: newColor,\r\n            })\r\n            // this.hasColor.add(newColor);\r\n        }else {\r\n            alert(\"That color exists! Please choose another random color!\")\r\n        }\r\n      \r\n    }\r\n\r\n// clear the palette\r\n    clearPalette(){\r\n        this.setState({\r\n            colors: []\r\n        })\r\n    }\r\n\r\n    onBeforeDragStart = () => {\r\n        /*...*/\r\n      };\r\n    \r\n      onDragStart = () => {\r\n        /*...*/\r\n      };\r\n      onDragUpdate = () => {\r\n        /*...*/\r\n      };\r\n      onDragEnd = () => {\r\n        // the only one that is required\r\n      };\r\n      toggleColorPicker(){\r\n          this.setState(st=>({\r\n              leftOpen: !st.leftOpen,\r\n          }))\r\n      }\r\n    render(){\r\n        const {bgColor, color, name, open, paletteName, colors, disabled, leftOpen} =  this.state;\r\n        // set the text color, based on the contrast with the background\r\n        const textColor = chroma.contrast(bgColor, 'white') >= 4.5 ? \"white\" : \"black\"\r\n        return(\r\n            <div className = \"NewPaletteForm\" >\r\n                <Drawer id=\"ColorPicker-drawer\" open={leftOpen}>\r\n                    <div className=\"color-picker\">\r\n                        {/* <Button id=\"LeftArrow\" size=\"small\" color=\"inherit\" onClick={this.toggleColorPicker}> */}\r\n                            <i id=\"LeftArrow\"  onClick={this.toggleColorPicker} className=\"fas fa-angle-double-left\"></i>\r\n                        {/* </Button> */}\r\n                    \r\n                        <h3>Design Your Palette</h3>\r\n                        <div className=\"color-picker-buttons\">\r\n                            <Button variant=\"contained\" color=\"primary\" onClick={this.chooseRandomColor} disabled={disabled}>\r\n                                Random Color\r\n                            </Button>\r\n                            <Button variant=\"contained\" color=\"secondary\" onClick={this.clearPalette}>\r\n                                Clear Palette\r\n                            </Button>\r\n                        </div>\r\n                        <ChromePicker color={color}\r\n                            onChangeComplete = {this.handleChange}\r\n                        />\r\n                        <form onSubmit = {this.handleSubmit}>  \r\n                            <TextField\r\n                                required\r\n                                id=\"filled-with-placeholder\"\r\n                                label=\"Color Name\"\r\n                                placeholder=\"Color Name\"\r\n                                margin=\"normal\"\r\n                                variant=\"filled\"\r\n                                value = {name}\r\n                                name=\"name\"\r\n                                onChange={this.addColorName}\r\n                                disabled={disabled}\r\n                            />\r\n                            <Button className=\"addColor-btn\" onClick = {this.addColor} \r\n                                    style={{backgroundColor: disabled ? \"rgba(0, 0, 0, 0.12)\" : bgColor, color: textColor}} \r\n                                    disabled={disabled}\r\n                            >\r\n                                Add Color\r\n                            </Button>\r\n                        </form>\r\n                    </div>\r\n                </Drawer>\r\n\r\n                <div className={`${leftOpen ? 'color-container active' : \"color-container\"}`}>\r\n                    <div className=\"color-container-navbar\">\r\n                    {/* <Button size=\"small\" color=\"inherit\" className={`${leftOpen ? \"hidden\" : \"visible\" }`} onClick={this.toggleColorPicker}> */}\r\n                        <i id=\"RightArrow\" onClick={this.toggleColorPicker} className={`${leftOpen ? \"fas fa-angle-double-right hidden\" : \"fas fa-angle-double-right\" }`} ></i>\r\n                    {/* </Button> */}\r\n                        <h5>Create A Palette</h5>\r\n                        <div className=\"navbar-button\">\r\n                            <Button variant=\"contained\" color=\"primary\">\r\n                                <Link to = \"/\"> Go Back</Link>\r\n                            </Button>\r\n                            \r\n                            <Button variant=\"contained\" color=\"secondary\" onClick={this.handleClickOpen}>\r\n                                Save\r\n                            </Button>\r\n                        </div>\r\n                        \r\n                    </div>\r\n                    <Dialog id=\"paletteNameModal\" open={open} onClose={this.handleClose} aria-labelledby=\"form-dialog-title\">\r\n                        <DialogTitle id=\"form-dialog-title\"> Add Palette Name</DialogTitle>\r\n\r\n                        <DialogContent>\r\n                            <DialogContentText>\r\n                                Please Add Palette Name\r\n                            </DialogContentText>\r\n\r\n                            <TextField\r\n                                autoFocus\r\n                                margin=\"dense\"\r\n                                id=\"name\"\r\n                                value={paletteName}\r\n                                label=\"Palette Name\"\r\n                                type=\"name\"\r\n                                fullWidth\r\n                                onChange = {this.paletteName}\r\n                            />\r\n                        </DialogContent>\r\n\r\n                        <DialogActions>\r\n                            <Button onClick={this.handleClose} color=\"primary\">\r\n                                Cancel\r\n                            </Button>\r\n                            <Button onClick={this.handleSave } color=\"primary\">\r\n                                Save\r\n                            </Button>\r\n                        </DialogActions>\r\n                    </Dialog>\r\n                    {/* <Dialog open={open} onClose={this.handleClose} aria-labelledby=\"form-dialog-title\">\r\n                        <DialogContent>\r\n                            <Picker onSelect={this.addEmoji} />\r\n                        </DialogContent>\r\n                        <DialogActions>\r\n                            <Button onClick={this.handleClose} color=\"primary\">\r\n                                Chose Emoji\r\n                            </Button>\r\n                            {/* <Button onClick={this.handleSave } color=\"primary\">\r\n                                Save\r\n                            </Button> */}\r\n                        {/* </DialogActions> */}\r\n                        \r\n                    {/* </Dialog> */} \r\n                    <div className=\"color-container-palette\">\r\n                        <DragDropContext   \r\n                                    onBeforeDragStart={this.onBeforeDragStart}\r\n                                    onDragStart={this.onDragStart}\r\n                                    onDragUpdate={this.onDragUpdate}\r\n                                    onDragEnd={this.onDragEnd}> \r\n                        {colors.map(color => (\r\n                            \r\n                                <ColorBox\r\n                                    bgColor = {\r\n                                        (this.props.format === 'hex' &&  chroma(color.color).hex()) ||\r\n                                        (this.props.format === \"rgb\" && chroma(color.color).css()) ||\r\n                                        (this.props.format === \"rgba\" && chroma(color.color).alpha(0.9).css())                                                             \r\n                                    }\r\n                                    colorName = {color.name}\r\n                                    key={uuid()}\r\n                                    format = {this.props.format}\r\n                                />\r\n                           \r\n                              \r\n                        ))}\r\n                    </DragDropContext>\r\n                    </div>\r\n                </div>\r\n               \r\n            </div>\r\n         \r\n        )\r\n    }\r\n}\r\n\r\nexport default NewPaletteForm;"]},"metadata":{},"sourceType":"module"}