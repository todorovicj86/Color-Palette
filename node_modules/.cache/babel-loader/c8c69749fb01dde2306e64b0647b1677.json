{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\todor\\\\Documents\\\\4-Web Development\\\\1-Web Development Courses\\\\3-REACT\\\\25-Color Palette\\\\color-palette\\\\src\\\\Routes.js\";\nimport React, { Component } from 'react';\nimport { Route, Switch, Redirect } from 'react-router-dom';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport seedColors from './seedColors';\nimport ColorPalette from './ColorPalette';\nimport ColorPaletteList from './ColorPaletteList';\nimport PaletteShades from './PaletteShades';\nimport MakeNewPalette from './MakeNewPalette';\nimport Page from './Page';\nimport { getPaletteShades } from './helpers';\n\nclass Routes extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      format: \"hex\",\n      copied: false,\n      colorPalettes: JSON.parse(window.localStorage.getItem(\"palettes\") || \"[]\")\n    };\n    this.handleFormat = this.handleFormat.bind(this);\n    this.onCopy = this.onCopy.bind(this);\n    this.removePalette = this.removePalette.bind(this);\n    this.savePalette = this.savePalette.bind(this);\n  }\n\n  async getPalettes() {\n    let palette = seedColors;\n    this.setState(st => ({\n      colorPalettes: [...st.colorPalettes, ...palette]\n    }), () => window.localStorage.setItem(\"palettes\", JSON.stringify(this.state.colorPalettes)));\n  }\n\n  componentDidMount() {\n    if (this.state.colorPalettes.length === 0) {\n      this.getPalettes();\n    }\n  }\n\n  handleFormat(value) {\n    this.setState({\n      format: value\n    });\n  }\n\n  onCopy(value) {\n    this.setState({\n      copied: value\n    });\n  }\n\n  removePalette(id) {\n    const oldPalette = [...this.state.colorPalettes];\n    const newPalette = oldPalette.filter(item => item.id !== id);\n    this.setState({\n      colorPalettes: newPalette\n    }, () => window.localStorage.setItem(\"palettes\", JSON.stringify(this.state.colorPalettes)));\n  }\n\n  savePalette(newPalette) {\n    const palettes = this.state.colorPalettes;\n    palettes.push(newPalette);\n    window.localStorage.setItem(\"palettes\", JSON.stringify(palettes));\n  }\n\n  render() {\n    const getPalette = props => {\n      let name = props.match.params.name;\n      let currentPalette = this.state.colorPalettes.find(palette => palette.id === name);\n      return React.createElement(\"div\", {\n        className: \"page\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, React.createElement(ColorPalette, Object.assign({}, props, {\n        palette: getPaletteShades(currentPalette),\n        format: this.state.format,\n        handleFormat: this.handleFormat,\n        onCopy: this.onCopy,\n        sliderMarks: this.props.marks,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      })));\n    };\n\n    const getColorShades = props => {\n      let name = props.match.params.name;\n      let colorName = props.match.params.colorName;\n      let currentPalette = this.state.colorPalettes.find(palette => palette.id === name);\n      let currentColor = currentPalette.colors.find(color => color.name === colorName);\n      return React.createElement(\"div\", {\n        className: \"page\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, React.createElement(PaletteShades, Object.assign({}, props, {\n        color: currentColor,\n        palette: currentPalette,\n        format: this.state.format,\n        handleFormat: this.handleFormat,\n        onCopy: this.onCopy,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      })));\n    };\n\n    const _this$state = this.state,\n          colorPalettes = _this$state.colorPalettes,\n          format = _this$state.format;\n    return React.createElement(Route, {\n      render: ({\n        location\n      }) => React.createElement(TransitionGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }, React.createElement(CSSTransition, {\n        classNames: \"fade\",\n        timeout: 500,\n        key: location.key,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }, React.createElement(Switch, {\n        location: location,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, React.createElement(Route, {\n        exact: true,\n        path: \"/palette/new\",\n        render: routProps => React.createElement(Page, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 137\n          },\n          __self: this\n        }, React.createElement(MakeNewPalette, Object.assign({\n          format: format,\n          palettes: colorPalettes,\n          savePalette: this.savePalette\n        }, routProps, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 138\n          },\n          __self: this\n        }))),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }), React.createElement(Route, {\n        exact: true,\n        path: \"/\",\n        render: routProps => React.createElement(Page, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 152\n          },\n          __self: this\n        }, React.createElement(ColorPaletteList, Object.assign({\n          colorPalettes: colorPalettes,\n          removePalette: this.removePalette\n        }, routProps, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 153\n          },\n          __self: this\n        }))),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      }), React.createElement(Route, {\n        exact: true,\n        path: \"/palette/:name\",\n        render: getPalette,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      }), React.createElement(Route, {\n        exact: true,\n        path: \"/palette/:name/:colorName\",\n        render: getColorShades,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }), React.createElement(Redirect, {\n        to: \"/\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168\n        },\n        __self: this\n      })))),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    });\n  }\n\n}\n\nRoutes.defaultProps = {\n  // colorPalettes: seedColors,\n  marks: {\n    50: \"50\",\n    100: \"100\",\n    200: \"200\",\n    300: \"300\",\n    400: \"400\",\n    500: \"500\",\n    600: \"600\",\n    700: \"700\",\n    800: \"800\",\n    900: \"900\"\n  }\n};\nexport default Routes;","map":{"version":3,"sources":["C:\\Users\\todor\\Documents\\4-Web Development\\1-Web Development Courses\\3-REACT\\25-Color Palette\\color-palette\\src\\Routes.js"],"names":["React","Component","Route","Switch","Redirect","CSSTransition","TransitionGroup","seedColors","ColorPalette","ColorPaletteList","PaletteShades","MakeNewPalette","Page","getPaletteShades","Routes","constructor","props","state","format","copied","colorPalettes","JSON","parse","window","localStorage","getItem","handleFormat","bind","onCopy","removePalette","savePalette","getPalettes","palette","setState","st","setItem","stringify","componentDidMount","length","value","id","oldPalette","newPalette","filter","item","palettes","push","render","getPalette","name","match","params","currentPalette","find","marks","getColorShades","colorName","currentColor","colors","color","location","key","routProps","defaultProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Route, Switch, Redirect } from 'react-router-dom'\r\nimport { CSSTransition, TransitionGroup} from 'react-transition-group';\r\nimport seedColors from './seedColors'\r\nimport ColorPalette from './ColorPalette'\r\nimport ColorPaletteList from './ColorPaletteList'\r\nimport PaletteShades from './PaletteShades'\r\nimport MakeNewPalette from './MakeNewPalette'\r\nimport Page from './Page'\r\nimport {getPaletteShades} from './helpers'\r\n\r\nclass Routes extends Component {\r\n    static defaultProps = {\r\n        // colorPalettes: seedColors,\r\n        marks: {50: \"50\", 100: \"100\", 200: \"200\", 300: \"300\", 400: \"400\", 500: \"500\", 600: \"600\", 700: \"700\", 800: \"800\", 900: \"900\"}\r\n    }\r\n      constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            format: \"hex\",\r\n            copied: false,\r\n            colorPalettes: JSON.parse(window.localStorage.getItem(\"palettes\") || \"[]\")\r\n        }\r\n    \r\n        this.handleFormat = this.handleFormat.bind(this)\r\n        this.onCopy = this.onCopy.bind(this)\r\n        this.removePalette = this.removePalette.bind(this)\r\n        this.savePalette = this.savePalette.bind(this)\r\n      }\r\n\r\n      async getPalettes(){\r\n        let palette = seedColors;\r\n        this.setState(\r\n          st => ({\r\n            colorPalettes: [...st.colorPalettes, ...palette]\r\n          }),\r\n          () => window.localStorage.setItem(\"palettes\", JSON.stringify(this.state.colorPalettes))\r\n        );\r\n      }\r\n\r\n      componentDidMount(){\r\n  \r\n        if(this.state.colorPalettes.length === 0){\r\n          this.getPalettes()\r\n        }      \r\n        \r\n      }\r\n\r\n      handleFormat(value){\r\n          this.setState({\r\n              format: value,\r\n          })\r\n      }\r\n      onCopy(value){\r\n        this.setState({\r\n          copied: value\r\n        })\r\n      }\r\n\r\n    removePalette(id){\r\n      const oldPalette = [...this.state.colorPalettes];\r\n\r\n      const newPalette = oldPalette.filter(item => item.id !== id);\r\n\r\n      this.setState({\r\n          colorPalettes: newPalette,\r\n      }, () => window.localStorage.setItem(\"palettes\", JSON.stringify(this.state.colorPalettes)))\r\n  }\r\n\r\n  savePalette(newPalette){\r\n    const palettes = this.state.colorPalettes;\r\n    palettes.push(newPalette);\r\n    window.localStorage.setItem(\"palettes\", JSON.stringify(palettes))\r\n  }\r\n    \r\n  \r\n    render(){\r\n        const getPalette = props => {\r\n            let name = props.match.params.name;\r\n                 \r\n            let currentPalette = this.state.colorPalettes.find(\r\n              palette => palette.id === name\r\n              \r\n            );\r\n            return(\r\n              <div className=\"page\">\r\n                <ColorPalette \r\n                  {...props} \r\n                  palette={getPaletteShades(currentPalette)} \r\n                  format={this.state.format} \r\n                  handleFormat = {this.handleFormat}\r\n                  onCopy = {this.onCopy} \r\n                  sliderMarks = {this.props.marks}\r\n                  />\r\n              </div>\r\n            )\r\n        };\r\n      \r\n        const getColorShades = props => {\r\n            let name = props.match.params.name;\r\n            let colorName = props.match.params.colorName;\r\n                     \r\n            let currentPalette = this.state.colorPalettes.find( \r\n              palette => palette.id === name\r\n            )\r\n            let currentColor = currentPalette.colors.find(\r\n              color => color.name === colorName\r\n              \r\n            )\r\n      \r\n            return( \r\n              <div className=\"page\">\r\n                <PaletteShades \r\n                  {...props} \r\n                  color={currentColor} \r\n                  palette = {currentPalette} \r\n                  format={this.state.format} \r\n                  handleFormat = {this.handleFormat}\r\n                  onCopy = {this.onCopy} \r\n                />\r\n              </div>\r\n            )\r\n        }\r\n\r\n        const {colorPalettes, format } = this.state;\r\n\r\n        return(\r\n          <Route \r\n            render={({location}) => (\r\n              <TransitionGroup>\r\n                <CSSTransition classNames=\"fade\" timeout={500} key={location.key}>\r\n                  <Switch location={location}>\r\n                    <Route \r\n                      exact \r\n                      path = \"/palette/new\" \r\n                      render= {(routProps) => (\r\n                        <Page>\r\n                          <MakeNewPalette \r\n                            format={format}\r\n                            palettes={colorPalettes} \r\n                            savePalette={this.savePalette} \r\n                            {...routProps}/>\r\n                        </Page>\r\n                      )}\r\n                    />\r\n                        \r\n                      \r\n                    <Route \r\n                      exact \r\n                      path=\"/\" \r\n                      render = {(routProps) => (\r\n                        <Page>\r\n                          <ColorPaletteList \r\n                            colorPalettes={colorPalettes} \r\n                            removePalette = {this.removePalette} \r\n                            {...routProps}/>\r\n                        </Page>\r\n                      )} \r\n                    />\r\n                    <Route \r\n                      exact \r\n                      path = \"/palette/:name\"\r\n                      render = {getPalette} />\r\n                    <Route \r\n                      exact \r\n                      path = '/palette/:name/:colorName' \r\n                      render ={getColorShades} />\r\n                    <Redirect to = \"/\" />\r\n                  </Switch>\r\n                </CSSTransition>\r\n            </TransitionGroup>\r\n            )}\r\n          />\r\n      \r\n        )\r\n    }\r\n}\r\n\r\nexport default Routes;"]},"metadata":{},"sourceType":"module"}