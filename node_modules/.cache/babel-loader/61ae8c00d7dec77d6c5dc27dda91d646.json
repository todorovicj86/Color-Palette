{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\todor\\\\Documents\\\\4-Web Development\\\\1-Web Development Courses\\\\3-REACT\\\\25-Color Palette\\\\color-palette\\\\src\\\\FormNavbar.js\";\nimport React, { Component } from 'react';\nimport { ChromePicker } from 'react-color';\nimport { Link } from 'react-router-dom';\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\nimport classNames from 'classnames';\nimport { withStyles } from '@material-ui/core/styles';\nimport Drawer from '@material-ui/core/Drawer';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@icons/material/MenuIcon';\nimport ChevronLeftIcon from '@icons/material/ChevronLeftIcon';\nimport Button from '@material-ui/core/Button';\nimport { Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle } from '@material-ui/core';\nimport { Picker } from 'emoji-mart';\nimport DraggableColorBoxList from './DraggableColorBoxList';\nimport { arrayMove } from 'react-sortable-hoc';\nimport chroma from 'chroma-js';\n\nclass FormNavbar extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleDrawerOpen = () => {\n      this.setState({\n        open: true\n      });\n    };\n\n    this.state = {\n      open: true,\n      currentColor: \"teal\",\n      newColorName: \"\",\n      // colors: this.props.palettes[0].colors,\n      paletteName: \"\",\n      id: \"\",\n      emoji: \"\",\n      openModal: false,\n      openEmoji: false // this.handleColorPickerChange = this.handleColorPickerChange.bind(this)\n      // this.addNewColor = this.addNewColor.bind(this)\n      // this.savePalette = this.savePalette.bind(this)\n      // this.cancelSave = this.cancelSave.bind(this)\n\n    };\n    this.openModal = this.openModal.bind(this); // this.handleChange = this.handleChange.bind(this)\n    // this.deleteBox = this.deleteBox.bind(this)\n    // this.clearPalette = this.clearPalette.bind(this)\n    // this.chooseRandomColor = this.chooseRandomColor.bind(this);\n  }\n\n  render() {\n    const _this$props = this.props,\n          classes = _this$props.classes,\n          maxColors = _this$props.maxColors,\n          open = _this$props.open;\n    const _this$state = this.state,\n          currentColor = _this$state.currentColor,\n          colors = _this$state.colors,\n          newColorName = _this$state.newColorName,\n          openModal = _this$state.openModal,\n          openEmoji = _this$state.openEmoji,\n          paletteName = _this$state.paletteName;\n    const paletteIsFull = colors.length >= maxColors;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, React.createElement(CssBaseline, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }), React.createElement(AppBar, {\n      color: \"default\",\n      position: \"fixed\",\n      className: classNames(classes.appBar, {\n        [classes.appBarShift]: open\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, React.createElement(Toolbar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, React.createElement(IconButton, {\n      color: \"inherit\",\n      \"aria-label\": \"open drawer\",\n      onClick: this.handleDrawerOpen,\n      edge: \"start\",\n      className: classNames(classes.menuButton, open && classes.hide),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, React.createElement(MenuIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    })), React.createElement(Typography, {\n      variant: \"h6\",\n      noWrap: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, \"Create A Palette\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, React.createElement(Link, {\n      className: classes.goBackLink,\n      to: \"/\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"contained\",\n      color: \"secondary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, \"Go Back\")), React.createElement(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: this.openModal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, \"Save Palette\")))));\n  }\n\n}\n\nexport default FormNavbar;","map":{"version":3,"sources":["C:\\Users\\todor\\Documents\\4-Web Development\\1-Web Development Courses\\3-REACT\\25-Color Palette\\color-palette\\src\\FormNavbar.js"],"names":["React","Component","ChromePicker","Link","ValidatorForm","TextValidator","classNames","withStyles","Drawer","CssBaseline","AppBar","Toolbar","Typography","Divider","IconButton","MenuIcon","ChevronLeftIcon","Button","Dialog","DialogActions","DialogContent","DialogContentText","DialogTitle","Picker","DraggableColorBoxList","arrayMove","chroma","FormNavbar","constructor","props","handleDrawerOpen","setState","open","state","currentColor","newColorName","paletteName","id","emoji","openModal","openEmoji","bind","render","classes","maxColors","colors","paletteIsFull","length","appBar","appBarShift","menuButton","hide","goBackLink"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport {ChromePicker} from 'react-color'\r\nimport {Link} from 'react-router-dom'\r\nimport { ValidatorForm, TextValidator} from 'react-material-ui-form-validator';\r\nimport classNames from 'classnames'\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@icons/material/MenuIcon';\r\nimport ChevronLeftIcon from '@icons/material/ChevronLeftIcon';\r\nimport Button from '@material-ui/core/Button';\r\nimport {Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle } from '@material-ui/core'\r\nimport { Picker } from 'emoji-mart'\r\nimport DraggableColorBoxList from './DraggableColorBoxList'\r\nimport {arrayMove} from 'react-sortable-hoc';\r\nimport chroma from 'chroma-js'\r\n\r\nclass FormNavbar extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            open: true,\r\n            currentColor: \"teal\",\r\n            newColorName: \"\",\r\n            // colors: this.props.palettes[0].colors,\r\n            paletteName:\"\",\r\n            id:\"\",\r\n            emoji:\"\",\r\n            openModal: false,\r\n            openEmoji: false,\r\n        }\r\n        \r\n        // this.handleColorPickerChange = this.handleColorPickerChange.bind(this)\r\n        // this.addNewColor = this.addNewColor.bind(this)\r\n        // this.savePalette = this.savePalette.bind(this)\r\n        // this.cancelSave = this.cancelSave.bind(this)\r\n        this.openModal = this.openModal.bind(this)\r\n        // this.handleChange = this.handleChange.bind(this)\r\n        // this.deleteBox = this.deleteBox.bind(this)\r\n        // this.clearPalette = this.clearPalette.bind(this)\r\n        // this.chooseRandomColor = this.chooseRandomColor.bind(this);\r\n    }\r\n    handleDrawerOpen = () => {\r\n        this.setState({open: true});\r\n      };\r\n\r\n    render(){\r\n        const {classes, maxColors, open} = this.props;\r\n        const {currentColor, colors, newColorName, openModal, openEmoji, paletteName} = this.state;\r\n        const paletteIsFull = colors.length >= maxColors;\r\n        return(\r\n            <div>\r\n                <CssBaseline />\r\n               <AppBar\r\n                  color=\"default\"\r\n                    position=\"fixed\"\r\n                    className={classNames(classes.appBar, {\r\n                        [classes.appBarShift]: open,\r\n                    })}\r\n                >\r\n                    <Toolbar>\r\n                        <IconButton\r\n                            color=\"inherit\"\r\n                            aria-label=\"open drawer\"\r\n                            onClick={this.handleDrawerOpen}\r\n                            edge=\"start\"\r\n                            className={classNames(classes.menuButton, open && classes.hide)}\r\n                        >\r\n                            <MenuIcon />\r\n                        </IconButton>\r\n                        <Typography variant=\"h6\" noWrap>\r\n                            Create A Palette\r\n                        </Typography>\r\n                        <div>\r\n                          <Link className={classes.goBackLink} to = \"/\">\r\n                            <Button variant=\"contained\" color=\"secondary\">\r\n                                Go Back\r\n                            </Button>\r\n                          </Link>\r\n                            \r\n                            <Button variant=\"contained\" color=\"primary\" onClick={this.openModal}>\r\n                                Save Palette\r\n                            </Button>\r\n                        </div>\r\n                    </Toolbar>\r\n                 \r\n                </AppBar>\r\n\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default FormNavbar;"]},"metadata":{},"sourceType":"module"}