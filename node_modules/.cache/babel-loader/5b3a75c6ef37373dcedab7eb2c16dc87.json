{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\todor\\\\Documents\\\\4-Web Development\\\\1-Web Development Courses\\\\3-REACT\\\\25-Color Palette\\\\color-palette\\\\src\\\\ModalDialog.js\";\nimport React, { Component } from 'react';\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\nimport Button from '@material-ui/core/Button';\nimport { Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle } from '@material-ui/core';\nimport { Picker } from 'emoji-mart';\nimport 'emoji-mart/css/emoji-mart.css';\n\nclass ModalDialog extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      paletteName: \"\",\n      emoji: \"\",\n      openEmoji: false\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.savePalette = this.savePalette.bind(this);\n  }\n\n  componentDidMount() {\n    // validate if the palette name is unique\n    ValidatorForm.addValidationRule('isPaletteNameUnique', value => this.props.palettes.every(({\n      paletteName\n    }) => paletteName.toLocaleLowerCase() !== value.toLocaleLowerCase()));\n  }\n\n  handleChange(evt) {\n    this.setState({\n      [evt.target.name]: evt.target.value\n    });\n  }\n\n  savePalette(emojiIcon) {\n    this.setState({\n      openEmoji: false\n    });\n    this.props.savePalette(this.state.paletteName, emojiIcon.native);\n  }\n\n  render() {\n    const paletteName = this.state.paletteName;\n    const _this$props = this.props,\n          openModal = _this$props.openModal,\n          cancelSave = _this$props.cancelSave,\n          openEmoji = _this$props.openEmoji,\n          openEmojiModal = _this$props.openEmojiModal;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, React.createElement(Dialog, {\n      id: \"paletteNameModal\",\n      open: openModal,\n      onClose: cancelSave,\n      \"aria-labelledby\": \"form-dialog-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, React.createElement(DialogTitle, {\n      id: \"form-dialog-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, \" Add Palette Name\"), React.createElement(DialogContent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, React.createElement(DialogContentText, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, \"Please Add Palette Name\"), React.createElement(ValidatorForm // onSubmit={() => this.props.savePalette(paletteName)}\n    , {\n      onSubmit: openEmojiModal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, React.createElement(TextValidator, {\n      value: paletteName,\n      onChange: this.handleChange,\n      name: \"paletteName\",\n      validators: ['required', 'isPaletteNameUnique'],\n      errorMessages: ['This field is required. Enter a palette name!', 'Palette name must be unique!'],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }), React.createElement(DialogActions, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, React.createElement(Button, {\n      onClick: cancelSave,\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, \"Cancel\"), React.createElement(Button, {\n      type: \"submit\",\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, \"Save\"))))), React.createElement(Dialog, {\n      open: openEmoji,\n      onClose: cancelSave,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, React.createElement(DialogTitle, {\n      id: \"form-dialog-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, \" Pick A Palette Emoji \"), React.createElement(Picker, {\n      title: \"Pick A Palette Emoji\",\n      onSelect: this.savePalette,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default ModalDialog;","map":{"version":3,"sources":["C:\\Users\\todor\\Documents\\4-Web Development\\1-Web Development Courses\\3-REACT\\25-Color Palette\\color-palette\\src\\ModalDialog.js"],"names":["React","Component","ValidatorForm","TextValidator","Button","Dialog","DialogActions","DialogContent","DialogContentText","DialogTitle","Picker","ModalDialog","constructor","props","state","paletteName","emoji","openEmoji","handleChange","bind","savePalette","componentDidMount","addValidationRule","value","palettes","every","toLocaleLowerCase","evt","setState","target","name","emojiIcon","native","render","openModal","cancelSave","openEmojiModal"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { ValidatorForm, TextValidator} from 'react-material-ui-form-validator';\r\nimport Button from '@material-ui/core/Button';\r\nimport {Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle } from '@material-ui/core'\r\nimport { Picker } from 'emoji-mart'\r\nimport 'emoji-mart/css/emoji-mart.css'\r\n\r\nclass ModalDialog extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            paletteName: \"\",\r\n            emoji:\"\",\r\n            openEmoji: false,\r\n        }\r\n\r\n        this.handleChange = this.handleChange.bind(this)\r\n        this.savePalette = this.savePalette.bind(this)\r\n   \r\n        \r\n    }\r\n\r\n    componentDidMount() {\r\n        // validate if the palette name is unique\r\n        ValidatorForm.addValidationRule('isPaletteNameUnique', value =>       \r\n            this.props.palettes.every(({ paletteName } ) => paletteName.toLocaleLowerCase() !== value.toLocaleLowerCase())\r\n        );\r\n    \r\n    }\r\n\r\n    handleChange(evt){\r\n        this.setState({\r\n          [evt.target.name]: evt.target.value,\r\n        })\r\n    }\r\n\r\n   savePalette(emojiIcon){\r\n    this.setState({\r\n        openEmoji: false,\r\n    })\r\n      this.props.savePalette(this.state.paletteName, emojiIcon.native)\r\n     \r\n    }\r\n\r\n    render(){\r\n        const {paletteName,} = this.state;\r\n        const {openModal, cancelSave, openEmoji, openEmojiModal} = this.props;\r\n        return(\r\n            <div>\r\n                <Dialog id=\"paletteNameModal\" open={openModal} onClose={cancelSave} aria-labelledby=\"form-dialog-title\">\r\n                    <DialogTitle id=\"form-dialog-title\"> Add Palette Name</DialogTitle>\r\n\r\n                    <DialogContent>\r\n                        \r\n                        <DialogContentText>\r\n                            Please Add Palette Name\r\n                        </DialogContentText>\r\n\r\n                        \r\n\r\n                        <ValidatorForm \r\n                            // onSubmit={() => this.props.savePalette(paletteName)}\r\n                            onSubmit={openEmojiModal}\r\n                            >\r\n                            <TextValidator \r\n                                value={paletteName}\r\n                                onChange={this.handleChange}\r\n                                name=\"paletteName\"\r\n                                validators={[\r\n                                    'required', \r\n                                    'isPaletteNameUnique',\r\n                                ]}\r\n                                errorMessages={[\r\n                                'This field is required. Enter a palette name!', \r\n                                'Palette name must be unique!', \r\n                                ]}\r\n\r\n                                />\r\n                            <DialogActions>\r\n                                <Button onClick={cancelSave} color=\"primary\">\r\n                                    Cancel\r\n                                </Button>\r\n                                <Button type=\"submit\" color=\"primary\">\r\n                                    Save\r\n                                </Button>\r\n                            </DialogActions>\r\n                        </ValidatorForm>\r\n                       \r\n                    </DialogContent>\r\n                       \r\n                </Dialog>\r\n\r\n                <Dialog open={openEmoji} onClose={cancelSave}>\r\n                <DialogTitle id=\"form-dialog-title\"> Pick A Palette Emoji </DialogTitle>\r\n                    <Picker\r\n                        title=\"Pick A Palette Emoji\" \r\n                        onSelect = {this.savePalette} \r\n\r\n                    />  \r\n                </Dialog>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ModalDialog;"]},"metadata":{},"sourceType":"module"}