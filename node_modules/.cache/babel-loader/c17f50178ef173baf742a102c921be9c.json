{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\todor\\\\Documents\\\\4-Web Development\\\\1-Web Development Courses\\\\3-REACT\\\\25-Color Palette\\\\color-palette\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"C:\\\\Users\\\\todor\\\\Documents\\\\4-Web Development\\\\1-Web Development Courses\\\\3-REACT\\\\25-Color Palette\\\\color-palette\\\\src\\\\MakeNewPalette.js\";\nimport React, { Component } from 'react';\nimport { ChromePicker } from 'react-color';\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\nimport { arrayMove } from 'react-sortable-hoc';\nimport classNames from 'classnames';\nimport { withStyles } from '@material-ui/core/styles';\nimport Drawer from '@material-ui/core/Drawer';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport ChevronLeftIcon from '@icons/material/ChevronLeftIcon';\nimport Button from '@material-ui/core/Button';\nimport DraggableColorBoxList from './DraggableColorBoxList';\nimport Typography from '@material-ui/core/Typography';\nimport chroma from 'chroma-js';\nimport FormNavbar from './FormNavbar';\nimport ColorPicker from './ColorPicker';\nconst drawerWidth = 400;\n\nconst styles = theme => ({\n  root: {\n    display: 'flex'\n  },\n  appBar: {\n    transition: theme.transitions.create(['margin', 'width'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen\n    })\n  },\n  appBarShift: {\n    width: \"calc(100% - \".concat(drawerWidth, \"px)\"),\n    marginLeft: drawerWidth,\n    transition: theme.transitions.create(['margin', 'width'], {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen\n    })\n  },\n  menuButton: {\n    marginRight: theme.spacing(2)\n  },\n  hide: {\n    display: 'none'\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0\n  },\n  drawerPaper: {\n    width: drawerWidth\n  },\n  drawerHeader: _objectSpread({\n    display: 'flex',\n    alignItems: 'center',\n    padding: theme.spacing(0, 1)\n  }, theme.mixins.toolbar, {\n    justifyContent: 'flex-end'\n  }),\n  content: {\n    flexGrow: 1,\n    height: \"calc(100vh - 64px)\",\n    padding: theme.spacing(0),\n    transition: theme.transitions.create('margin', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen\n    }),\n    marginLeft: -drawerWidth\n  },\n  contentShift: {\n    transition: theme.transitions.create('margin', {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen\n    }),\n    marginLeft: 0\n  },\n  goBackLink: {\n    \"&:hover\": {\n      textDecoration: \"none\"\n    }\n  }\n});\n\nclass MakeNewPalette extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleDrawerOpen = () => {\n      this.setState({\n        open: true\n      });\n    };\n\n    this.handleDrawerClose = () => {\n      this.setState({\n        open: false\n      });\n    };\n\n    this.onSortEnd = ({\n      oldIndex,\n      newIndex\n    }) => {\n      this.setState(({\n        colors\n      }) => ({\n        colors: arrayMove(colors, oldIndex, newIndex)\n      }));\n    };\n\n    this.state = {\n      open: true,\n      currentColor: \"teal\",\n      newColorName: \"\",\n      colors: this.props.palettes[0].colors,\n      paletteName: \"\",\n      id: \"\",\n      emoji: \"\",\n      openEmoji: false\n    };\n    this.colorsSet = new Set(this.state.colors.map(colors => colors.color));\n    this.handleColorPickerChange = this.handleColorPickerChange.bind(this);\n    this.addNewColor = this.addNewColor.bind(this);\n    this.savePalette = this.savePalette.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.deleteBox = this.deleteBox.bind(this);\n    this.clearPalette = this.clearPalette.bind(this);\n    this.chooseRandomColor = this.chooseRandomColor.bind(this);\n  }\n\n  componentDidMount() {\n    // validate if the color name is unique\n    ValidatorForm.addValidationRule('isColorNameUnique', value => this.state.colors.every(({\n      name\n    }) => name.toLowerCase() !== value.toLowerCase())); //  validate if the color is unique\n\n    ValidatorForm.addValidationRule('isColorUnique', value => this.state.colors.every(({\n      color\n    }) => color !== this.state.currentColor)); // validate if the palette name is unique\n\n    ValidatorForm.addValidationRule('isPaletteNameUnique', value => this.props.palettes.every(({\n      paletteName\n    }) => paletteName.toLocaleLowerCase() !== value.toLocaleLowerCase()));\n  }\n\n  handleColorPickerChange(newColor) {\n    this.setState({\n      currentColor: newColor.hex\n    });\n  }\n\n  addNewColor(newColorObj) {\n    // const newColorObj = {\n    //   name: this.state.newColorName,\n    //   color: this.state.currentColor,\n    // }\n    this.setState({\n      colors: [...this.state.colors, newColorObj] // newColorName: \"\",\n\n    });\n  }\n\n  savePalette() {\n    const _this$state = this.state,\n          paletteName = _this$state.paletteName,\n          emoji = _this$state.emoji,\n          colors = _this$state.colors;\n    let id = this.state.paletteName.toLocaleLowerCase().split(' ').join('-');\n    const newPalette = {\n      paletteName: paletteName,\n      id: id,\n      emoji: emoji,\n      colors: colors\n    };\n    this.setState({\n      openEmoji: true,\n      openModal: false\n    }); // console.log(newPalette)\n\n    this.props.savePalette(newPalette);\n    this.props.history.push(\"/\");\n  } // openModal(){\n  //   this.setState({\n  //     openModal: true,\n  //   })\n  // }\n  // cancelSave(){\n  //   this.setState({\n  //     openModal: false,\n  //   })\n  // }\n\n\n  handleChange(evt) {\n    this.setState({\n      [evt.target.name]: evt.target.value\n    });\n  } // addEmoji(emoji){\n  //   let newEmoji = emoji.native;\n  //   this.setState({\n  //     emoji: newEmoji,\n  //     openEmoji: false,\n  //   })\n  // }\n  // handleSubmit(emoji){\n  //   this.addEmoji(emoji)\n  // }\n\n\n  deleteBox(name) {\n    const oldColorsArray = [...this.state.colors];\n    const updatedColorsArray = oldColorsArray.filter(box => box.name !== name);\n    this.setState({\n      colors: updatedColorsArray\n    });\n  }\n\n  clearPalette() {\n    this.setState({\n      colors: []\n    });\n  }\n\n  chooseRandomColor() {\n    const colors = this.props.palettes.map(palette => palette.colors).flat();\n    const random = Math.floor(Math.random() * colors.length);\n    let newRandomColor = colors[random]; // let colorsSet = new Set(this.state.colors.map(color => color))\n\n    if (!this.colorsSet.has(newRandomColor.color)) {\n      console.log(\"No match\");\n      this.setState({\n        colors: [...this.state.colors, newRandomColor]\n      });\n      this.colorsSet.add(newRandomColor);\n    } else if (this.colorsSet.has(newRandomColor.color)) {\n      alert(\"That color exists! Please choose another color!\");\n    }\n\n    console.log(this.colorsSet); // let newColor = chroma.random().hex();\n  }\n\n  render() {\n    const _this$props = this.props,\n          classes = _this$props.classes,\n          maxColors = _this$props.maxColors,\n          palettes = _this$props.palettes;\n    const _this$state2 = this.state,\n          open = _this$state2.open,\n          currentColor = _this$state2.currentColor,\n          colors = _this$state2.colors,\n          newColorName = _this$state2.newColorName,\n          openModal = _this$state2.openModal,\n          openEmoji = _this$state2.openEmoji,\n          paletteName = _this$state2.paletteName;\n    const paletteIsFull = colors.length >= maxColors;\n    return React.createElement(\"div\", {\n      className: classes.root,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258\n      },\n      __self: this\n    }, React.createElement(FormNavbar, {\n      open: open,\n      classes: classes,\n      handleDrawerOpen: this.handleDrawerOpen,\n      handleChange: this.handleChange,\n      savePalette: this.savePalette,\n      paletteName: paletteName,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260\n      },\n      __self: this\n    }), React.createElement(Drawer, {\n      className: classes.drawer,\n      variant: \"persistent\",\n      anchor: \"left\",\n      open: open,\n      classes: {\n        paper: classes.drawerPaper\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: classes.drawerHeader,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311\n      },\n      __self: this\n    }, React.createElement(IconButton, {\n      onClick: this.handleDrawerClose,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 312\n      },\n      __self: this\n    }, React.createElement(ChevronLeftIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313\n      },\n      __self: this\n    }))), React.createElement(Divider, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317\n      },\n      __self: this\n    }), React.createElement(Typography, {\n      variant: \"h4\",\n      noWrap: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319\n      },\n      __self: this\n    }, \"Design Your Palette\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 323\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: this.chooseRandomColor,\n      disabled: paletteIsFull,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 324\n      },\n      __self: this\n    }, \"Random Color\"), React.createElement(Button, {\n      variant: \"contained\",\n      color: \"secondary\",\n      onClick: this.clearPalette,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 332\n      },\n      __self: this\n    }, \"Clear Palette\")), React.createElement(ColorPicker, {\n      currentColor: currentColor,\n      newColorName: newColorName,\n      paletteIsFull: paletteIsFull,\n      handleChange: this.handleChange,\n      addNewColor: this.addNewColor,\n      handleColorPickerChange: this.handleColorPickerChange,\n      palettes: palettes,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 337\n      },\n      __self: this\n    })), React.createElement(\"main\", {\n      className: classNames(classes.content, {\n        [classes.contentShift]: open\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 394\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: classes.drawerHeader,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 398\n      },\n      __self: this\n    }), React.createElement(DraggableColorBoxList, {\n      colors: colors,\n      deleteBox: this.deleteBox,\n      axis: \"xy\",\n      onSortEnd: this.onSortEnd,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 400\n      },\n      __self: this\n    })));\n  }\n\n}\n\nMakeNewPalette.defaultProps = {\n  maxColors: 20\n};\nexport default withStyles(styles, {\n  withTheme: true\n})(MakeNewPalette);","map":{"version":3,"sources":["C:\\Users\\todor\\Documents\\4-Web Development\\1-Web Development Courses\\3-REACT\\25-Color Palette\\color-palette\\src\\MakeNewPalette.js"],"names":["React","Component","ChromePicker","ValidatorForm","TextValidator","arrayMove","classNames","withStyles","Drawer","Divider","IconButton","ChevronLeftIcon","Button","DraggableColorBoxList","Typography","chroma","FormNavbar","ColorPicker","drawerWidth","styles","theme","root","display","appBar","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","width","marginLeft","easeOut","enteringScreen","menuButton","marginRight","spacing","hide","drawer","flexShrink","drawerPaper","drawerHeader","alignItems","padding","mixins","toolbar","justifyContent","content","flexGrow","height","contentShift","goBackLink","textDecoration","MakeNewPalette","constructor","props","handleDrawerOpen","setState","open","handleDrawerClose","onSortEnd","oldIndex","newIndex","colors","state","currentColor","newColorName","palettes","paletteName","id","emoji","openEmoji","colorsSet","Set","map","color","handleColorPickerChange","bind","addNewColor","savePalette","handleChange","deleteBox","clearPalette","chooseRandomColor","componentDidMount","addValidationRule","value","every","name","toLowerCase","toLocaleLowerCase","newColor","hex","newColorObj","split","join","newPalette","openModal","history","push","evt","target","oldColorsArray","updatedColorsArray","filter","box","palette","flat","random","Math","floor","length","newRandomColor","has","console","log","add","alert","render","classes","maxColors","paletteIsFull","paper","defaultProps","withTheme"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAAQC,YAAR,QAA2B,aAA3B;AACA,SAASC,aAAT,EAAwBC,aAAxB,QAA4C,kCAA5C;AACA,SAAQC,SAAR,QAAwB,oBAAxB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,OAAP,MAAoB,2BAApB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,eAAP,MAA4B,iCAA5B;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,qBAAP,MAAkC,yBAAlC;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AAIA,MAAMC,WAAW,GAAG,GAApB;;AAEA,MAAMC,MAAM,GAAGC,KAAK,KAAK;AACvBC,EAAAA,IAAI,EAAE;AACJC,IAAAA,OAAO,EAAE;AADL,GADiB;AAIvBC,EAAAA,MAAM,EAAE;AACNC,IAAAA,UAAU,EAAEJ,KAAK,CAACK,WAAN,CAAkBC,MAAlB,CAAyB,CAAC,QAAD,EAAW,OAAX,CAAzB,EAA8C;AACxDC,MAAAA,MAAM,EAAEP,KAAK,CAACK,WAAN,CAAkBE,MAAlB,CAAyBC,KADuB;AAExDC,MAAAA,QAAQ,EAAET,KAAK,CAACK,WAAN,CAAkBI,QAAlB,CAA2BC;AAFmB,KAA9C;AADN,GAJe;AAUvBC,EAAAA,WAAW,EAAE;AACXC,IAAAA,KAAK,wBAAiBd,WAAjB,QADM;AAEXe,IAAAA,UAAU,EAAEf,WAFD;AAGXM,IAAAA,UAAU,EAAEJ,KAAK,CAACK,WAAN,CAAkBC,MAAlB,CAAyB,CAAC,QAAD,EAAW,OAAX,CAAzB,EAA8C;AACxDC,MAAAA,MAAM,EAAEP,KAAK,CAACK,WAAN,CAAkBE,MAAlB,CAAyBO,OADuB;AAExDL,MAAAA,QAAQ,EAAET,KAAK,CAACK,WAAN,CAAkBI,QAAlB,CAA2BM;AAFmB,KAA9C;AAHD,GAVU;AAkBvBC,EAAAA,UAAU,EAAE;AACVC,IAAAA,WAAW,EAAEjB,KAAK,CAACkB,OAAN,CAAc,CAAd;AADH,GAlBW;AAqBvBC,EAAAA,IAAI,EAAE;AACJjB,IAAAA,OAAO,EAAE;AADL,GArBiB;AAwBvBkB,EAAAA,MAAM,EAAE;AACNR,IAAAA,KAAK,EAAEd,WADD;AAENuB,IAAAA,UAAU,EAAE;AAFN,GAxBe;AA4BvBC,EAAAA,WAAW,EAAE;AACXV,IAAAA,KAAK,EAAEd;AADI,GA5BU;AA+BvByB,EAAAA,YAAY;AACVrB,IAAAA,OAAO,EAAE,MADC;AAEVsB,IAAAA,UAAU,EAAE,QAFF;AAGVC,IAAAA,OAAO,EAAEzB,KAAK,CAACkB,OAAN,CAAc,CAAd,EAAiB,CAAjB;AAHC,KAIPlB,KAAK,CAAC0B,MAAN,CAAaC,OAJN;AAKVC,IAAAA,cAAc,EAAE;AALN,IA/BW;AAsCvBC,EAAAA,OAAO,EAAE;AACPC,IAAAA,QAAQ,EAAE,CADH;AAEPC,IAAAA,MAAM,EAAE,oBAFD;AAGPN,IAAAA,OAAO,EAAEzB,KAAK,CAACkB,OAAN,CAAc,CAAd,CAHF;AAIPd,IAAAA,UAAU,EAAEJ,KAAK,CAACK,WAAN,CAAkBC,MAAlB,CAAyB,QAAzB,EAAmC;AAC7CC,MAAAA,MAAM,EAAEP,KAAK,CAACK,WAAN,CAAkBE,MAAlB,CAAyBC,KADY;AAE7CC,MAAAA,QAAQ,EAAET,KAAK,CAACK,WAAN,CAAkBI,QAAlB,CAA2BC;AAFQ,KAAnC,CAJL;AAQPG,IAAAA,UAAU,EAAE,CAACf;AARN,GAtCc;AAgDvBkC,EAAAA,YAAY,EAAE;AACZ5B,IAAAA,UAAU,EAAEJ,KAAK,CAACK,WAAN,CAAkBC,MAAlB,CAAyB,QAAzB,EAAmC;AAC7CC,MAAAA,MAAM,EAAEP,KAAK,CAACK,WAAN,CAAkBE,MAAlB,CAAyBO,OADY;AAE7CL,MAAAA,QAAQ,EAAET,KAAK,CAACK,WAAN,CAAkBI,QAAlB,CAA2BM;AAFQ,KAAnC,CADA;AAKZF,IAAAA,UAAU,EAAE;AALA,GAhDS;AAwDvBoB,EAAAA,UAAU,EAAE;AACV,eAAU;AACRC,MAAAA,cAAc,EAAE;AADR;AADA;AAxDW,CAAL,CAApB;;AAkEA,MAAMC,cAAN,SAA6BtD,SAA7B,CAAuC;AAInCuD,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;;AADc,SA0ClBC,gBA1CkB,GA0CC,MAAM;AACrB,WAAKC,QAAL,CAAc;AAACC,QAAAA,IAAI,EAAE;AAAP,OAAd;AACD,KA5Ce;;AAAA,SA8ClBC,iBA9CkB,GA8CE,MAAM;AACxB,WAAKF,QAAL,CAAc;AAACC,QAAAA,IAAI,EAAE;AAAP,OAAd;AACD,KAhDiB;;AAAA,SA+HlBE,SA/HkB,GA+HN,CAAC;AAACC,MAAAA,QAAD;AAAWC,MAAAA;AAAX,KAAD,KAA0B;AACpC,WAAKL,QAAL,CAAc,CAAC;AAACM,QAAAA;AAAD,OAAD,MAAe;AAC3BA,QAAAA,MAAM,EAAE5D,SAAS,CAAC4D,MAAD,EAASF,QAAT,EAAmBC,QAAnB;AADU,OAAf,CAAd;AAGD,KAnIiB;;AAEd,SAAKE,KAAL,GAAa;AACTN,MAAAA,IAAI,EAAE,IADG;AAETO,MAAAA,YAAY,EAAE,MAFL;AAGTC,MAAAA,YAAY,EAAE,EAHL;AAITH,MAAAA,MAAM,EAAE,KAAKR,KAAL,CAAWY,QAAX,CAAoB,CAApB,EAAuBJ,MAJtB;AAKTK,MAAAA,WAAW,EAAC,EALH;AAMTC,MAAAA,EAAE,EAAC,EANM;AAOTC,MAAAA,KAAK,EAAC,EAPG;AAQTC,MAAAA,SAAS,EAAE;AARF,KAAb;AAWA,SAAKC,SAAL,GAAiB,IAAIC,GAAJ,CAAQ,KAAKT,KAAL,CAAWD,MAAX,CAAkBW,GAAlB,CAAsBX,MAAM,IAAIA,MAAM,CAACY,KAAvC,CAAR,CAAjB;AAEA,SAAKC,uBAAL,GAA+B,KAAKA,uBAAL,CAA6BC,IAA7B,CAAkC,IAAlC,CAA/B;AACA,SAAKC,WAAL,GAAmB,KAAKA,WAAL,CAAiBD,IAAjB,CAAsB,IAAtB,CAAnB;AACA,SAAKE,WAAL,GAAmB,KAAKA,WAAL,CAAiBF,IAAjB,CAAsB,IAAtB,CAAnB;AACA,SAAKG,YAAL,GAAoB,KAAKA,YAAL,CAAkBH,IAAlB,CAAuB,IAAvB,CAApB;AACA,SAAKI,SAAL,GAAiB,KAAKA,SAAL,CAAeJ,IAAf,CAAoB,IAApB,CAAjB;AACA,SAAKK,YAAL,GAAoB,KAAKA,YAAL,CAAkBL,IAAlB,CAAuB,IAAvB,CAApB;AACA,SAAKM,iBAAL,GAAyB,KAAKA,iBAAL,CAAuBN,IAAvB,CAA4B,IAA5B,CAAzB;AACH;;AAEDO,EAAAA,iBAAiB,GAAG;AAClB;AACAnF,IAAAA,aAAa,CAACoF,iBAAd,CAAgC,mBAAhC,EAAqDC,KAAK,IACxD,KAAKtB,KAAL,CAAWD,MAAX,CAAkBwB,KAAlB,CAAwB,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAcA,IAAI,CAACC,WAAL,OAAuBH,KAAK,CAACG,WAAN,EAA7D,CADF,EAFkB,CAMpB;;AACExF,IAAAA,aAAa,CAACoF,iBAAd,CAAgC,eAAhC,EAAiDC,KAAK,IACpD,KAAKtB,KAAL,CAAWD,MAAX,CAAkBwB,KAAlB,CAAwB,CAAC;AAAEZ,MAAAA;AAAF,KAAD,KAAeA,KAAK,KAAK,KAAKX,KAAL,CAAWC,YAA5D,CADF,EAPkB,CAWlB;;AACAhE,IAAAA,aAAa,CAACoF,iBAAd,CAAgC,qBAAhC,EAAuDC,KAAK,IAC1D,KAAK/B,KAAL,CAAWY,QAAX,CAAoBoB,KAApB,CAA0B,CAAC;AAAEnB,MAAAA;AAAF,KAAD,KAAsBA,WAAW,CAACsB,iBAAZ,OAAoCJ,KAAK,CAACI,iBAAN,EAApF,CADF;AAID;;AAUDd,EAAAA,uBAAuB,CAACe,QAAD,EAAU;AAC7B,SAAKlC,QAAL,CAAc;AACVQ,MAAAA,YAAY,EAAE0B,QAAQ,CAACC;AADb,KAAd;AAGH;;AAEDd,EAAAA,WAAW,CAACe,WAAD,EAAa;AAEtB;AACA;AACA;AACA;AACA,SAAKpC,QAAL,CAAc;AACZM,MAAAA,MAAM,EAAE,CAAC,GAAG,KAAKC,KAAL,CAAWD,MAAf,EAAuB8B,WAAvB,CADI,CAEZ;;AAFY,KAAd;AAID;;AAGDd,EAAAA,WAAW,GAAE;AAAA,wBACyB,KAAKf,KAD9B;AAAA,UACLI,WADK,eACLA,WADK;AAAA,UACQE,KADR,eACQA,KADR;AAAA,UACeP,MADf,eACeA,MADf;AAEX,QAAIM,EAAE,GAAG,KAAKL,KAAL,CAAWI,WAAX,CAAuBsB,iBAAvB,GAA2CI,KAA3C,CAAiD,GAAjD,EAAsDC,IAAtD,CAA2D,GAA3D,CAAT;AACA,UAAMC,UAAU,GAAG;AACjB5B,MAAAA,WAAW,EAAEA,WADI;AAEjBC,MAAAA,EAAE,EAAEA,EAFa;AAGjBC,MAAAA,KAAK,EAAEA,KAHU;AAIjBP,MAAAA,MAAM,EAAEA;AAJS,KAAnB;AAMA,SAAKN,QAAL,CAAc;AACZc,MAAAA,SAAS,EAAE,IADC;AAEZ0B,MAAAA,SAAS,EAAE;AAFC,KAAd,EATW,CAaX;;AACA,SAAK1C,KAAL,CAAWwB,WAAX,CAAuBiB,UAAvB;AACA,SAAKzC,KAAL,CAAW2C,OAAX,CAAmBC,IAAnB,CAAwB,GAAxB;AAED,GA1FkC,CA4FnC;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;AAEAnB,EAAAA,YAAY,CAACoB,GAAD,EAAK;AACf,SAAK3C,QAAL,CAAc;AACZ,OAAC2C,GAAG,CAACC,MAAJ,CAAWb,IAAZ,GAAmBY,GAAG,CAACC,MAAJ,CAAWf;AADlB,KAAd;AAGD,GA5GkC,CA8GnC;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;;;AACAL,EAAAA,SAAS,CAACO,IAAD,EAAM;AACb,UAAMc,cAAc,GAAG,CAAC,GAAG,KAAKtC,KAAL,CAAWD,MAAf,CAAvB;AACA,UAAMwC,kBAAkB,GAAGD,cAAc,CAACE,MAAf,CAAsBC,GAAG,IAAIA,GAAG,CAACjB,IAAJ,KAAaA,IAA1C,CAA3B;AAEA,SAAK/B,QAAL,CAAc;AACZM,MAAAA,MAAM,EAAEwC;AADI,KAAd;AAGD;;AAQDrB,EAAAA,YAAY,GAAE;AACZ,SAAKzB,QAAL,CAAc;AACZM,MAAAA,MAAM,EAAE;AADI,KAAd;AAGD;;AAEDoB,EAAAA,iBAAiB,GAAE;AACjB,UAAMpB,MAAM,GAAG,KAAKR,KAAL,CAAWY,QAAX,CAAoBO,GAApB,CAAwBgC,OAAO,IAAIA,OAAO,CAAC3C,MAA3C,EAAmD4C,IAAnD,EAAf;AACA,UAAMC,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACD,MAAL,KAAgB7C,MAAM,CAACgD,MAAlC,CAAf;AACA,QAAIC,cAAc,GAAGjD,MAAM,CAAC6C,MAAD,CAA3B,CAHiB,CAIjB;;AAEA,QAAG,CAAC,KAAKpC,SAAL,CAAeyC,GAAf,CAAmBD,cAAc,CAACrC,KAAlC,CAAJ,EAA6C;AAC3CuC,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACA,WAAK1D,QAAL,CAAc;AACZM,QAAAA,MAAM,EAAE,CAAC,GAAG,KAAKC,KAAL,CAAWD,MAAf,EAAuBiD,cAAvB;AADI,OAAd;AAGA,WAAKxC,SAAL,CAAe4C,GAAf,CAAmBJ,cAAnB;AACD,KAND,MAMO,IAAG,KAAKxC,SAAL,CAAeyC,GAAf,CAAmBD,cAAc,CAACrC,KAAlC,CAAH,EAA4C;AACjD0C,MAAAA,KAAK,CAAC,iDAAD,CAAL;AACD;;AACDH,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAK3C,SAAjB,EAfiB,CAiBjB;AAED;;AAED8C,EAAAA,MAAM,GAAE;AAAA,wBACmC,KAAK/D,KADxC;AAAA,UACGgE,OADH,eACGA,OADH;AAAA,UACYC,SADZ,eACYA,SADZ;AAAA,UACuBrD,QADvB,eACuBA,QADvB;AAAA,yBAEkF,KAAKH,KAFvF;AAAA,UAEGN,IAFH,gBAEGA,IAFH;AAAA,UAESO,YAFT,gBAESA,YAFT;AAAA,UAEuBF,MAFvB,gBAEuBA,MAFvB;AAAA,UAE+BG,YAF/B,gBAE+BA,YAF/B;AAAA,UAE6C+B,SAF7C,gBAE6CA,SAF7C;AAAA,UAEwD1B,SAFxD,gBAEwDA,SAFxD;AAAA,UAEmEH,WAFnE,gBAEmEA,WAFnE;AAGJ,UAAMqD,aAAa,GAAG1D,MAAM,CAACgD,MAAP,IAAiBS,SAAvC;AAEA,WACI;AAAK,MAAA,SAAS,EAAED,OAAO,CAACpG,IAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEI,oBAAC,UAAD;AACE,MAAA,IAAI,EAAIuC,IADV;AAEE,MAAA,OAAO,EAAE6D,OAFX;AAGE,MAAA,gBAAgB,EAAI,KAAK/D,gBAH3B;AAIE,MAAA,YAAY,EAAI,KAAKwB,YAJvB;AAKE,MAAA,WAAW,EAAI,KAAKD,WALtB;AAME,MAAA,WAAW,EAAEX,WANf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,EA4CI,oBAAC,MAAD;AACE,MAAA,SAAS,EAAEmD,OAAO,CAACjF,MADrB;AAEE,MAAA,OAAO,EAAC,YAFV;AAGE,MAAA,MAAM,EAAC,MAHT;AAIE,MAAA,IAAI,EAAEoB,IAJR;AAKE,MAAA,OAAO,EAAE;AACLgE,QAAAA,KAAK,EAAEH,OAAO,CAAC/E;AADV,OALX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OASE;AAAK,MAAA,SAAS,EAAE+E,OAAO,CAAC9E,YAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,UAAD;AAAY,MAAA,OAAO,EAAE,KAAKkB,iBAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACM,oBAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADN,CADJ,CATF,EAeE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAfF,EAiBE,oBAAC,UAAD;AAAY,MAAA,OAAO,EAAC,IAApB;AAAyB,MAAA,MAAM,MAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAjBF,EAqBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,MAAD;AACI,MAAA,OAAO,EAAC,WADZ;AAEI,MAAA,KAAK,EAAC,SAFV;AAGI,MAAA,OAAO,EAAE,KAAKwB,iBAHlB;AAII,MAAA,QAAQ,EAAGsC,aAJf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,EASE,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,WAAhB;AAA4B,MAAA,KAAK,EAAC,WAAlC;AAA8C,MAAA,OAAO,EAAE,KAAKvC,YAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBATF,CArBF,EAmCE,oBAAC,WAAD;AACE,MAAA,YAAY,EAAIjB,YADlB;AAEE,MAAA,YAAY,EAAIC,YAFlB;AAGE,MAAA,aAAa,EAAIuD,aAHnB;AAIE,MAAA,YAAY,EAAI,KAAKzC,YAJvB;AAKE,MAAA,WAAW,EAAI,KAAKF,WALtB;AAME,MAAA,uBAAuB,EAAI,KAAKF,uBANlC;AAOE,MAAA,QAAQ,EAAIT,QAPd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAnCF,CA5CJ,EAwII;AAAM,MAAA,SAAS,EAAE/D,UAAU,CAACmH,OAAO,CAACxE,OAAT,EAAkB;AACrC,SAACwE,OAAO,CAACrE,YAAT,GAAwBQ;AADa,OAAlB,CAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAIA;AAAK,MAAA,SAAS,EAAE6D,OAAO,CAAC9E,YAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJA,EAMA,oBAAC,qBAAD;AACE,MAAA,MAAM,EAAEsB,MADV;AAEE,MAAA,SAAS,EAAE,KAAKkB,SAFlB;AAGE,MAAA,IAAI,EAAC,IAHP;AAIE,MAAA,SAAS,EAAE,KAAKrB,SAJlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANA,CAxIJ,CADJ;AAwJH;;AAjUkC;;AAAjCP,c,CACKsE,Y,GAAe;AACpBH,EAAAA,SAAS,EAAE;AADS,C;AAmU1B,eAAenH,UAAU,CAACY,MAAD,EAAS;AAAC2G,EAAAA,SAAS,EAAE;AAAZ,CAAT,CAAV,CAAuCvE,cAAvC,CAAf","sourcesContent":["import React, { Component } from 'react'\r\nimport {ChromePicker} from 'react-color'\r\nimport { ValidatorForm, TextValidator} from 'react-material-ui-form-validator';\r\nimport {arrayMove} from 'react-sortable-hoc';\r\nimport classNames from 'classnames'\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport ChevronLeftIcon from '@icons/material/ChevronLeftIcon';\r\nimport Button from '@material-ui/core/Button';\r\nimport DraggableColorBoxList from './DraggableColorBoxList'\r\nimport Typography from '@material-ui/core/Typography';\r\nimport chroma from 'chroma-js'\r\nimport FormNavbar from './FormNavbar'\r\nimport ColorPicker from './ColorPicker'\r\n\r\n\r\n\r\nconst drawerWidth = 400;\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    display: 'flex',\r\n  },\r\n  appBar: {\r\n    transition: theme.transitions.create(['margin', 'width'], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  appBarShift: {\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    marginLeft: drawerWidth,\r\n    transition: theme.transitions.create(['margin', 'width'], {\r\n      easing: theme.transitions.easing.easeOut,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  hide: {\r\n    display: 'none',\r\n  },\r\n  drawer: {\r\n    width: drawerWidth,\r\n    flexShrink: 0,\r\n  },\r\n  drawerPaper: {\r\n    width: drawerWidth,\r\n  },\r\n  drawerHeader: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    padding: theme.spacing(0, 1),\r\n    ...theme.mixins.toolbar,\r\n    justifyContent: 'flex-end',\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    height: \"calc(100vh - 64px)\",\r\n    padding: theme.spacing(0),\r\n    transition: theme.transitions.create('margin', {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    marginLeft: -drawerWidth,\r\n  },\r\n  contentShift: {\r\n    transition: theme.transitions.create('margin', {\r\n      easing: theme.transitions.easing.easeOut,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n    marginLeft: 0,\r\n  },\r\n\r\n  goBackLink: {\r\n    \"&:hover\":{\r\n      textDecoration: \"none\"\r\n    }\r\n\r\n  }\r\n    \r\n\r\n});\r\n\r\nclass MakeNewPalette extends Component {\r\n    static defaultProps = {\r\n      maxColors: 20,\r\n    }\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            open: true,\r\n            currentColor: \"teal\",\r\n            newColorName: \"\",\r\n            colors: this.props.palettes[0].colors,\r\n            paletteName:\"\",\r\n            id:\"\",\r\n            emoji:\"\",\r\n            openEmoji: false,\r\n        }\r\n\r\n        this.colorsSet = new Set(this.state.colors.map(colors => colors.color))\r\n        \r\n        this.handleColorPickerChange = this.handleColorPickerChange.bind(this)\r\n        this.addNewColor = this.addNewColor.bind(this)\r\n        this.savePalette = this.savePalette.bind(this)\r\n        this.handleChange = this.handleChange.bind(this)\r\n        this.deleteBox = this.deleteBox.bind(this)\r\n        this.clearPalette = this.clearPalette.bind(this)\r\n        this.chooseRandomColor = this.chooseRandomColor.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n      // validate if the color name is unique\r\n      ValidatorForm.addValidationRule('isColorNameUnique', value => \r\n        this.state.colors.every(({ name }) => name.toLowerCase() !== value.toLowerCase())\r\n      );\r\n\r\n    //  validate if the color is unique\r\n      ValidatorForm.addValidationRule('isColorUnique', value => \r\n        this.state.colors.every(({ color }) => color !== this.state.currentColor)\r\n      );\r\n\r\n      // validate if the palette name is unique\r\n      ValidatorForm.addValidationRule('isPaletteNameUnique', value =>       \r\n        this.props.palettes.every(({ paletteName } ) => paletteName.toLocaleLowerCase() !== value.toLocaleLowerCase())\r\n      );\r\n\r\n    }\r\n  \r\n    handleDrawerOpen = () => {\r\n        this.setState({open: true});\r\n      };\r\n\r\n    handleDrawerClose = () => {\r\n      this.setState({open: false});\r\n    };\r\n\r\n    handleColorPickerChange(newColor){\r\n        this.setState({\r\n            currentColor: newColor.hex,\r\n        })\r\n    }\r\n\r\n    addNewColor(newColorObj){\r\n    \r\n      // const newColorObj = {\r\n      //   name: this.state.newColorName,\r\n      //   color: this.state.currentColor,\r\n      // }\r\n      this.setState({\r\n        colors: [...this.state.colors, newColorObj],\r\n        // newColorName: \"\",\r\n      });\r\n    }\r\n\r\n \r\n    savePalette(){\r\n      const{paletteName, emoji, colors} = this.state;\r\n      let id = this.state.paletteName.toLocaleLowerCase().split(' ').join('-');\r\n      const newPalette = {\r\n        paletteName: paletteName,\r\n        id: id,\r\n        emoji: emoji,\r\n        colors: colors,\r\n      }\r\n      this.setState({\r\n        openEmoji: true,\r\n        openModal: false,\r\n      })\r\n      // console.log(newPalette)\r\n      this.props.savePalette(newPalette)\r\n      this.props.history.push(\"/\");\r\n     \r\n    }\r\n\r\n    // openModal(){\r\n    //   this.setState({\r\n    //     openModal: true,\r\n    //   })\r\n    // }\r\n\r\n    // cancelSave(){\r\n    //   this.setState({\r\n    //     openModal: false,\r\n    //   })\r\n    // }\r\n\r\n    handleChange(evt){\r\n      this.setState({\r\n        [evt.target.name]: evt.target.value,\r\n      })\r\n    }\r\n\r\n    // addEmoji(emoji){\r\n    //   let newEmoji = emoji.native;\r\n    //   this.setState({\r\n    //     emoji: newEmoji,\r\n    //     openEmoji: false,\r\n    //   })\r\n      \r\n    // }\r\n\r\n    // handleSubmit(emoji){\r\n    //   this.addEmoji(emoji)\r\n    // }\r\n    deleteBox(name){\r\n      const oldColorsArray = [...this.state.colors]\r\n      const updatedColorsArray = oldColorsArray.filter(box => box.name !== name);\r\n  \r\n      this.setState({\r\n        colors: updatedColorsArray,\r\n      })\r\n    }\r\n\r\n    onSortEnd = ({oldIndex, newIndex}) => {\r\n      this.setState(({colors}) => ({\r\n        colors: arrayMove(colors, oldIndex, newIndex),\r\n      }));\r\n    };\r\n\r\n    clearPalette(){\r\n      this.setState({\r\n        colors: [],\r\n      })\r\n    }\r\n\r\n    chooseRandomColor(){\r\n      const colors = this.props.palettes.map(palette => palette.colors).flat();\r\n      const random = Math.floor(Math.random() * colors.length)\r\n      let newRandomColor = colors[random]\r\n      // let colorsSet = new Set(this.state.colors.map(color => color))\r\n\r\n      if(!this.colorsSet.has(newRandomColor.color)){\r\n        console.log(\"No match\")\r\n        this.setState({\r\n          colors: [...this.state.colors, newRandomColor],\r\n        })\r\n        this.colorsSet.add(newRandomColor)\r\n      } else if(this.colorsSet.has(newRandomColor.color)){\r\n        alert(\"That color exists! Please choose another color!\")\r\n      }\r\n      console.log(this.colorsSet)\r\n      \r\n      // let newColor = chroma.random().hex();\r\n     \r\n    }\r\n\r\n    render(){\r\n        const {classes, maxColors, palettes} = this.props;\r\n        const {open, currentColor, colors, newColorName, openModal, openEmoji, paletteName} = this.state;\r\n        const paletteIsFull = colors.length >= maxColors;\r\n\r\n        return(\r\n            <div className={classes.root} >\r\n                \r\n                <FormNavbar \r\n                  open = {open}\r\n                  classes={classes}\r\n                  handleDrawerOpen = {this.handleDrawerOpen}\r\n                  handleChange = {this.handleChange}\r\n                  savePalette = {this.savePalette}\r\n                  paletteName={paletteName}\r\n                />\r\n                {/* <AppBar\r\n                  color=\"default\"\r\n                    position=\"fixed\"\r\n                    className={classNames(classes.appBar, {\r\n                        [classes.appBarShift]: open,\r\n                    })}\r\n                >\r\n                    <Toolbar>\r\n                        <IconButton\r\n                            color=\"inherit\"\r\n                            aria-label=\"open drawer\"\r\n                            onClick={this.handleDrawerOpen}\r\n                            edge=\"start\"\r\n                            className={classNames(classes.menuButton, open && classes.hide)}\r\n                        >\r\n                            <MenuIcon />\r\n                        </IconButton>\r\n                        <Typography variant=\"h6\" noWrap>\r\n                            Create A Palette\r\n                        </Typography>\r\n                        <div>\r\n                          <Link className={classes.goBackLink} to = \"/\">\r\n                            <Button variant=\"contained\" color=\"secondary\">\r\n                                Go Back\r\n                            </Button>\r\n                          </Link>\r\n                            \r\n                            <Button variant=\"contained\" color=\"primary\" onClick={this.openModal}>\r\n                                Save Palette\r\n                            </Button>\r\n                        </div>\r\n                    </Toolbar>\r\n                 \r\n                </AppBar> */}\r\n                <Drawer\r\n                  className={classes.drawer}\r\n                  variant=\"persistent\"\r\n                  anchor=\"left\"\r\n                  open={open}\r\n                  classes={{\r\n                      paper: classes.drawerPaper,\r\n                  }}\r\n                >\r\n                  <div className={classes.drawerHeader}>\r\n                      <IconButton onClick={this.handleDrawerClose}>\r\n                            <ChevronLeftIcon /> \r\n                      </IconButton>\r\n                  </div>\r\n\r\n                  <Divider />\r\n\r\n                  <Typography variant=\"h4\" noWrap>\r\n                      Design Your Palette\r\n                  </Typography>\r\n\r\n                  <div>\r\n                    <Button \r\n                        variant=\"contained\" \r\n                        color=\"primary\" \r\n                        onClick={this.chooseRandomColor}\r\n                        disabled ={paletteIsFull}\r\n                      >\r\n                        Random Color\r\n                    </Button>\r\n                    <Button variant=\"contained\" color=\"secondary\" onClick={this.clearPalette}>\r\n                        Clear Palette\r\n                    </Button>\r\n                  </div>\r\n\r\n                  <ColorPicker \r\n                    currentColor = {currentColor}\r\n                    newColorName = {newColorName}\r\n                    paletteIsFull = {paletteIsFull}\r\n                    handleChange = {this.handleChange}\r\n                    addNewColor = {this.addNewColor}\r\n                    handleColorPickerChange = {this.handleColorPickerChange}\r\n                    palettes = {palettes}\r\n                  />\r\n                  \r\n                  {/* <ChromePicker \r\n                    color={currentColor} \r\n                    onChangeComplete = {this.handleColorPickerChange}\r\n                  />\r\n\r\n\r\n                  <ValidatorForm \r\n                    onSubmit={this.addNewColor}\r\n                  \r\n                  >\r\n                    <TextValidator \r\n                      value={newColorName}\r\n                      onChange={this.handleChange}\r\n                      name=\"newColorName\"\r\n                      validators={[\r\n                          'required', \r\n                          'isColorNameUnique', \r\n                          'isColorUnique'\r\n                          ]}\r\n                      errorMessages={[\r\n                          'This field is required. Enter a color name!', \r\n                          'Color name must be unique!', \r\n                          'Color already exists!'\r\n                          ]}\r\n                    />\r\n                  { paletteIsFull ? \r\n                      <Button \r\n                        type=\"submit\"\r\n                        variant=\"contained\" \r\n                        disabled\r\n                      >\r\n                        Palette Full\r\n                      </Button>\r\n                  :\r\n                      <Button \r\n                        type=\"submit\"\r\n                        variant=\"contained\" \r\n                        style={{backgroundColor: currentColor}}\r\n                        disabled ={paletteIsFull}\r\n                      >\r\n                        Add Color\r\n                    </Button>\r\n                  }    \r\n                                    \r\n                  </ValidatorForm> */}\r\n                </Drawer>\r\n\r\n                <main className={classNames(classes.content, {\r\n                        [classes.contentShift]: open,\r\n                    })}\r\n                >\r\n                <div className={classes.drawerHeader} />\r\n                      \r\n                <DraggableColorBoxList \r\n                  colors={colors} \r\n                  deleteBox={this.deleteBox} \r\n                  axis=\"xy\"\r\n                  onSortEnd={this.onSortEnd}\r\n                />                                \r\n                </main>\r\n          </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withStyles(styles, {withTheme: true}) (MakeNewPalette);\r\n"]},"metadata":{},"sourceType":"module"}