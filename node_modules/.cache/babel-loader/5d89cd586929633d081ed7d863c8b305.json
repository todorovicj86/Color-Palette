{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\todor\\\\Documents\\\\4-Web Development\\\\1-Web Development Courses\\\\3-REACT\\\\25-Color Palette\\\\color-palette\\\\src\\\\NewPaletteForm.js\";\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { ChromePicker } from 'react-color';\nimport ColorBox from './ColorBox';\nimport seedColors from './seedColors'; // import Grid from '@material-ui/core/Grid';\n\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport chroma from 'chroma-js'; // import DeleteIcon from '@icons/material/DeleteIcon';\n// import { Card, Container, IconButton } from '@material-ui/core';\n\nimport './NewPaletteForm.css';\n\nclass NewPaletteForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      paletteName: \"\",\n      id: \"\",\n      emoji: \"\",\n      colors: [{\n        name: \"red\",\n        color: \"#FF0000\"\n      }, {\n        name: \"yellow\",\n        color: \"#FFB000\"\n      }],\n      name: \"\",\n      color: \"\",\n      bgColor: \"#FF0000\",\n      open: false\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n    this.handleClickOpen = this.handleClickOpen.bind(this);\n    this.handleClose = this.handleClose.bind(this);\n    this.handleSave = this.handleSave.bind(this);\n    this.paletteName = this.paletteName.bind(this);\n    this.addColorName = this.addColorName.bind(this);\n    this.addPaletteToPaletteList = this.addPaletteToPaletteList.bind(this);\n  } // adding the palette to paletteList\n\n\n  addPaletteToPaletteList() {\n    const _this$state = this.state,\n          paletteName = _this$state.paletteName,\n          emoji = _this$state.emoji,\n          colors = _this$state.colors;\n    let id = paletteName.toLocaleLowerCase().split(' ').join(\"-\");\n    let palettes = seedColors;\n    let newPalette = {\n      paletteName: paletteName,\n      id: id,\n      emoji: emoji,\n      colors: colors\n    };\n    palettes.push(newPalette);\n  }\n\n  handleChange(color) {\n    let newColor = color.hex;\n    this.setState({\n      color: newColor\n    });\n  }\n\n  addColorName(evt) {\n    this.setState({\n      [evt.target.name]: evt.target.value\n    });\n  }\n\n  handleSubmit(evt) {\n    evt.preventDefault();\n  }\n\n  handleClick(evt) {\n    let newColorName = this.state.name;\n    let newColorCode = this.state.color;\n    let toAdd = {\n      name: newColorName,\n      color: newColorCode\n    };\n    this.setState(st => ({\n      colors: [...st.colors, toAdd],\n      name: \"\",\n      color: \"\"\n    }));\n  } // opens modal form for palette name\n\n\n  handleClickOpen() {\n    this.setState({\n      open: true\n    });\n  } // close modal form\n\n\n  handleClose(evt) {\n    this.setState({\n      open: false\n    });\n  } // when save is clicked, palette is added to the palette list\n\n\n  handleSave() {\n    this.addPaletteToPaletteList();\n    this.setState({\n      open: false\n    });\n  } // set the palette name with modal form\n\n\n  paletteName(evt) {\n    this.setState({\n      paletteName: evt.target.value\n    });\n  }\n\n  render() {\n    const color = this.state.color;\n    console.log(color);\n    const textColor = \"white\"; // chroma.contrast(this.state.color, 'white') >= 4.5 ? \"white\" : \"black\"\n\n    return React.createElement(\"div\", {\n      className: \"NewPaletteForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"color-picker\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, \"Design Your Palette\"), React.createElement(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, \"Random Color\"), React.createElement(Button, {\n      variant: \"contained\",\n      color: \"secondary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, \"Clear Palette\"), React.createElement(ChromePicker, {\n      color: this.state.color,\n      onChangeComplete: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }), React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, React.createElement(TextField, {\n      id: \"filled-with-placeholder\",\n      label: \"Color Name\",\n      placeholder: \"Color Name\",\n      margin: \"normal\",\n      variant: \"filled\",\n      value: this.state.name,\n      name: \"name\",\n      onChange: this.addColorName,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }), React.createElement(Button, {\n      onClick: this.handleClick,\n      style: {\n        backgroundColor: this.state.color,\n        color: textColor\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }, \"Add Color\"))), React.createElement(\"div\", {\n      className: \"color-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"color-container-navbar\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }, React.createElement(\"h5\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }, \"Create A Palette\"), React.createElement(\"div\", {\n      className: \"navbar-button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, React.createElement(Link, {\n      to: \"/\",\n      style: {\n        color: \"white\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, \" Go Back\")), React.createElement(Button, {\n      variant: \"contained\",\n      color: \"secondary\",\n      onClick: this.handleClickOpen,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }, \"Save\"))), React.createElement(Dialog, {\n      open: this.state.open,\n      onClose: this.handleClose,\n      \"aria-labelledby\": \"form-dialog-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }, React.createElement(DialogTitle, {\n      id: \"form-dialog-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }, \" Add Palette Name\"), React.createElement(DialogContent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }, React.createElement(DialogContentText, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }, \"Please Add Palette Name\"), React.createElement(TextField, {\n      autoFocus: true,\n      margin: \"dense\",\n      id: \"name\",\n      value: this.state.paletteName,\n      label: \"Palette Name\",\n      type: \"name\",\n      fullWidth: true,\n      onChange: this.paletteName,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    })), React.createElement(DialogActions, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    }, React.createElement(Button, {\n      onClick: this.handleClose,\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }, \"Cancel\"), React.createElement(Button, {\n      onClick: this.handleSave,\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211\n      },\n      __self: this\n    }, \"Save\"))), React.createElement(\"div\", {\n      className: \"color-container-palette\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    }, this.state.colors.map(color => React.createElement(ColorBox, {\n      bgColor: color.color,\n      colorName: color.name,\n      key: color.color,\n      format: this.props.format,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nNewPaletteForm.defaultProps = {\n  maxColors: 20\n};\nexport default NewPaletteForm;","map":{"version":3,"sources":["C:\\Users\\todor\\Documents\\4-Web Development\\1-Web Development Courses\\3-REACT\\25-Color Palette\\color-palette\\src\\NewPaletteForm.js"],"names":["React","Component","Link","ChromePicker","ColorBox","seedColors","Button","TextField","Dialog","DialogActions","DialogContent","DialogContentText","DialogTitle","chroma","NewPaletteForm","constructor","props","state","paletteName","id","emoji","colors","name","color","bgColor","open","handleChange","bind","handleSubmit","handleClick","handleClickOpen","handleClose","handleSave","addColorName","addPaletteToPaletteList","toLocaleLowerCase","split","join","palettes","newPalette","push","newColor","hex","setState","evt","target","value","preventDefault","newColorName","newColorCode","toAdd","st","render","console","log","textColor","backgroundColor","map","format","defaultProps","maxColors"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport {Link} from 'react-router-dom'\r\nimport {ChromePicker} from 'react-color'\r\nimport ColorBox from './ColorBox'\r\nimport seedColors from './seedColors'\r\n// import Grid from '@material-ui/core/Grid';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport chroma from 'chroma-js'\r\n// import DeleteIcon from '@icons/material/DeleteIcon';\r\n// import { Card, Container, IconButton } from '@material-ui/core';\r\nimport './NewPaletteForm.css'\r\n\r\n\r\n\r\nclass NewPaletteForm extends Component {\r\n    static defaultProps = {\r\n        maxColors: 20,\r\n    }\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n    \r\n            paletteName: \"\",\r\n            id: \"\",\r\n            emoji: \"\",\r\n            colors: [\r\n                { name: \"red\", color: \"#FF0000\"},\r\n                { name: \"yellow\", color: \"#FFB000\"}\r\n            ],\r\n        \r\n            name: \"\",\r\n            color: \"\",\r\n            bgColor: \"#FF0000\",\r\n            open: false,\r\n          \r\n        }\r\n        this.handleChange = this.handleChange.bind(this)\r\n        this.handleSubmit = this.handleSubmit.bind(this)\r\n        this.handleClick = this.handleClick.bind(this)\r\n        this.handleClickOpen = this.handleClickOpen.bind(this)\r\n        this.handleClose = this.handleClose.bind(this)\r\n        this.handleSave = this.handleSave.bind(this)\r\n        this.paletteName = this.paletteName.bind(this)\r\n        this.addColorName = this.addColorName.bind(this)\r\n        this.addPaletteToPaletteList = this.addPaletteToPaletteList.bind(this)\r\n\r\n    }\r\n\r\n    // adding the palette to paletteList\r\n    addPaletteToPaletteList(){\r\n        const {paletteName, emoji, colors} = this.state;\r\n        let id = paletteName.toLocaleLowerCase().split(' ').join(\"-\");\r\n        let palettes = seedColors;\r\n        let newPalette = {\r\n            paletteName: paletteName,\r\n            id: id,\r\n            emoji: emoji,\r\n            colors: colors\r\n        }\r\n        palettes.push(newPalette)\r\n    }\r\n\r\n\r\n    handleChange(color) {\r\n        let newColor = color.hex\r\n   \r\n        this.setState({\r\n            color:newColor, \r\n        })\r\n    };\r\n\r\n  \r\n    addColorName(evt){\r\n       \r\n        this.setState({\r\n            [evt.target.name]: evt.target.value, \r\n        })\r\n        \r\n    }\r\n\r\n    handleSubmit(evt){\r\n        evt.preventDefault();\r\n\r\n    }\r\n\r\n    handleClick(evt){\r\n        let newColorName = this.state.name;\r\n        let newColorCode = this.state.color;\r\n        let toAdd = {\r\n            name: newColorName,\r\n            color: newColorCode\r\n        }\r\n    \r\n        this.setState(st => ({\r\n            \r\n            colors: [...st.colors,  toAdd],\r\n            name: \"\",\r\n            color: \"\"\r\n        }))\r\n    \r\n    }\r\n   \r\n// opens modal form for palette name\r\n    handleClickOpen() {\r\n        this.setState({\r\n            open: true,\r\n        })\r\n    \r\n    }\r\n\r\n// close modal form\r\n    handleClose(evt) {\r\n        this.setState({\r\n            open:false,\r\n        })\r\n    }\r\n\r\n// when save is clicked, palette is added to the palette list\r\n    handleSave(){\r\n        this.addPaletteToPaletteList();\r\n        this.setState({\r\n            open:false,\r\n        })\r\n    }\r\n// set the palette name with modal form\r\n    paletteName(evt){\r\n        this.setState({\r\n            paletteName: evt.target.value, \r\n        })\r\n    }\r\n \r\n    render(){\r\n        const {color} =  this.state;\r\n        console.log(color)\r\n        const textColor = \"white\"\r\n        // chroma.contrast(this.state.color, 'white') >= 4.5 ? \"white\" : \"black\"\r\n        return(\r\n            <div className = \"NewPaletteForm\" >\r\n                <div className=\"color-picker\">\r\n                    <h2>Design Your Palette</h2>\r\n                    <Button variant=\"contained\" color=\"primary\">\r\n                        Random Color\r\n                    </Button>\r\n                    <Button variant=\"contained\" color=\"secondary\">\r\n                        Clear Palette\r\n                    </Button>\r\n                    <ChromePicker color={this.state.color}\r\n                         onChangeComplete = {this.handleChange}\r\n                    />\r\n                    <form onSubmit = {this.handleSubmit}>  \r\n                        <TextField\r\n                            id=\"filled-with-placeholder\"\r\n                            label=\"Color Name\"\r\n                            placeholder=\"Color Name\"\r\n                            margin=\"normal\"\r\n                            variant=\"filled\"\r\n                            value = {this.state.name}\r\n                            name=\"name\"\r\n                            onChange={this.addColorName}\r\n                        />\r\n                        <Button  onClick = {this.handleClick} style={{backgroundColor: this.state.color, color: textColor}}>\r\n                            Add Color\r\n                        </Button>\r\n                    </form>\r\n                </div>\r\n\r\n                <div className=\"color-container\">\r\n                    <div className=\"color-container-navbar\">\r\n                        <h5>Create A Palette</h5>\r\n                        <div className=\"navbar-button\">\r\n                            <Button variant=\"contained\" color=\"primary\">\r\n                                <Link to = \"/\" style={{color: \"white\"}}> Go Back</Link>\r\n                            </Button>\r\n                            \r\n                            <Button variant=\"contained\" color=\"secondary\" onClick={this.handleClickOpen}>\r\n                                Save\r\n                            </Button>\r\n                        </div>\r\n                        \r\n                    </div>\r\n                    <Dialog open={this.state.open} onClose={this.handleClose} aria-labelledby=\"form-dialog-title\">\r\n                        <DialogTitle id=\"form-dialog-title\"> Add Palette Name</DialogTitle>\r\n\r\n                        <DialogContent>\r\n                            <DialogContentText>\r\n                                Please Add Palette Name\r\n                            </DialogContentText>\r\n\r\n                            <TextField\r\n                                autoFocus\r\n                                margin=\"dense\"\r\n                                id=\"name\"\r\n                                value={this.state.paletteName}\r\n                                label=\"Palette Name\"\r\n                                type=\"name\"\r\n                                fullWidth\r\n                                onChange = {this.paletteName}\r\n                            />\r\n                        </DialogContent>\r\n\r\n                        <DialogActions>\r\n                            <Button onClick={this.handleClose} color=\"primary\">\r\n                                Cancel\r\n                            </Button>\r\n                            <Button onClick={this.handleSave } color=\"primary\">\r\n                                Save\r\n                            </Button>\r\n                        </DialogActions>\r\n                    </Dialog>\r\n\r\n                    <div className=\"color-container-palette\"> \r\n                        {this.state.colors.map(color => (\r\n                            \r\n                                <ColorBox bgColor = {color.color}\r\n                                         colorName = {color.name}\r\n                                         key = {color.color}\r\n                                         format = {this.props.format}\r\n                                />\r\n                              \r\n                        ))}\r\n                    </div>\r\n                </div>\r\n               \r\n            </div>\r\n         \r\n        )\r\n    }\r\n}\r\n\r\nexport default NewPaletteForm;"]},"metadata":{},"sourceType":"module"}