{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\todor\\\\Documents\\\\4-Web Development\\\\1-Web Development Courses\\\\3-REACT\\\\25-Color Palette\\\\color-palette\\\\src\\\\FormNavbar.js\";\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { withStyles } from '@material-ui/core/styles';\nimport classNames from 'classnames';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@icons/material/MenuIcon';\nimport Button from '@material-ui/core/Button';\nimport { Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle } from '@material-ui/core';\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\nconst drawerWidth = 400;\n\nconst styles = theme => ({\n  root: {\n    display: 'flex'\n  },\n  appBar: {\n    transition: theme.transitions.create(['margin', 'width'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen\n    }),\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\"\n  },\n  appBarShift: {\n    width: \"calc(100% - \".concat(drawerWidth, \"px)\"),\n    marginLeft: drawerWidth,\n    transition: theme.transitions.create(['margin', 'width'], {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen\n    })\n  },\n  menuButton: {\n    marginRight: theme.spacing(2)\n  },\n  hide: {\n    display: 'none'\n  },\n  navBtn: {\n    display: 'flex',\n    justifyContent: \"space-between\",\n    backgroundColor: \"pink\"\n  },\n  goBackLink: {\n    \"&:hover\": {\n      textDecoration: \"none\"\n    }\n  }\n});\n\nclass FormNavbar extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      openModal: false,\n      paletteName: \"\"\n    };\n    this.cancelSave = this.cancelSave.bind(this);\n    this.openModal = this.openModal.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount() {\n    // validate if the palette name is unique\n    ValidatorForm.addValidationRule('isPaletteNameUnique', value => this.props.palettes.every(({\n      paletteName\n    }) => paletteName.toLocaleLowerCase() !== value.toLocaleLowerCase()));\n  }\n\n  openModal() {\n    this.setState({\n      openModal: true\n    });\n  }\n\n  cancelSave() {\n    this.setState({\n      openModal: false\n    });\n  }\n\n  handleChange(evt) {\n    this.setState({\n      [evt.target.name]: evt.target.value\n    });\n  }\n\n  render() {\n    const _this$props = this.props,\n          classes = _this$props.classes,\n          open = _this$props.open;\n    const _this$state = this.state,\n          openModal = _this$state.openModal,\n          paletteName = _this$state.paletteName;\n    return React.createElement(\"div\", {\n      className: classes.root,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, React.createElement(CssBaseline, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }), React.createElement(AppBar, {\n      color: \"default\",\n      position: \"fixed\",\n      className: classNames(classes.appBar, {\n        [classes.appBarShift]: open\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, React.createElement(Toolbar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, React.createElement(IconButton, {\n      color: \"inherit\",\n      \"aria-label\": \"open drawer\",\n      onClick: this.props.handleDrawerOpen,\n      edge: \"start\",\n      className: classNames(classes.menuButton, open && classes.hide),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, React.createElement(MenuIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    })), React.createElement(Typography, {\n      variant: \"h6\",\n      noWrap: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, \"Create A Palette\")), React.createElement(\"div\", {\n      className: classes.navBtn,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, React.createElement(Link, {\n      className: classes.goBackLink,\n      to: \"/\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"contained\",\n      color: \"secondary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, \"Go Back\")), React.createElement(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: this.openModal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, \"Save Palette\"))), React.createElement(Dialog, {\n      id: \"paletteNameModal\",\n      open: openModal,\n      onClose: this.handleClose,\n      \"aria-labelledby\": \"form-dialog-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, React.createElement(DialogTitle, {\n      id: \"form-dialog-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, \" Add Palette Name\"), React.createElement(DialogContent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, React.createElement(DialogContentText, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, \"Please Add Palette Name\"), React.createElement(ValidatorForm, {\n      onSubmit: () => this.props.savePalette(paletteName),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, React.createElement(TextValidator, {\n      value: paletteName,\n      onChange: this.handleChange,\n      name: \"paletteName\",\n      validators: ['required', 'isPaletteNameUnique'],\n      errorMessages: ['This field is required. Enter a palette name!', 'Palette name must be unique!'],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }), React.createElement(DialogActions, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }, React.createElement(Button, {\n      onClick: this.cancelSave,\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }, \"Cancel\"), React.createElement(Button, {\n      type: \"submit\",\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }, \"Save\"))))));\n  }\n\n}\n\nexport default withStyles(styles, {\n  withTheme: true\n})(FormNavbar);","map":{"version":3,"sources":["C:\\Users\\todor\\Documents\\4-Web Development\\1-Web Development Courses\\3-REACT\\25-Color Palette\\color-palette\\src\\FormNavbar.js"],"names":["React","Component","Link","withStyles","classNames","CssBaseline","AppBar","Toolbar","Typography","IconButton","MenuIcon","Button","Dialog","DialogActions","DialogContent","DialogContentText","DialogTitle","ValidatorForm","TextValidator","drawerWidth","styles","theme","root","display","appBar","transition","transitions","create","easing","sharp","duration","leavingScreen","flexDirection","justifyContent","alignItems","appBarShift","width","marginLeft","easeOut","enteringScreen","menuButton","marginRight","spacing","hide","navBtn","backgroundColor","goBackLink","textDecoration","FormNavbar","constructor","props","state","openModal","paletteName","cancelSave","bind","handleChange","componentDidMount","addValidationRule","value","palettes","every","toLocaleLowerCase","setState","evt","target","name","render","classes","open","handleDrawerOpen","handleClose","savePalette","withTheme"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport {Link} from 'react-router-dom'\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport classNames from 'classnames'\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@icons/material/MenuIcon';\r\nimport Button from '@material-ui/core/Button';\r\nimport {Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle } from '@material-ui/core'\r\nimport { ValidatorForm, TextValidator} from 'react-material-ui-form-validator';\r\n\r\nconst drawerWidth = 400;\r\nconst styles = theme => ({\r\n    root: {\r\n        display: 'flex',\r\n    },\r\n    appBar: {\r\n        transition: theme.transitions.create(['margin', 'width'], {\r\n          easing: theme.transitions.easing.sharp,\r\n          duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n        flexDirection: \"row\",\r\n        justifyContent: \"space-between\",\r\n        alignItems:\"center\"\r\n      },\r\n      appBarShift: {\r\n        width: `calc(100% - ${drawerWidth}px)`,\r\n        marginLeft: drawerWidth,\r\n        transition: theme.transitions.create(['margin', 'width'], {\r\n          easing: theme.transitions.easing.easeOut,\r\n          duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n      },\r\n      menuButton: {\r\n        marginRight: theme.spacing(2),\r\n      },\r\n      hide: {\r\n        display: 'none',\r\n      },\r\n      navBtn: {\r\n          display: 'flex',\r\n          justifyContent: \"space-between\",\r\n          backgroundColor: \"pink\"\r\n\r\n      },\r\n      goBackLink: {\r\n        \"&:hover\":{\r\n          textDecoration: \"none\"\r\n        }\r\n    \r\n      }\r\n})\r\n\r\nclass FormNavbar extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            openModal: false,\r\n            paletteName: \"\",\r\n         \r\n        }\r\n        this.cancelSave = this.cancelSave.bind(this)\r\n        this.openModal = this.openModal.bind(this)\r\n        this.handleChange = this.handleChange.bind(this)\r\n        \r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        // validate if the palette name is unique\r\n        ValidatorForm.addValidationRule('isPaletteNameUnique', value =>       \r\n            this.props.palettes.every(({ paletteName } ) => paletteName.toLocaleLowerCase() !== value.toLocaleLowerCase())\r\n        );\r\n    \r\n    }\r\n\r\n    openModal(){\r\n        this.setState({\r\n          openModal: true,\r\n        })\r\n    }\r\n  \r\n    cancelSave(){\r\n        this.setState({\r\n          openModal: false,\r\n        })\r\n    }\r\n\r\n    handleChange(evt){\r\n        this.setState({\r\n          [evt.target.name]: evt.target.value,\r\n        })\r\n    }\r\n\r\n\r\n    render(){\r\n        const {classes, open} = this.props;\r\n        const { openModal, paletteName } = this.state;\r\n   \r\n        return(\r\n            <div className={classes.root}>\r\n                <CssBaseline />\r\n                <AppBar\r\n                  color=\"default\"\r\n                    position=\"fixed\"\r\n                    className={classNames(classes.appBar, {\r\n                        [classes.appBarShift]: open,\r\n                    })}\r\n                >\r\n                    <Toolbar>\r\n                        <IconButton\r\n                            color=\"inherit\"\r\n                            aria-label=\"open drawer\"\r\n                            onClick={this.props.handleDrawerOpen}\r\n                            edge=\"start\"\r\n                            className={classNames(classes.menuButton, open && classes.hide)}\r\n                        >\r\n                            <MenuIcon />\r\n                        </IconButton>\r\n                        <Typography variant=\"h6\" noWrap>\r\n                            Create A Palette\r\n                        </Typography>\r\n                        \r\n                    </Toolbar>\r\n                    <div className={classes.navBtn}>\r\n                        <Link className={classes.goBackLink} to = \"/\">\r\n                        <Button variant=\"contained\" color=\"secondary\">\r\n                            Go Back\r\n                        </Button>\r\n                        </Link>\r\n                        \r\n                        <Button variant=\"contained\" color=\"primary\" onClick={this.openModal}>\r\n                            Save Palette\r\n                        </Button>\r\n                    </div>\r\n                 \r\n                </AppBar>\r\n\r\n                <Dialog id=\"paletteNameModal\" open={openModal} onClose={this.handleClose} aria-labelledby=\"form-dialog-title\">\r\n                  <DialogTitle id=\"form-dialog-title\"> Add Palette Name</DialogTitle>\r\n\r\n                  <DialogContent>\r\n                      <DialogContentText>\r\n                          Please Add Palette Name\r\n                      </DialogContentText>\r\n\r\n                    <ValidatorForm onSubmit={() => this.props.savePalette(paletteName)}>\r\n                        <TextValidator \r\n                            value={paletteName}\r\n                            onChange={this.handleChange}\r\n                            name=\"paletteName\"\r\n                            validators={[\r\n                                'required', \r\n                                'isPaletteNameUnique',\r\n                              ]}\r\n                            errorMessages={[\r\n                              'This field is required. Enter a palette name!', \r\n                              'Palette name must be unique!', \r\n                            ]}\r\n\r\n                            />\r\n                          <DialogActions>\r\n                            <Button onClick={this.cancelSave} color=\"primary\">\r\n                                Cancel\r\n                            </Button>\r\n                            <Button type=\"submit\" color=\"primary\">\r\n                                Save\r\n                            </Button>\r\n                        </DialogActions>\r\n                        {/* <Dialog open={openEmoji}>\r\n                            <Picker  onSelect={this.addEmoji} />\r\n                        </Dialog> */}\r\n\r\n                    </ValidatorForm>\r\n             \r\n                  </DialogContent>\r\n                       \r\n                </Dialog>\r\n\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default withStyles(styles, {withTheme: true})(FormNavbar);"]},"metadata":{},"sourceType":"module"}