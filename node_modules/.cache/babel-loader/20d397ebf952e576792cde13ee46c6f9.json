{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\todor\\\\Documents\\\\4-Web Development\\\\1-Web Development Courses\\\\3-REACT\\\\25-Color Palette\\\\color-palette\\\\src\\\\Routes.js\";\nimport React, { Component } from 'react';\nimport { Route, Switch, Redirect } from 'react-router-dom';\nimport seedColors from './seedColors';\nimport ColorPalette from './ColorPalette';\nimport ColorPaletteList from './ColorPaletteList';\nimport PaletteShades from './PaletteShades';\nimport MakeNewPalette from './MakeNewPalette';\nimport { getPaletteShades } from './helpers';\n\nclass Routes extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      format: \"hex\",\n      copied: false,\n      colorPalettes: JSON.parse(window.localStorage.getItem(\"palettes\") || \"[]\")\n    };\n    this.handleFormat = this.handleFormat.bind(this);\n    this.onCopy = this.onCopy.bind(this);\n    this.removePalette = this.removePalette.bind(this);\n    this.savePalette = this.savePalette.bind(this);\n  }\n\n  handleFormat(value) {\n    this.setState({\n      format: value\n    });\n  }\n\n  onCopy(value) {\n    this.setState({\n      copied: value\n    });\n  }\n\n  componentDidMount() {\n    if (this.state.colorPalettes.length === 0) {\n      this.getPalettes();\n    }\n  }\n\n  async getPalettes() {\n    let palette = seedColors;\n    this.setState(st => ({\n      colorPalettes: [...st.colorPalettes, ...palette]\n    }), () => window.localStorage.setItem(\"palettes\", JSON.stringify(this.state.colorPalettes)));\n  }\n\n  removePalette(id) {\n    const oldPalette = [...this.state.colorPalettes];\n    const newPalette = oldPalette.filter(item => item.id !== id);\n    this.setState({\n      colorPalettes: newPalette\n    }, () => window.localStorage.setItem(\"palettes\", JSON.stringify(this.state.colorPalettes)));\n  }\n\n  savePalette(newPalette) {\n    const palettes = this.state.colorPalettes;\n    palettes.push(newPalette);\n    window.localStorage.setItem(\"palettes\", JSON.stringify(palettes));\n  }\n\n  render() {\n    const getPalette = props => {\n      let name = props.match.params.name;\n      let currentPalette = this.state.colorPalettes.find(palette => palette.id === name);\n      return React.createElement(ColorPalette, Object.assign({}, props, {\n        palette: getPaletteShades(currentPalette),\n        format: this.state.format,\n        handleFormat: this.handleFormat,\n        onCopy: this.onCopy,\n        sliderMarks: this.props.marks,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }));\n    };\n\n    const getColorShades = props => {\n      let name = props.match.params.name;\n      let colorName = props.match.params.colorName;\n      let currentPalette = this.state.colorPalettes.find(palette => palette.id === name);\n      let currentColor = currentPalette.colors.find(color => color.name === colorName);\n      return React.createElement(PaletteShades, Object.assign({}, props, {\n        color: currentColor,\n        palette: currentPalette,\n        format: this.state.format,\n        handleFormat: this.handleFormat,\n        onCopy: this.onCopy,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }));\n    };\n\n    const _this$state = this.state,\n          colorPalettes = _this$state.colorPalettes,\n          format = _this$state.format;\n    return React.createElement(Switch, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, React.createElement(Route, {\n      exact: true,\n      path: \"/palette/new\",\n      render: routProps => React.createElement(MakeNewPalette, Object.assign({\n        format: format,\n        palettes: colorPalettes,\n        savePalette: this.savePalette\n      }, routProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/\",\n      render: routProps => React.createElement(ColorPaletteList, Object.assign({\n        colorPalettes: colorPalettes,\n        removePalette: this.removePalette\n      }, routProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/palette/:name\",\n      render: getPalette,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/palette/:name/:colorName\",\n      render: getColorShades,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }), React.createElement(Redirect, {\n      to: \"/\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }));\n  }\n\n}\n\nRoutes.defaultProps = {\n  // colorPalettes: seedColors,\n  marks: {\n    50: \"50\",\n    100: \"100\",\n    200: \"200\",\n    300: \"300\",\n    400: \"400\",\n    500: \"500\",\n    600: \"600\",\n    700: \"700\",\n    800: \"800\",\n    900: \"900\"\n  }\n};\nexport default Routes;","map":{"version":3,"sources":["C:\\Users\\todor\\Documents\\4-Web Development\\1-Web Development Courses\\3-REACT\\25-Color Palette\\color-palette\\src\\Routes.js"],"names":["React","Component","Route","Switch","Redirect","seedColors","ColorPalette","ColorPaletteList","PaletteShades","MakeNewPalette","getPaletteShades","Routes","constructor","props","state","format","copied","colorPalettes","JSON","parse","window","localStorage","getItem","handleFormat","bind","onCopy","removePalette","savePalette","value","setState","componentDidMount","length","getPalettes","palette","st","setItem","stringify","id","oldPalette","newPalette","filter","item","palettes","push","render","getPalette","name","match","params","currentPalette","find","marks","getColorShades","colorName","currentColor","colors","color","routProps","defaultProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Route, Switch, Redirect } from 'react-router-dom'\r\nimport seedColors from './seedColors'\r\nimport ColorPalette from './ColorPalette'\r\nimport ColorPaletteList from './ColorPaletteList'\r\nimport PaletteShades from './PaletteShades'\r\nimport MakeNewPalette from './MakeNewPalette'\r\nimport {getPaletteShades} from './helpers'\r\n\r\nclass Routes extends Component {\r\n    static defaultProps = {\r\n        // colorPalettes: seedColors,\r\n        marks: {50: \"50\", 100: \"100\", 200: \"200\", 300: \"300\", 400: \"400\", 500: \"500\", 600: \"600\", 700: \"700\", 800: \"800\", 900: \"900\"}\r\n    }\r\n      constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            format: \"hex\",\r\n            copied: false,\r\n            colorPalettes: JSON.parse(window.localStorage.getItem(\"palettes\") || \"[]\")\r\n        }\r\n    \r\n        this.handleFormat = this.handleFormat.bind(this)\r\n        this.onCopy = this.onCopy.bind(this)\r\n        this.removePalette = this.removePalette.bind(this)\r\n        this.savePalette = this.savePalette.bind(this)\r\n      }\r\n    \r\n      handleFormat(value){\r\n          this.setState({\r\n              format: value,\r\n          })\r\n      }\r\n      onCopy(value){\r\n        this.setState({\r\n          copied: value\r\n        })\r\n      }\r\n\r\n      componentDidMount(){\r\n  \r\n        if(this.state.colorPalettes.length === 0){\r\n          this.getPalettes()\r\n        }      \r\n        \r\n      }\r\n    \r\n\r\n    async getPalettes(){\r\n      let palette = seedColors;\r\n      this.setState(\r\n        st => ({\r\n          colorPalettes: [...st.colorPalettes, ...palette]\r\n        }),\r\n        () => window.localStorage.setItem(\"palettes\", JSON.stringify(this.state.colorPalettes))\r\n      );\r\n    }\r\n\r\n    removePalette(id){\r\n      const oldPalette = [...this.state.colorPalettes];\r\n\r\n      const newPalette = oldPalette.filter(item => item.id !== id);\r\n\r\n      this.setState({\r\n          colorPalettes: newPalette,\r\n      }, () => window.localStorage.setItem(\"palettes\", JSON.stringify(this.state.colorPalettes)))\r\n  }\r\n\r\n  savePalette(newPalette){\r\n    const palettes = this.state.colorPalettes;\r\n    palettes.push(newPalette);\r\n    window.localStorage.setItem(\"palettes\", JSON.stringify(palettes))\r\n  }\r\n    \r\n  \r\n    render(){\r\n        const getPalette = props => {\r\n            let name = props.match.params.name;\r\n                 \r\n            let currentPalette = this.state.colorPalettes.find(\r\n              palette => palette.id === name\r\n              \r\n            );\r\n            return <ColorPalette {...props} palette={getPaletteShades(currentPalette)} \r\n                      format={this.state.format} \r\n                      handleFormat = {this.handleFormat}\r\n                      onCopy = {this.onCopy} \r\n                      sliderMarks = {this.props.marks}\r\n                    />;\r\n        };\r\n      \r\n        const getColorShades = props => {\r\n            let name = props.match.params.name;\r\n            let colorName = props.match.params.colorName;\r\n                     \r\n            let currentPalette = this.state.colorPalettes.find( \r\n              palette => palette.id === name\r\n            )\r\n            let currentColor = currentPalette.colors.find(\r\n              color => color.name === colorName\r\n              \r\n            )\r\n      \r\n            return <PaletteShades {...props} color={currentColor} \r\n                      palette = {currentPalette} \r\n                      format={this.state.format} \r\n                      handleFormat = {this.handleFormat}\r\n                      onCopy = {this.onCopy} \r\n                    />\r\n        }\r\n\r\n        const {colorPalettes, format } = this.state;\r\n\r\n        return(\r\n            <Switch>\r\n                <Route exact path = \"/palette/new\" render= {(routProps) => <MakeNewPalette format={format} palettes={colorPalettes} savePalette={this.savePalette} {...routProps}/>} /> \r\n                <Route exact path=\"/\" \r\n                      render = {(routProps) => <ColorPaletteList colorPalettes={colorPalettes} removePalette = {this.removePalette} {...routProps}/>} \r\n                />\r\n                <Route exact path = \"/palette/:name\" render = {getPalette} />\r\n                {/* <Route exact path = '/palette/:name/:colorName' render ={routProps => <PaletteShades colorPalettes={colorPalettes} {...routProps}/>} /> */}\r\n                <Route exact path = '/palette/:name/:colorName' render ={getColorShades} />\r\n                <Redirect to = \"/\" />\r\n            </Switch>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default Routes;"]},"metadata":{},"sourceType":"module"}