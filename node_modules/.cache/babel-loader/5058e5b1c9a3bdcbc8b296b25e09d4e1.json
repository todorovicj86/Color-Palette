{"ast":null,"code":"import chroma from 'chroma-js'; // var rgbToHex = function (rgb) { \n//     var hex = Number(rgb).toString(16);\n//     if (hex.length < 2) {\n//          hex = \"0\" + hex;\n//     }\n//     return hex;\n//   };\n//   var fullColorHex = function(r,g,b) {   \n//     var red = rgbToHex(r);\n//     var green = rgbToHex(g);\n//     var blue = rgbToHex(b);\n//     return red+green+blue;\n//   };\n//   var colorShades = function(r, g, b){\n//     var max = Math.max(r,Math.max(g,b));\n//     var step = 255 / (max * 10);\n//     var red = (r * step, g * step, b * step)\n//     var green =  (r * step * 2, g * step * 2, b * step * 2)\n//     var blue = (r * step * 3, g * step * 3, b * step * 3)\n//     //   var red = rgbToHex(Math.round(11*r/10))\n//     //   var green = rgbToHex(Math.round(11*g/10))\n//     //   var blue = rgbToHex(Math.round(11*b/10))\n//     console.log(red, green,blue)\n//       return red+green+blue;\n//   }\n\nvar getPaletteShades = function (currentPalette) {\n  let colorShade;\n  let shades = [];\n  let shadeInfo; // console.log(currentPalette);\n  // 10 shade levels for a slider\n\n  const levels = [50, 100, 200, 300, 400, 500, 600, 700, 800, 900]; // for each color in the color palette, make 10 different shades\n\n  for (let i = 0; i < currentPalette.colors.length; i++) {\n    // color from the palette\n    const baseColor = currentPalette.colors[i].color; // darkest shade, not black\n\n    const darkestShade = chroma(baseColor).darken(4); // lightest shade, not white\n\n    const brightestShade = chroma(baseColor).brighten(2.6); // make 10 shades of one color\n\n    colorShade = chroma.scale([brightestShade, baseColor, darkestShade]).colors(10); // make name and color code format for each shade\n\n    for (let j = 0; j < colorShade.length; j++) {\n      shadeInfo = {\n        name: currentPalette.colors[i].name + \" \" + levels[j],\n        id: currentPalette.colors[i].name,\n        hex: colorShade[j],\n        rgb: chroma(colorShade[j]).css(),\n        rgba: chroma(colorShade[j]).alpha(0.9).css()\n      };\n      shades.push(shadeInfo);\n    }\n  }\n\n  let newPalette = {\n    paletteName: currentPalette.paletteName,\n    id: currentPalette.id,\n    emoji: currentPalette.emoji,\n    colors: shades\n  };\n  let colors = {};\n\n  for (let i = 0; i < levels.length; i++) {\n    let allColors = new Set();\n    allColors.add(shades);\n    colors[levels[i]] = []; // console.log(allColors)\n\n    for (let color of allColors) {\n      color.forEach(function (c) {\n        if (c.name.search(\" \" + levels[i]) !== -1) {\n          // console.log(c)\n          color = c;\n          colors[levels[i]].push(color);\n        }\n      });\n    }\n\n    newPalette.colors = colors;\n  } // console.log(newPalette)\n\n\n  let firstRow = new Set(newPalette.colors[50]);\n\n  for (let el of firstRow) {\n    if (el.name.search(\"500\") !== -1) {\n      firstRow.delete(el);\n    }\n  }\n\n  newPalette.colors[50] = Array.from(firstRow); // console.log(newPalette);\n\n  return newPalette; // newPalette.colors[50].forEach(function(el){\n  //   if(el.name.search(\"500\") !== -1){\n  //     console.log(el)\n  //   }\n  // })\n  // console.log(newPalette.colors[50])\n  // return newPalette;\n};\n\nexport { getPaletteShades };","map":{"version":3,"sources":["C:\\Users\\todor\\Documents\\4-Web Development\\1-Web Development Courses\\3-REACT\\25-Color Palette\\color-palette\\src\\helpers.js"],"names":["chroma","getPaletteShades","currentPalette","colorShade","shades","shadeInfo","levels","i","colors","length","baseColor","color","darkestShade","darken","brightestShade","brighten","scale","j","name","id","hex","rgb","css","rgba","alpha","push","newPalette","paletteName","emoji","allColors","Set","add","forEach","c","search","firstRow","el","delete","Array","from"],"mappings":"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","sourcesContent":["import chroma from 'chroma-js'\r\n\r\n\r\n// var rgbToHex = function (rgb) { \r\n//     var hex = Number(rgb).toString(16);\r\n//     if (hex.length < 2) {\r\n//          hex = \"0\" + hex;\r\n//     }\r\n//     return hex;\r\n//   };\r\n\r\n//   var fullColorHex = function(r,g,b) {   \r\n//     var red = rgbToHex(r);\r\n//     var green = rgbToHex(g);\r\n//     var blue = rgbToHex(b);\r\n//     return red+green+blue;\r\n//   };\r\n\r\n//   var colorShades = function(r, g, b){\r\n//     var max = Math.max(r,Math.max(g,b));\r\n//     var step = 255 / (max * 10);\r\n//     var red = (r * step, g * step, b * step)\r\n//     var green =  (r * step * 2, g * step * 2, b * step * 2)\r\n//     var blue = (r * step * 3, g * step * 3, b * step * 3)\r\n//     //   var red = rgbToHex(Math.round(11*r/10))\r\n//     //   var green = rgbToHex(Math.round(11*g/10))\r\n//     //   var blue = rgbToHex(Math.round(11*b/10))\r\n//     console.log(red, green,blue)\r\n//       return red+green+blue;\r\n//   }\r\n\r\n\r\nvar getPaletteShades = function (currentPalette){\r\n  let colorShade;\r\n  let shades = [];\r\n  let shadeInfo;\r\n  // console.log(currentPalette);\r\n  // 10 shade levels for a slider\r\n  const levels = [50, 100, 200, 300, 400, 500, 600, 700, 800, 900];\r\n  // for each color in the color palette, make 10 different shades\r\n  for(let i = 0; i < currentPalette.colors.length; i++){\r\n    // color from the palette\r\n    const baseColor = currentPalette.colors[i].color;\r\n    // darkest shade, not black\r\n    const darkestShade = chroma(baseColor).darken(4);\r\n    // lightest shade, not white\r\n    const brightestShade = chroma(baseColor).brighten(2.6)\r\n    // make 10 shades of one color\r\n    colorShade = chroma.scale([brightestShade, baseColor, darkestShade]).colors(10);\r\n      \r\n    // make name and color code format for each shade\r\n    for(let j=0; j < colorShade.length; j++){\r\n      shadeInfo = {\r\n        name: currentPalette.colors[i].name + \" \" + levels[j],\r\n        id: currentPalette.colors[i].name,\r\n        hex: colorShade[j],\r\n        rgb: chroma(colorShade[j]).css(),\r\n        rgba: chroma(colorShade[j]).alpha(0.9).css(),\r\n      }\r\n      shades.push(shadeInfo);\r\n       \r\n    }\r\n\r\n  } \r\n\r\n  let newPalette = {\r\n    paletteName: currentPalette.paletteName,\r\n    id: currentPalette.id,\r\n    emoji: currentPalette.emoji,\r\n    colors: shades,\r\n  }\r\n  let colors = {};\r\n  for(let i = 0; i < levels.length; i++){\r\n    let allColors = new Set();\r\n    allColors.add(shades)\r\n    colors[levels[i]]=[];\r\n    // console.log(allColors)\r\n    for(let color of allColors){\r\n      color.forEach(function(c){\r\n        if((c.name.search(\" \" + levels[i]) !== -1)){\r\n          // console.log(c)\r\n          color = c;\r\n          colors[levels[i]].push(color)\r\n        }     \r\n      })\r\n  }\r\n  newPalette.colors = colors;\r\n}\r\n// console.log(newPalette)\r\nlet firstRow = new Set(newPalette.colors[50]);\r\nfor(let el of firstRow){\r\n  if(el.name.search(\"500\") !== -1){\r\n    firstRow.delete(el)\r\n  }\r\n}\r\nnewPalette.colors[50] = Array.from(firstRow);\r\n// console.log(newPalette);\r\nreturn newPalette\r\n\r\n\r\n// newPalette.colors[50].forEach(function(el){\r\n//   if(el.name.search(\"500\") !== -1){\r\n//     console.log(el)\r\n//   }\r\n// })\r\n// console.log(newPalette.colors[50])\r\n    // return newPalette;\r\n}\r\nexport { getPaletteShades}"]},"metadata":{},"sourceType":"module"}